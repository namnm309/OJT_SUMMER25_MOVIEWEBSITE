using DomainLayer.Entities;
using DomainLayer.Enum;
using InfrastructureLayer.Data;
using Microsoft.EntityFrameworkCore;

namespace InfrastructureLayer.Repository
{
    // UserRepository k·∫ø th·ª´a GenericRepository ƒë·ªÉ c√≥ s·∫µn c√°c methods c∆° b·∫£n
    // + implement c√°c methods ƒë·∫∑c bi·ªát cho Users
    public class UserRepository : GenericRepository<Users>, IUserRepository
    {
        // Constructor g·ªçi constructor c·ªßa GenericRepository
        public UserRepository(MovieContext context) : base(context)
        {
        }

        // === USER-SPECIFIC METHODS ===
        // Ch·ªâ implement c√°c methods ƒë·∫∑c bi·ªát, c√°c methods c∆° b·∫£n ƒë√£ c√≥ t·ª´ GenericRepository

        public async Task<Users?> GetByUsernameAsync(string username)
        {
            // S·ª≠ d·ª•ng _dbSet t·ª´ GenericRepository
            return await _dbSet
                .FirstOrDefaultAsync(u => u.Username == username && u.IsActive);
        }

        public async Task<Users?> GetByEmailAsync(string email)
        {
            return await _dbSet
                .FirstOrDefaultAsync(u => u.Email == email && u.IsActive);
        }

        public async Task<List<Users>> GetAllMembersAsync()
        {
            // Ch·ªâ l·∫•y users c√≥ role Member v√† ƒëang active
            return await _dbSet
                .Where(u => u.IsActive && u.Role == UserRole.Member)
                .OrderByDescending(u => u.CreatedAt)
                .ToListAsync();
        }

        public async Task<bool> IsUsernameExistsAsync(string username)
        {
            // S·ª≠ d·ª•ng ExistsAsync t·ª´ GenericRepository
            return await ExistsAsync(u => u.Username == username && u.IsActive);
        }

        public async Task<bool> IsEmailExistsAsync(string email)
        {
            return await ExistsAsync(u => u.Email == email && u.IsActive);
        }

        // Note: CreateAsync, UpdateAsync, GetByIdAsync ƒë√£ c√≥ s·∫µn t·ª´ GenericRepository!
        // Kh√¥ng c·∫ßn implement l·∫°i n·ªØa üéâ
    }
} 