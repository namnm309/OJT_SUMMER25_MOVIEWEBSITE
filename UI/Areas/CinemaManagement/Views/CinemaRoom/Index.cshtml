@model System.Text.Json.JsonElement
@using System.Text.Json
@{
    ViewData["Title"] = "Quản lý phòng chiếu - Cinema City";
    Layout = null;
    
    // Check data availability
    bool hasData = false;
    int dataCount = 0;
    
    // Model is already JsonElement - check various scenarios
    if (Model.ValueKind == JsonValueKind.Array && Model.GetArrayLength() > 0)
    {
        hasData = true;
        dataCount = Model.GetArrayLength();
    }
    else if (Model.ValueKind == JsonValueKind.Object)
    {
        // Check if object has data property
        if (Model.TryGetProperty("data", out var dataArray) && dataArray.ValueKind == JsonValueKind.Array && dataArray.GetArrayLength() > 0)
        {
            hasData = true;
            dataCount = dataArray.GetArrayLength();
        }
        // Check if object has typical room properties (single room)
        else if (Model.TryGetProperty("roomName", out _))
        {
            hasData = true;
            dataCount = 1;
        }
    }
    
    ViewBag.HasData = hasData;
    ViewBag.DataCount = dataCount;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- New Dashboard CSS -->
    <link rel="stylesheet" href="~/css/new-dashboard.css" />
    
    <style>
        /* Modern Design System */
        :root {
            /* Colors */
            --primary: #6366f1;
            --primary-hover: #4f46e5;
            --primary-light: #e0e7ff;
            --secondary: #f3f4f6;
            --success: #10b981;
            --success-light: #d1fae5;
            --danger: #ef4444;
            --danger-light: #fee2e2;
            --warning: #f59e0b;
            --warning-light: #fef3c7;
            --info: #3b82f6;
            --info-light: #dbeafe;
            
            /* Neutrals */
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
            
            /* Border Radius */
            --radius-sm: 0.375rem;
            --radius: 0.5rem;
            --radius-lg: 0.75rem;
            --radius-xl: 1rem;
            
            /* Transitions */
            --transition: all 0.2s ease;
            --transition-fast: all 0.15s ease;
        }

        /* Global Styles */
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--gray-50);
            color: var(--gray-800);
            line-height: 1.5;
        }

        /* Content Container */
        .content-wrapper {
            padding: 1.5rem;
            width: 100%;
            max-width: 100%;
            margin: 0;
        }

        /* Page Header */
        .page-header {
            margin-bottom: 1.5rem;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 800;
            color: var(--gray-900);
            margin: 0 0 0.25rem 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .page-title-icon {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, var(--primary), var(--primary-hover));
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.1rem;
        }

        .page-subtitle {
            color: var(--gray-500);
            font-size: 0.875rem;
            margin: 0;
        }

        /* Card Component */
        .card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            box-shadow: var(--shadow-sm);
            overflow: hidden;
            transition: var(--transition);
            width: 100%;
        }

        .card:hover {
            box-shadow: var(--shadow-md);
        }

        /* Controls Bar */
        .controls-bar {
            padding: 1rem 1.25rem;
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
            background: white;
            border-bottom: 1px solid var(--gray-100);
        }

        /* Search Box */
        .search-box {
            position: relative;
            flex: 1 1 auto;
            min-width: 0;
            max-width: 500px;
        }

        .search-icon {
            position: absolute;
            left: 0.875rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-400);
            pointer-events: none;
            font-size: 0.875rem;
        }

        .search-input {
            width: 100%;
            padding: 0.625rem 1rem 0.625rem 2.75rem;
            border: 1.5px solid var(--gray-200);
            border-radius: var(--radius);
            font-size: 0.875rem;
            transition: var(--transition);
            background: var(--gray-50);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            background: white;
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        /* Buttons */
        .btn {
            padding: 0.625rem 1.25rem;
            border-radius: var(--radius);
            font-weight: 600;
            font-size: 0.875rem;
            border: none;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            white-space: nowrap;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-hover));
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-secondary {
            background: var(--gray-100);
            color: var(--gray-700);
        }

        .btn-secondary:hover {
            background: var(--gray-200);
        }

        /* Table */
        .table-container {
            overflow-x: auto;
            width: 100%;
        }

        .modern-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            table-layout: auto;
        }

        .modern-table thead th {
            background: var(--gray-50);
            padding: 0.75rem 1rem;
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--gray-600);
            border-bottom: 2px solid var(--gray-200);
            text-align: left;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modern-table tbody tr {
            transition: var(--transition);
            border-bottom: 1px solid var(--gray-100);
        }

        .modern-table tbody tr:hover {
            background: var(--gray-50);
        }

        .modern-table tbody td {
            padding: 0.875rem 1rem;
            font-size: 0.875rem;
            color: var(--gray-700);
        }

        /* Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            gap: 0.2rem;
            padding: 0.25rem 0.625rem;
            border-radius: 9999px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .badge i {
            font-size: 0.6rem;
        }

        .badge-success {
            background: var(--success-light);
            color: var(--success);
        }

        .badge-danger {
            background: var(--danger-light);
            color: var(--danger);
        }

        .badge-info {
            background: var(--info-light);
            color: var(--info);
        }

        /* Action Buttons */
        .action-group {
            display: flex;
            gap: 0.375rem;
            justify-content: center;
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            border-radius: var(--radius);
            border: none;
            background: var(--gray-100);
            color: var(--gray-600);
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
        }

        .btn-icon:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

        .btn-icon.btn-view {
            background: var(--info-light);
            color: var(--info);
        }

        .btn-icon.btn-edit {
            background: var(--warning-light);
            color: var(--warning);
        }

        .btn-icon.btn-delete {
            background: var(--danger-light);
            color: var(--danger);
        }

        /* Alerts */
        .alert {
            padding: 0.75rem 1rem;
            border-radius: var(--radius);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 0.875rem;
            border: 1px solid transparent;
            animation: slideDown 0.3s ease;
        }

        @@keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-1rem);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .alert-success {
            background: var(--success-light);
            color: var(--success);
            border-color: var(--success);
        }

        .alert-danger {
            background: var(--danger-light);
            color: var(--danger);
            border-color: var(--danger);
        }

        .alert-close {
            margin-left: auto;
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            opacity: 0.7;
            transition: var(--transition);
        }

        .alert-close:hover {
            opacity: 1;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
        }

        .empty-state-icon {
            width: 64px;
            height: 64px;
            background: var(--gray-100);
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 1.75rem;
            color: var(--gray-400);
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-800);
            margin: 0 0 0.5rem 0;
        }

        .empty-state p {
            color: var(--gray-500);
            margin: 0;
            font-size: 0.875rem;
        }

        /* Pagination */
        .pagination-wrapper {
            padding: 1rem 1.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            border-top: 1px solid var(--gray-100);
            flex-wrap: wrap;
            gap: 1rem;
        }

        .pagination-info {
            color: var(--gray-500);
            font-size: 0.813rem;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .page-btn {
            min-width: 32px;
            height: 32px;
            padding: 0 0.625rem;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius);
            background: white;
            color: var(--gray-700);
            font-size: 0.813rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
        }

        .page-btn:hover:not(:disabled) {
            background: var(--gray-50);
            border-color: var(--gray-300);
        }

        .page-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Modal */
        .modal-overlay {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1000;
            animation: fadeIn 0.2s ease;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: var(--radius-xl);
            width: 90%;
            max-width: 500px;
            box-shadow: var(--shadow-xl);
            animation: slideUp 0.3s ease;
        }

        .modal-content-wide {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: var(--radius-xl);
            width: 95%;
            max-width: 1200px;
            max-height: 90vh;
            box-shadow: var(--shadow-xl);
            animation: slideUp 0.3s ease;
            overflow-y: auto;
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translate(-50%, -40%);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        /* Loading Spinner */
        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            gap: 1rem;
            color: var(--gray-600);
        }

        .loading-spinner i {
            font-size: 2rem;
            color: var(--primary);
        }

        .modal-header {
            padding: 1.25rem;
            border-bottom: 1px solid var(--gray-100);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-title {
            font-size: 1.125rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-close {
            width: 28px;
            height: 28px;
            border-radius: var(--radius);
            border: none;
            background: var(--gray-100);
            color: var(--gray-500);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
        }

        .modal-close:hover {
            background: var(--gray-200);
            color: var(--gray-700);
        }

        .modal-body {
            padding: 1.25rem;
        }

        .modal-footer {
            padding: 1.25rem;
            border-top: 1px solid var(--gray-100);
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        /* Modal Form Styles */
        .form-control-modal {
            width: 100%;
            padding: 0.625rem 1rem;
            border: 1.5px solid var(--gray-200);
            border-radius: var(--radius);
            font-size: 0.875rem;
            transition: var(--transition);
            background: white;
        }

        .form-control-modal:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .form-label {
            font-weight: 600;
            color: var(--gray-700);
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-text {
            font-size: 0.75rem;
            color: var(--gray-500);
            margin-top: 0.25rem;
        }

        .row {
            margin: 0 -0.5rem;
        }

        .row > * {
            padding: 0 0.5rem;
        }

        .g-3 > * {
            margin-bottom: 1rem;
        }

        /* Layout Preview Styles */
        .layout-preview-container {
            background: var(--gray-50);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius);
            padding: 1rem;
            text-align: center;
        }

        .screen-preview {
            background: linear-gradient(to bottom, #333, #555);
            color: white;
            padding: 8px 20px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: bold;
            display: inline-block;
            margin-bottom: 1rem;
        }

        .seat-preview-grid {
            display: grid;
            gap: 2px;
            justify-content: center;
            max-width: 300px;
            margin: 0 auto;
        }

        .seat-preview {
            width: 12px;
            height: 12px;
            background: var(--success);
            border-radius: 2px;
            font-size: 6px;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Responsive */
        @@media (max-width: 1024px) {
            .content-wrapper {
                padding: 1rem;
            }
        }

        @@media (max-width: 768px) {
            .content-wrapper {
                padding: 0.75rem;
            }

            .page-title {
                font-size: 1.25rem;
            }

            .page-title-icon {
                width: 32px;
                height: 32px;
                font-size: 1rem;
            }

            .controls-bar {
                flex-direction: column;
                padding: 1rem;
            }

            .search-box {
                width: 100%;
                min-width: auto;
                max-width: none;
            }

            .modern-table {
                font-size: 0.75rem;
            }

            .modern-table thead th,
            .modern-table tbody td {
                padding: 0.5rem 0.375rem;
            }

            .btn-icon {
                width: 28px;
                height: 28px;
                font-size: 0.75rem;
            }

            .pagination-wrapper {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }

            .th {
                width: 200px;
            }
        }
    </style>
</head>
<body>
    <!-- New Dashboard Layout -->
    <div class="new-dashboard-layout">
        <!-- Sidebar -->
        @await Html.PartialAsync("~/Views/Shared/_DashboardSidebar.cshtml")

        <!-- Main Content -->
        <main class="new-dashboard-main">
            <div class="content-wrapper">
                <!-- Page Header -->
                <header class="page-header">
                    <h1 class="page-title">
                        <span class="page-title-icon">
                            <i class="fas fa-building"></i>
                        </span>
                        Quản lý phòng chiếu
                    </h1>
                    <p class="page-subtitle">Quản lý thông tin các phòng chiếu trong hệ thống rạp</p>
                </header>

                <!-- Success/Error Messages -->
                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i>
                        <span>@TempData["Success"]</span>
                        <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }

                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle"></i>
                        <span>@TempData["Error"]</span>
                        <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }

                <!-- Main Card -->
                <div class="card">
                    <!-- Controls Bar -->
                    <div class="controls-bar">
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" 
                                   class="search-input" 
                                   placeholder="Tìm kiếm phòng chiếu..." 
                                   id="cinemaSearch"
                                   value="@ViewBag.Search">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="openCreateModal()">
                            <i class="fas fa-plus"></i>
                            Thêm phòng chiếu
                        </button>
                    </div>

                    <!-- Table -->
                    <div class="table-container">
                        <table class="modern-table">
                            <thead>
                                <tr>
                                    <th style="width: 50px">#</th>
                                    <th style="width: 100px">Tên phòng</th>
                                    <th style="width: 100px">Số ghế</th>
                                    <th style="width: 130px">Trạng thái</th>
                                    <th style="width: 110px">Ngày tạo</th>
                                    <th style="width: 120px; text-align: center">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var baseIndex = ((ViewBag.CurrentPage ?? 1) - 1) * (ViewBag.PageSize ?? 10);
                                    
                                    // Determine the actual data source to iterate
                                    JsonElement dataToIterate;
                                    
                                    if (Model.ValueKind == JsonValueKind.Array)
                                    {
                                        dataToIterate = Model;
                                    }
                                    else if (Model.ValueKind == JsonValueKind.Object)
                                    {
                                        // Try to extract data from object
                                        if (Model.TryGetProperty("data", out var dataArray))
                                        {
                                            dataToIterate = dataArray;
                                        }
                                        else if (Model.TryGetProperty("Data", out var DataArray))
                                        {
                                            dataToIterate = DataArray;
                                        }
                                        else if (Model.TryGetProperty("items", out var itemsArray))
                                        {
                                            dataToIterate = itemsArray;
                                        }
                                        else
                                        {
                                            // If object has room properties, treat as single room
                                            if (Model.TryGetProperty("roomName", out _))
                                            {
                                                // Single room - create temporary array
                                                var tempDoc = JsonDocument.Parse($"[{Model.GetRawText()}]");
                                                dataToIterate = tempDoc.RootElement;
                                            }
                                            else
                                            {
                                                // No valid structure found
                                                dataToIterate = JsonDocument.Parse("[]").RootElement;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // Fallback to empty array
                                        dataToIterate = JsonDocument.Parse("[]").RootElement;
                                    }
                                }
                                
                                @if (ViewBag.HasData)
                                {
                                    @if (dataToIterate.ValueKind == JsonValueKind.Array && dataToIterate.GetArrayLength() > 0)
                                    {
                                        @foreach (var item in dataToIterate.EnumerateArray().Select((room, i) => new { room, index = i + 1 + baseIndex }))
                                        {
                                            <tr>
                                                <td>@item.index</td>
                                                <td>
                                                    <strong>
                                                        @if (item.room.TryGetProperty("roomName", out var roomNameElement))
                                                        {
                                                            @roomNameElement.GetString()
                                                        }
                                                        else
                                                        {
                                                            <span style="color: var(--gray-400)">N/A</span>
                                                        }
                                                    </strong>
                                                </td>
                                                <td>
                                                    <span class="badge badge-info">
                                                                                                                    <i class="fas fa-chair" style="font-size: 0.6rem;"></i>
                                                        @if (item.room.TryGetProperty("totalSeats", out var totalSeatsElement))
                                                        {
                                                            @totalSeatsElement.GetInt32()
                                                        }
                                                        else
                                                        {
                                                            <span>0</span>
                                                        }
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (item.room.TryGetProperty("status", out var statusElement))
                                                    {
                                                        var status = statusElement.GetBoolean();
                                                        <span class="badge @(status ? "badge-success" : "badge-danger")">
                                                            <i class="fas fa-circle"></i>
                                                            @(status ? "Hoạt động" : "Ngừng hoạt động")
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge badge-success">
                                                            <i class="fas fa-circle" style="font-size: 0.5rem;"></i>
                                                            Hoạt động
                                                        </span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (item.room.TryGetProperty("createdDate", out var createdDateElement))
                                                    {
                                                        if (DateTime.TryParse(createdDateElement.GetString(), out var createdDate))
                                                        {
                                                            @createdDate.ToString("dd/MM/yyyy")
                                                        }
                                                        else
                                                        {
                                                            <span style="color: var(--gray-400)">N/A</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span style="color: var(--gray-400)">N/A</span>
                                                    }
                                                </td>
                                                <td>
                                                    <div class="action-group">
                                                        @if (item.room.TryGetProperty("id", out var idElement))
                                                        {
                                                            var roomId = idElement.GetGuid();
                                                            <button onclick="openDetailsModal('@roomId')" 
                                                                    class="btn-icon btn-view" 
                                                                    title="Xem chi tiết">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button onclick="openEditModal('@roomId')" 
                                                               class="btn-icon btn-edit" 
                                                               title="Chỉnh sửa">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button onclick="confirmDelete('@roomId', '@(item.room.TryGetProperty("roomName", out var nameEl) ? nameEl.GetString() : "phòng này")')" 
                                                                    class="btn-icon btn-delete" 
                                                                    title="Xóa">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6">
                                                <div class="empty-state">
                                                    <div class="empty-state-icon">
                                                        <i class="fas fa-exclamation-triangle"></i>
                                                    </div>
                                                    <h3>Dữ liệu không hợp lệ</h3>
                                                    <p>Không thể hiển thị dữ liệu phòng chiếu</p>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6">
                                            <div class="empty-state">
                                                <div class="empty-state-icon">
                                                    <i class="fas fa-building"></i>
                                                </div>
                                                <h3>Chưa có phòng chiếu</h3>
                                                <p>Bấm nút "Thêm phòng chiếu" để tạo phòng chiếu mới</p>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
<!-- Pagination -->
                    @{
                        var totalPages = ViewBag.Total != null && ViewBag.PageSize != null ? (int)Math.Ceiling((double)(int)ViewBag.Total / (int)ViewBag.PageSize) : 0;
                        var currentPage = ViewBag.CurrentPage ?? 1;
                        var currentPageSize = ViewBag.PageSize ?? 10;
                    }
                    @if (ViewBag.Total != null && ViewBag.PageSize != null && (int)ViewBag.Total > (int)ViewBag.PageSize)
                    {
                        <div class="pagination-wrapper">
                            <div class="pagination-info">
                                Hiển thị @((currentPage - 1) * currentPageSize + 1) - @Math.Min(currentPage * currentPageSize, (int)ViewBag.Total) 
                                trong tổng số @ViewBag.Total phòng chiếu
                            </div>
                            <div class="pagination-controls">
                                <a href="@Url.Action("Index", new { page = currentPage - 1, pageSize = currentPageSize, search = ViewBag.Search })" 
                                   class="page-btn @(currentPage <= 1 ? "disabled" : "")"
                                   @(currentPage <= 1 ? "onclick=\"return false;\"" : "")>
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                                
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <a href="@Url.Action("Index", new { page = i, pageSize = currentPageSize, search = ViewBag.Search })" 
                                       class="page-btn @(i == currentPage ? "active" : "")">
                                        @i
                                    </a>
                                }
                                
                                <a href="@Url.Action("Index", new { page = currentPage + 1, pageSize = currentPageSize, search = ViewBag.Search })" 
                                   class="page-btn @(currentPage >= totalPages ? "disabled" : "")"
                                   @(currentPage >= totalPages ? "onclick=\"return false;\"" : "")>
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                                
                                <form method="get" onchange="this.submit()" style="display: inline-block; margin-left: 1rem;">
                                    <input type="hidden" name="search" value="@ViewBag.Search" />
                                    <select name="pageSize" class="page-btn" style="width: auto; padding: 0 1rem;">
                                        <option value="5" selected="@(currentPageSize == 5 ? "selected" : null)">5/trang</option>
                                        <option value="10" selected="@(currentPageSize == 10 ? "selected" : null)">10/trang</option>
                                        <option value="20" selected="@(currentPageSize == 20 ? "selected" : null)">20/trang</option>
                                    </select>
                                </form>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </main>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="fas fa-exclamation-triangle" style="color: var(--danger);"></i>
                    Xác nhận xóa
                </h3>
                <button class="modal-close" onclick="closeDeleteModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <p style="margin-bottom: 1rem;">
                    Bạn có chắc chắn muốn xóa phòng chiếu <strong id="roomNameToDelete" style="color: var(--primary);"></strong>?
                </p>
                <div style="background: var(--danger-light); padding: 1rem; border-radius: var(--radius); display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-info-circle" style="color: var(--danger);"></i>
                    <span style="color: var(--danger); font-size: 0.875rem;">
                        Hành động này không thể hoàn tác. Tất cả dữ liệu liên quan sẽ bị xóa vĩnh viễn.
                    </span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="closeDeleteModal()" class="btn btn-secondary">
                    Hủy bỏ
                </button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-primary" style="background: var(--danger); box-shadow: none;">
                        <i class="fas fa-trash"></i>
                        Xóa phòng chiếu
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Create Cinema Room Modal -->
    <div id="createModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="fas fa-plus-circle" style="color: var(--primary);"></i>
                    Thêm phòng chiếu mới
                </h3>
                <button class="modal-close" onclick="closeCreateModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="createRoomForm" onsubmit="submitCreateForm(event)">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="roomName" class="form-label">
                                <i class="fas fa-tag me-1"></i>Tên phòng chiếu <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="text" id="roomName" name="RoomName" class="form-control-modal" 
                                   placeholder="Nhập tên phòng chiếu (VD: Phòng A01)" required maxlength="50">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Tên phòng chiếu phải có độ dài từ 1-50 ký tự
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label for="numberOfRows" class="form-label">
                                <i class="fas fa-arrows-alt-v me-1"></i>Số hàng <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="number" id="numberOfRows" name="NumberOfRows" class="form-control-modal" 
                                   placeholder="10" min="1" max="50" required oninput="calculateTotalSeats()">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Từ 1 đến 50 hàng
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label for="numberOfColumns" class="form-label">
                                <i class="fas fa-arrows-alt-h me-1"></i>Số cột <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="number" id="numberOfColumns" name="NumberOfColumns" class="form-control-modal" 
                                   placeholder="12" min="1" max="50" required oninput="calculateTotalSeats()">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Từ 1 đến 50 cột
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label for="totalSeats" class="form-label">
                                <i class="fas fa-chair me-1"></i>Tổng số ghế
                            </label>
                            <input type="number" id="totalSeats" name="TotalSeats" class="form-control-modal" 
                                   placeholder="120" readonly style="background: var(--gray-100);">
                            <div class="form-text">
                                <i class="fas fa-calculator me-1"></i>
                                Tự động tính từ số hàng × số cột
                            </div>
                        </div>
                    </div>

                    <!-- Preview Layout -->
                    <div id="layoutPreview" class="mt-4" style="display: none;">
                        <hr>
                        <h6><i class="fas fa-eye me-2"></i>Xem trước layout ghế</h6>
                        <div class="layout-preview-container">
                            <div class="screen-preview">
                                <i class="fas fa-desktop me-2"></i>MÀN HÌNH CHIẾU
                            </div>
                            <div id="seatPreviewGrid" class="seat-preview-grid"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="closeCreateModal()" class="btn btn-secondary">
                        <i class="fas fa-times me-2"></i>Hủy
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-save me-2"></i>Tạo phòng chiếu
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Details Modal -->
    <div id="detailsModal" class="modal-overlay">
        <div class="modal-content-wide">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="fas fa-info-circle"></i>
                    Chi tiết phòng chiếu
                </h3>
                <button class="modal-close" onclick="closeDetailsModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="detailsModalBody">
                <div class="loading-spinner" id="detailsLoading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Đang tải thông tin...</span>
                </div>
                <div id="detailsContent" style="display: none;">
                    <!-- Content will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal-overlay">
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="fas fa-edit" style="color: var(--warning);"></i>
                    Chỉnh sửa phòng chiếu
                </h3>
                <button class="modal-close" onclick="closeEditModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="editModalBody">
                <div class="loading-spinner" id="editLoading">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Đang tải thông tin...</span>
                </div>
                <div id="editContent" style="display: none;">
                    <!-- Content will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    <script>
        // Search functionality
        let searchTimeout;
        const searchInput = document.getElementById('cinemaSearch');
        
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchTerm = this.value.trim();
                const baseUrl = '@Url.Action("Index")';
                window.location.href = baseUrl + '?search=' + encodeURIComponent(searchTerm);
            }, 500);
        });

        // Delete confirmation
        function confirmDelete(roomId, roomName) {
            document.getElementById('roomNameToDelete').textContent = roomName;
            const deleteUrl = '@Url.Action("Delete")';
            document.getElementById('deleteForm').action = deleteUrl + '/' + roomId;
            document.getElementById('deleteModal').style.display = 'block';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        // Close modal when clicking outside
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });

        // Auto hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                alert.style.animation = 'slideDown 0.3s ease reverse';
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);

        // Prevent form submission on Enter in search
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.blur();
            }
        });

        // Create Modal Functions
        function openCreateModal() {
            document.getElementById('createModal').style.display = 'block';
            setTimeout(() => document.getElementById('roomName').focus(), 100);
        }

        function closeCreateModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('createRoomForm').reset();
            document.getElementById('layoutPreview').style.display = 'none';
        }

        function calculateTotalSeats() {
            const rows = parseInt(document.getElementById('numberOfRows').value) || 0;
            const cols = parseInt(document.getElementById('numberOfColumns').value) || 0;
            const total = rows * cols;
            
            document.getElementById('totalSeats').value = total;
            
            if (rows > 0 && cols > 0) {
                showLayoutPreview(rows, cols);
            } else {
                document.getElementById('layoutPreview').style.display = 'none';
            }
        }

        function showLayoutPreview(rows, cols) {
            const preview = document.getElementById('layoutPreview');
            const grid = document.getElementById('seatPreviewGrid');
            
            grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
            grid.innerHTML = '';
            
            for (let r = 1; r <= rows; r++) {
                for (let c = 1; c <= cols; c++) {
                    const seat = document.createElement('div');
                    seat.className = 'seat-preview';
                    grid.appendChild(seat);
                }
            }
            
            preview.style.display = 'block';
        }

        async function submitCreateForm(event) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.innerHTML;
            
            // Disable button and show loading
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang tạo...';
            
            try {
                const formData = new FormData();
                formData.append('RoomName', event.target.RoomName.value);
                formData.append('TotalSeats', event.target.TotalSeats.value);
                formData.append('NumberOfRows', event.target.NumberOfRows.value);
                formData.append('NumberOfColumns', event.target.NumberOfColumns.value);

                const response = await fetch('@Url.Action("Create")', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        closeCreateModal();
                        
                        // Show success message
                        const successAlert = document.createElement('div');
                        successAlert.className = 'alert alert-success';
                        successAlert.innerHTML = `
                            <i class="fas fa-check-circle me-2"></i>
                            <span>Thêm phòng chiếu thành công!</span>
                            <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                                <i class="fas fa-times"></i>
                            </button>
                        `;
                        document.querySelector('.page-header').after(successAlert);
                        
                        // Reload page to show new room
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        // Show detailed validation errors
                        let errorMessage = result.message || 'Có lỗi xảy ra';
                        if (result.errors) {
                            const errorDetails = Object.entries(result.errors)
                                .map(([key, messages]) => `${key}: ${Array.isArray(messages) ? messages.join(', ') : messages}`)
                                .join('<br>');
                            errorMessage += '<br><small>' + errorDetails + '</small>';
                        }
                        throw new Error(errorMessage);
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error(`Server error: ${response.status} - ${response.statusText}`);
                }
            } catch (error) {
                console.error('Error creating room:', error);
                
                // Show error message
                const errorAlert = document.createElement('div');
                errorAlert.className = 'alert alert-danger';
                errorAlert.innerHTML = `
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <div>${error.message || 'Có lỗi xảy ra khi tạo phòng chiếu'}</div>
                    <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                document.querySelector('.modal-body').prepend(errorAlert);
                
                // Auto remove error after 5 seconds
                setTimeout(() => errorAlert.remove(), 5000);
            } finally {
                // Re-enable button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        // Close modal when clicking outside
        document.getElementById('createModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCreateModal();
            }
        });

        // Details Modal Functions
        async function openDetailsModal(roomId) {
            console.log(`Opening details modal for room ID: ${roomId}`); // Debug log
            const modal = document.getElementById('detailsModal');
            const loading = document.getElementById('detailsLoading');
            const content = document.getElementById('detailsContent');
            
            // Show modal with loading
            modal.style.display = 'block';
            loading.style.display = 'flex';
            content.style.display = 'none';
            
            try {
                // Construct the URL properly with area name and query parameter
                const detailsUrl = '@Url.Action("Details", "CinemaRoom", new { area = "CinemaManagement" })';
                const fullUrl = `${detailsUrl}?id=${roomId}`;
                console.log('Fetching from URL:', fullUrl); // Debug log
                
                const response = await fetch(fullUrl, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json'
                    }
                });
                
                console.log('Response status:', response.status); // Debug log
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('API Response:', data); // Debug log
                
                // Try to handle different response formats
                console.log('Checking response format...');
                
                // Check if backend format { Code, Message, Data }
                if (data.Code !== undefined) {
                    console.log('Backend format detected (Code, Message, Data)');
                    if (data.Code === 200 && data.Data) {
                        console.log('Room data:', data.Data); // Debug log
                        renderDetailsContent(data.Data);
                    } else {
                        console.error('Error in backend response:', data.Message);
                        throw new Error(data.Message || 'Không thể tải thông tin phòng chiếu');
                    }
                } 
                // Check if API format { code, message, data }
                else if (data.code !== undefined) {
                    console.log('API format detected (code, message, data)');
                    if (data.code === 200 && data.data) {
                        console.log('Room data:', data.data); // Debug log
                        renderDetailsContent(data.data);
                    } else {
                        console.error('Error in API response:', data.message);
                        throw new Error(data.message || 'Không thể tải thông tin phòng chiếu');
                    }
                }
                // Check if raw data format
                else {
                    console.log('Raw data format detected');
                    console.log('Room data:', data); // Debug log
                    renderDetailsContent(data);
                }
            } catch (error) {
                console.error('Error loading room details:', error);
                content.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Lỗi:</strong> ${error.message}
                    </div>
                `;
            } finally {
                loading.style.display = 'none';
                content.style.display = 'block';
            }
        }

        function renderDetailsContent(roomData) {
            const content = document.getElementById('detailsContent');
            console.log('Rendering room data:', roomData); // Debug log
            
            // Check if data is nested in a property
            if (roomData.data) roomData = roomData.data;
            if (roomData.Data) roomData = roomData.Data;
            
            // Handle both PascalCase (C#) and camelCase naming
            let seats = [];
            if (Array.isArray(roomData)) {
                // If roomData is an array, it might be the seats array directly
                seats = roomData;
                console.log('Data is an array, assuming it contains seats');
            } else {
                seats = roomData.seats || roomData.Seats || [];
            }
            console.log('Seats data:', seats); // Debug log
            
            // Parse room info - try both naming conventions
            const roomName = roomData.roomName || roomData.RoomName || 'N/A';
            const roomId = roomData.roomId || roomData.RoomId || '';
            const totalSeats = roomData.totalSeats || roomData.TotalSeats || seats.length || 0;
            
            // Check if seats array is valid
            if (!seats || !Array.isArray(seats) || seats.length === 0) {
                content.innerHTML = `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Thông báo:</strong> Phòng chiếu này chưa có ghế hoặc dữ liệu ghế không hợp lệ.
                    </div>
                    <div style="background: white; border: 1px solid #e5e7eb; border-radius: 12px; margin-bottom: 1.5rem; overflow: hidden;">
                        <div style="padding: 1rem 1.5rem; border-bottom: 1px solid #f3f4f6; background: #f9fafb;">
                            <h4 style="margin: 0; display: flex; align-items: center; gap: 0.5rem; color: #1f2937;">
                                <i class="fas fa-info-circle"></i>
                                Thông tin phòng chiếu
                            </h4>
                        </div>
                        <div style="padding: 1.5rem;">
                            <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">Tên phòng</div>
                                <div style="font-size: 1.125rem; font-weight: 600; color: #1f2937;">${roomName}</div>
                            </div>
                        </div>
                    </div>
                `;
                return;
            }
            
            // Calculate seat stats - handle both naming conventions
            const normalSeats = seats.filter(s => (s.seatType || s.SeatType) === 0).length;
            const vipSeats = seats.filter(s => (s.seatType || s.SeatType) === 1).length;
            const coupleSeats = seats.filter(s => (s.seatType || s.SeatType) === 2).length;
            
            // Group seats by row
            const seatsByRow = seats.reduce((acc, seat) => {
                const row = seat.rowIndex || seat.RowIndex;
                if (!acc[row]) acc[row] = [];
                acc[row].push(seat);
                return acc;
            }, {});
            
            // Sort rows and seats
            const sortedRows = Object.keys(seatsByRow).sort((a, b) => parseInt(a) - parseInt(b));
            
            // Generate seat layout HTML
            let seatLayoutHtml = '';
            sortedRows.forEach(rowNum => {
                const rowSeats = seatsByRow[rowNum].sort((a, b) => (a.columnIndex || a.ColumnIndex) - (b.columnIndex || b.ColumnIndex));
                const rowLetter = String.fromCharCode(65 + parseInt(rowNum) - 1); // A, B, C...
                
                seatLayoutHtml += `
                    <div class="seat-row" style="display: flex; align-items: center; gap: 0.5rem; justify-content: center; margin-bottom: 0.25rem;">
                        <div class="row-label" style="width: 30px; text-align: center; font-weight: 600; color: var(--gray-600);">${rowLetter}</div>
                        ${rowSeats.map(seat => {
                            const seatType = seat.seatType || seat.SeatType;
                            const seatCode = seat.seatCode || seat.SeatCode;
                            const seatClass = seatType === 1 ? 'vip' : seatType === 2 ? 'couple' : 'normal';
                            const seatTypeName = seatType === 1 ? 'VIP' : seatType === 2 ? 'Ghế đôi' : 'Thường';
                            return `
                                <div class="seat ${seatClass}" 
                                     style="width: 28px; height: 28px; border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 0.7rem; font-weight: 500; cursor: pointer; transition: all 0.2s ease;"
                                     title="${seatCode} - ${seatTypeName}">
                                    ${seatCode ? seatCode.substring(1) : ''}
                                </div>
                            `;
                        }).join('')}
                    </div>
                `;
            });
            
            content.innerHTML = `
                <style>
                    .seat.normal { background: #10b981; color: white; }
                    .seat.vip { background: #f59e0b; color: white; }
                    .seat.couple { background: #ef4444; color: white; }
                    .seat:hover { transform: scale(1.1); box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1); }
                    .alert { padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid; }
                    .alert-danger { background: #fee2e2; color: #dc2626; border-color: #dc2626; }
                    .badge { display: inline-flex; align-items: center; gap: 0.25rem; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem; font-weight: 500; }
                    .badge-success { background: #d1fae5; color: #10b981; }
                </style>
                
                <!-- Room Information -->
                <div style="background: white; border: 1px solid #e5e7eb; border-radius: 12px; margin-bottom: 1.5rem; overflow: hidden;">
                    <div style="padding: 1rem 1.5rem; border-bottom: 1px solid #f3f4f6; background: #f9fafb;">
                        <h4 style="margin: 0; display: flex; align-items: center; gap: 0.5rem; color: #1f2937;">
                            <i class="fas fa-info-circle"></i>
                            Thông tin phòng chiếu
                        </h4>
                    </div>
                    <div style="padding: 1.5rem;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 1.5rem;">
                            <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">Tên phòng</div>
                                <div style="font-size: 1.125rem; font-weight: 600; color: #1f2937;">${roomName}</div>
                            </div>
                            <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">Mã phòng</div>
                                <div style="font-size: 1.125rem; font-weight: 600; color: #1f2937;">${roomId.substring(0, 8).toUpperCase()}</div>
                            </div>
                            <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">Tổng số ghế</div>
                                <div style="font-size: 1.125rem; font-weight: 600; color: #1f2937;">${totalSeats} ghế</div>
                            </div>
                            <div style="background: #f9fafb; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">Trạng thái</div>
                                <div style="font-size: 1.125rem; font-weight: 600; color: #1f2937;">
                                    <span class="badge badge-success">
                                        <i class="fas fa-circle"></i>
                                        Hoạt động
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Seat Stats -->
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem;">
                            <div style="text-align: center; padding: 1rem; background: #f9fafb; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 1.5rem; font-weight: 700; color: #6366f1;">${normalSeats}</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Ghế thường</div>
                            </div>
                            <div style="text-align: center; padding: 1rem; background: #f9fafb; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 1.5rem; font-weight: 700; color: #6366f1;">${vipSeats}</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Ghế VIP</div>
                            </div>
                            <div style="text-align: center; padding: 1rem; background: #f9fafb; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 1.5rem; font-weight: 700; color: #6366f1;">${coupleSeats}</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Ghế đôi</div>
                            </div>
                            <div style="text-align: center; padding: 1rem; background: #f9fafb; border-radius: 8px; border: 1px solid #e5e7eb;">
                                <div style="font-size: 1.5rem; font-weight: 700; color: #6366f1;">${seats.length}</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Tổng cộng</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Seat Layout -->
                <div style="background: white; border: 1px solid #e5e7eb; border-radius: 12px; overflow: hidden;">
                    <div style="padding: 1rem 1.5rem; border-bottom: 1px solid #f3f4f6; background: #f9fafb;">
                        <h4 style="margin: 0; display: flex; align-items: center; gap: 0.5rem; color: #1f2937;">
                            <i class="fas fa-chair"></i>
                            Sơ đồ ghế ngồi
                        </h4>
                    </div>
                    <div style="padding: 2rem;">
                        <!-- Screen -->
                        <div style="background: linear-gradient(135deg, #1f2937, #4b5563); color: white; text-align: center; padding: 0.75rem; border-radius: 8px; margin-bottom: 2rem; font-weight: 600; position: relative;">
                            <i class="fas fa-tv" style="margin-right: 0.5rem;"></i>
                            MÀN HÌNH
                        </div>
                        
                        <!-- Seats Grid -->
                        <div style="max-width: 800px; margin: 0 auto;">
                            ${seatLayoutHtml}
                        </div>
                        
                        <!-- Legend -->
                        <div style="display: flex; justify-content: center; gap: 2rem; margin-top: 2rem; flex-wrap: wrap;">
                            <div style="display: flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; color: #6b7280;">
                                <div style="width: 20px; height: 20px; border-radius: 4px; background: #10b981;"></div>
                                <span>Ghế thường</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; color: #6b7280;">
                                <div style="width: 20px; height: 20px; border-radius: 4px; background: #f59e0b;"></div>
                                <span>Ghế VIP</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem; font-size: 0.875rem; color: #6b7280;">
                                <div style="width: 20px; height: 20px; border-radius: 4px; background: #ef4444;"></div>
                                <span>Ghế đôi</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function closeDetailsModal() {
            document.getElementById('detailsModal').style.display = 'none';
        }

        // Close details modal when clicking outside
        document.getElementById('detailsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDetailsModal();
            }
        });

        // Edit Modal Functions
        async function openEditModal(roomId) {
            console.log(`Opening edit modal for room ID: ${roomId}`); // Debug log
            const modal = document.getElementById('editModal');
            const loading = document.getElementById('editLoading');
            const content = document.getElementById('editContent');
            
            // Show modal with loading
            modal.style.display = 'block';
            loading.style.display = 'flex';
            content.style.display = 'none';
            
            try {
                // Fetch room details first
                const detailsUrl = '@Url.Action("Details", "CinemaRoom", new { area = "CinemaManagement" })';
                const fullDetailsUrl = `${detailsUrl}?id=${roomId}`;
                console.log('Fetching details from URL:', fullDetailsUrl); // Debug log
                
                const detailsResponse = await fetch(fullDetailsUrl, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json'
                    }
                });
                
                if (!detailsResponse.ok) {
                    throw new Error(`HTTP ${detailsResponse.status}: ${detailsResponse.statusText}`);
                }
                
                const detailsData = await detailsResponse.json();
                console.log('Room details:', detailsData); // Debug log
                
                // Get room data from different possible response formats
                let roomData;
                if (detailsData.Code !== undefined && detailsData.Data) {
                    roomData = detailsData.Data;
                } else if (detailsData.code !== undefined && detailsData.data) {
                    roomData = detailsData.data;
                } else {
                    roomData = detailsData;
                }
                
                // Tính toán số hàng và số cột từ danh sách ghế nếu cần
                calculateRoomDimensions(roomData);
                
                // Render edit form
                renderEditForm(roomId, roomData);
            } catch (error) {
                console.error('Error loading room for edit:', error);
                content.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Lỗi:</strong> ${error.message}
                    </div>
                `;
            } finally {
                loading.style.display = 'none';
                content.style.display = 'block';
            }
        }

        // Hàm tính toán số hàng và số cột từ danh sách ghế
        function calculateRoomDimensions(roomData) {
            // Kiểm tra xem đã có thông tin về số hàng và số cột chưa
            if ((roomData.numberOfRows || roomData.NumberOfRows) && 
                (roomData.numberOfColumns || roomData.NumberOfColumns)) {
                return; // Đã có thông tin, không cần tính toán
            }
            
            // Lấy danh sách ghế
            let seats = [];
            if (roomData.seats) seats = roomData.seats;
            else if (roomData.Seats) seats = roomData.Seats;
            
            if (!seats || !Array.isArray(seats) || seats.length === 0) {
                console.warn('No seats data available to calculate dimensions');
                return;
            }
            
            // Tìm số hàng và số cột lớn nhất
            let maxRow = 0;
            let maxCol = 0;
            
            seats.forEach(seat => {
                const row = seat.rowIndex || seat.RowIndex || 0;
                const col = seat.columnIndex || seat.ColumnIndex || 0;
                
                maxRow = Math.max(maxRow, row);
                maxCol = Math.max(maxCol, col);
            });
            
            // Cập nhật dữ liệu phòng
            roomData.numberOfRows = maxRow;
            roomData.numberOfColumns = maxCol;
            
            console.log(`Calculated room dimensions: ${maxRow} rows x ${maxCol} columns`);
        }

        function renderEditForm(roomId, roomData) {
            const content = document.getElementById('editContent');
            
            // Check if data is nested in a property
            if (roomData.data) roomData = roomData.data;
            if (roomData.Data) roomData = roomData.Data;
            
            // Parse room info - try both naming conventions
            const roomName = roomData.roomName || roomData.RoomName || '';
            const totalSeats = roomData.totalSeats || roomData.TotalSeats || 0;
            
            // Lấy số hàng và số cột từ dữ liệu
            const numberOfRows = roomData.numberOfRows || roomData.NumberOfRows || 0;
            const numberOfColumns = roomData.numberOfColumns || roomData.NumberOfColumns || 0;
            
            content.innerHTML = `
                <form id="editRoomForm" onsubmit="submitEditForm(event, '${roomId}')">
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="editRoomName" class="form-label">
                                <i class="fas fa-tag me-1"></i>Tên phòng chiếu <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="text" id="editRoomName" name="RoomName" class="form-control-modal" 
                                   value="${roomName}" required maxlength="50">
                        </div>

                        <div class="col-md-4">
                            <label for="editNumberOfRows" class="form-label">
                                <i class="fas fa-arrows-alt-v me-1"></i>Số hàng <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="number" id="editNumberOfRows" name="NumberOfRows" class="form-control-modal" 
                                   value="${numberOfRows}" min="1" max="50" required oninput="calculateEditTotalSeats()">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Số hàng từ 1-50
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label for="editNumberOfColumns" class="form-label">
                                <i class="fas fa-arrows-alt-h me-1"></i>Số cột <span style="color: var(--danger);">*</span>
                            </label>
                            <input type="number" id="editNumberOfColumns" name="NumberOfColumns" class="form-control-modal" 
                                   value="${numberOfColumns}" min="1" max="50" required oninput="calculateEditTotalSeats()">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Số cột từ 1-50
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label for="editTotalSeats" class="form-label">
                                <i class="fas fa-chair me-1"></i>Tổng số ghế
                            </label>
                            <input type="number" id="editTotalSeats" name="TotalSeats" class="form-control-modal" 
                                   value="${totalSeats}" readonly style="background: var(--gray-100);">
                        </div>
                    </div>

                    <hr class="my-4">

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" onclick="closeEditModal()" class="btn btn-secondary">
                            <i class="fas fa-times me-2"></i>Hủy
                        </button>
                        <button type="submit" class="btn btn-warning" id="editSubmitBtn">
                            <i class="fas fa-save me-2"></i>Cập nhật phòng chiếu
                        </button>
                    </div>
                </form>
            `;
        }

        function calculateEditTotalSeats() {
            const rows = document.getElementById('editNumberOfRows').value;
            const cols = document.getElementById('editNumberOfColumns').value;
            
            if (rows && cols) {
                document.getElementById('editTotalSeats').value = rows * cols;
            }
        }

        async function submitEditForm(event, roomId) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('editSubmitBtn');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang cập nhật...';
            
            const form = document.getElementById('editRoomForm');
            const formData = new FormData(form);
            const data = {};
            
            // Lấy các giá trị từ form
            const roomName = formData.get('RoomName');
            const numberOfRows = parseInt(formData.get('NumberOfRows'));
            const numberOfColumns = parseInt(formData.get('NumberOfColumns'));
            const totalSeats = numberOfRows * numberOfColumns;
            
            // Kiểm tra dữ liệu
            if (!roomName || !numberOfRows || !numberOfColumns) {
                const errorAlert = document.createElement('div');
                errorAlert.className = 'alert alert-danger';
                errorAlert.innerHTML = `
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <div>Vui lòng điền đầy đủ thông tin bắt buộc</div>
                    <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                document.getElementById('editContent').prepend(errorAlert);
                
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
                return;
            }
            
            // Tạo dữ liệu để gửi đi
            data.RoomName = roomName;
            data.NumberOfRows = numberOfRows;
            data.NumberOfColumns = numberOfColumns;
            data.TotalSeats = totalSeats;
            
            try {
                const updateUrl = '@Url.Action("Edit", "CinemaRoom", new { area = "CinemaManagement" })';
                const fullUpdateUrl = `${updateUrl}?id=${roomId}`;
                console.log('Updating room at URL:', fullUpdateUrl, 'with data:', data); // Debug log
                
                const response = await fetch(fullUpdateUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error(`Server error: ${response.status} - ${response.statusText}`);
                }
                
                const result = await response.json();
                if (result.success) {
                    // Success - reload page to show updated data
                    window.location.reload();
                } else {
                    throw new Error(result.message || 'Có lỗi xảy ra khi cập nhật phòng chiếu');
                }
            } catch (error) {
                console.error('Error updating room:', error);
                
                // Show error message
                const errorAlert = document.createElement('div');
                errorAlert.className = 'alert alert-danger';
                errorAlert.innerHTML = `
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <div>${error.message || 'Có lỗi xảy ra khi cập nhật phòng chiếu'}</div>
                    <button type="button" class="alert-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                document.getElementById('editContent').prepend(errorAlert);
                
                // Auto remove error after 5 seconds
                setTimeout(() => errorAlert.remove(), 5000);
            } finally {
                // Re-enable button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }
    </script>
</body>
</html