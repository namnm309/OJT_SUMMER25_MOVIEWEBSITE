@model UI.Areas.ShowtimeManagement.Models.ShowtimePageViewModel
@{
    ViewData["Title"] = "Quản lý lịch chiếu - Cinema City";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- New Dashboard CSS -->
    <link rel="stylesheet" href="~/css/new-dashboard.css" />
    
    <style>
        /* Showtime Management Specific Styles */
        .showtime-management-content {
            padding: 2rem;
        }
        
        /* Page Header */
        .showtime-page-header {
            margin-bottom: 2rem;
        }
        
        .showtime-page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-dark);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .showtime-page-subtitle {
            color: var(--text-muted);
            margin-top: 0.5rem;
            font-size: 1rem;
        }
        
        /* Controls Section */
        .showtime-controls {
            background: var(--content-bg);
            border: 1px solid var(--content-border);
            border-radius: 16px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-sm);
        }

        .showtime-controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .showtime-search-box {
            position: relative;
            flex: 1;
            min-width: 300px;
        }

        .showtime-search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            z-index: 2;
        }
        
        .showtime-search-input {
            width: 100%;
            padding: 12px 16px 12px 45px;
            border: 1px solid var(--content-border);
            border-radius: 8px;
            background: var(--content-secondary);
            color: var(--text-dark);
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .showtime-search-input:focus {
            border-color: var(--primary-purple);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: var(--content-bg);
            outline: none;
        }

        .showtime-search-input::placeholder {
            color: var(--text-muted);
        }
        
        .btn-add-showtime {
            background: linear-gradient(135deg, var(--primary-purple), var(--primary-purple-dark));
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-add-showtime:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
            color: white;
        }

        .btn-filter, .btn-export {
            background: var(--content-bg);
            border: 1px solid var(--content-border);
            color: var(--text-dark);
            padding: 12px 20px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.3s ease;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-filter:hover, .btn-export:hover {
            background: var(--content-secondary);
            border-color: var(--primary-purple);
            color: var(--primary-purple);
        }
        
        /* Showtime Table Container */
        .showtime-table-container {
            background: var(--content-bg);
            border: 1px solid var(--content-border);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: var(--shadow-sm);
            position: relative;
        }

        .showtime-table-container.loading {
            opacity: 0.7;
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
        
        .loading-spinner-small {
            color: var(--primary-purple);
            font-size: 1.5rem;
        }

        /* Showtime Table */
        .showtime-table {
            width: 100%;
            border-collapse: collapse;
            color: var(--text-dark);
        }

        .showtime-table thead {
            background: var(--content-secondary);
        }
        
        .showtime-table thead th {
            padding: 16px 12px;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-muted);
            border-bottom: 1px solid var(--content-border);
            text-align: left;
        }
        
        .showtime-table tbody tr {
            border-bottom: 1px solid rgba(226, 232, 240, 0.5);
            transition: background-color 0.2s ease;
        }

        .showtime-table tbody tr:hover {
            background: var(--content-secondary);
        }
        
        .showtime-table tbody td {
            padding: 16px 12px;
            vertical-align: middle;
            font-size: 14px;
        }

        /* Movie Info in Table */
        .movie-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .movie-poster {
            width: 40px;
            height: 56px;
            object-fit: cover;
            border-radius: 6px;
            box-shadow: var(--shadow-sm);
        }

        .movie-details h6 {
            margin: 0;
            font-weight: 600;
            color: var(--text-dark);
            font-size: 14px;
        }

        .movie-details small {
            color: var(--text-muted);
            font-size: 12px;
        }

        /* Status Badges */
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge::before {
            content: '';
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: currentColor;
        }

        .status-badge.available {
            color: #059669;
            background: rgba(5, 150, 105, 0.1);
        }

        .status-badge.nearly-full {
            color: #d97706;
            background: rgba(217, 119, 6, 0.1);
        }

        .status-badge.sold-out {
            color: #dc2626;
            background: rgba(220, 38, 38, 0.1);
        }

        .status-badge.active {
            color: #059669;
            background: rgba(5, 150, 105, 0.1);
        }

        .status-badge.inactive {
            color: #dc2626;
            background: rgba(220, 38, 38, 0.1);
        }

        .status-badge.pending {
            color: #d97706;
            background: rgba(217, 119, 6, 0.1);
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border-radius: 6px;
            border: 1px solid var(--content-border);
            background: var(--content-bg);
            color: var(--text-muted);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            cursor: pointer;
            font-size: 12px;
        }

        .action-btn:hover {
            background: var(--primary-purple);
            border-color: var(--primary-purple);
            color: white;
            transform: translateY(-1px);
        }

        .action-btn.edit:hover {
            background: #f59e0b;
            border-color: #f59e0b;
        }

        .action-btn.delete:hover {
            background: #ef4444;
            border-color: #ef4444;
        }

        /* Loading Styles */
        .loading-spinner {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            text-align: center;
        }
        
        .loading-spinner i {
            color: var(--primary-purple);
            margin-bottom: 1rem;
        }
        
        .loading-spinner p {
            color: var(--text-muted);
        }
        
        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Bulk Actions */
        .bulk-actions {
            display: flex;
            gap: 8px;
            margin-right: 16px;
        }

        .bulk-action-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            border: 1px solid var(--content-border);
            background: var(--content-bg);
            color: var(--text-dark);
            transition: all 0.2s ease;
        }

        .bulk-action-btn:hover:not(:disabled) {
            background: var(--primary-purple);
            border-color: var(--primary-purple);
            color: white;
        }

        .bulk-action-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .bulk-action-btn.danger:hover:not(:disabled) {
            background: #ef4444;
            border-color: #ef4444;
        }

        /* Modal Styles */
        .modal-content {
            border: none;
            border-radius: 16px;
            box-shadow: var(--shadow-xl);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-purple), var(--primary-purple-dark));
            color: white;
            border-radius: 16px 16px 0 0;
            border-bottom: none;
        }

        .modal-header .btn-close {
            filter: invert(1);
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-footer {
            border-top: 1px solid var(--content-border);
            padding: 1rem 2rem;
        }

        /* Calendar View Styles */
        .view-toggle {
            display: flex;
            background: var(--content-secondary);
            border-radius: 8px;
            padding: 4px;
            margin-left: auto;
        }

        .view-toggle-btn {
            padding: 8px 16px;
            border: none;
            background: transparent;
            color: var(--text-muted);
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .view-toggle-btn.active {
            background: var(--primary-purple);
            color: white;
        }

        .calendar-view {
            display: none;
        }

        .calendar-view.active {
            display: block;
        }

        .calendar-container {
            background: var(--content-bg);
            border: 1px solid var(--content-border);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: var(--shadow-sm);
        }

        .calendar-header {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 1.5rem;
            background: var(--content-secondary);
            border-bottom: 1px solid var(--content-border);
        }

        .calendar-nav {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .calendar-nav-btn {
            width: 40px;
            height: 40px;
            border: 1px solid var(--content-border);
            background: var(--content-bg);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .calendar-nav-btn:hover {
            background: var(--primary-purple);
            border-color: var(--primary-purple);
            color: white;
        }

        .calendar-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-dark);
            margin: 0;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
        }

        .calendar-weekdays {
            display: contents;
        }

        .calendar-weekday {
            padding: 1rem;
            text-align: center;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-muted);
            background: var(--content-secondary);
            border-bottom: 1px solid var(--content-border);
        }

        .calendar-day {
            min-height: 120px;
            border-right: 1px solid var(--content-border);
            border-bottom: 1px solid var(--content-border);
            padding: 8px;
            position: relative;
            background: var(--content-bg);
        }

        .calendar-day:nth-child(7n) {
            border-right: none;
        }

        .calendar-day.other-month {
            background: var(--content-secondary);
            opacity: 0.3;
        }

        .calendar-day.today {
            background: rgba(102, 126, 234, 0.05);
            border-color: var(--primary-purple);
        }

        .calendar-day-number {
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 4px;
            font-size: 14px;
        }

        .calendar-day.today .calendar-day-number {
            color: var(--primary-purple);
        }

        .calendar-showtimes {
            display: flex;
            gap: 4px;
            overflow-x: auto;
            scrollbar-width: none;
        }

        .calendar-showtimes::-webkit-scrollbar {
                display: none;
            }

        .calendar-showtime-item {
            min-width: 80px;
            max-width: 80px;
            background: white;
            border: 1px solid var(--content-border);
            border-radius: 6px;
            padding: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: var(--shadow-sm);
            overflow: hidden;
        }

        .calendar-showtime-item:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            border-color: var(--primary-purple);
        }

        .calendar-showtime-poster {
            width: 100%;
            height: 45px;
            object-fit: cover;
            border-radius: 4px;
            margin-bottom: 4px;
            transition: opacity 0.3s ease;
            background: #f8f9fa;
        }

        .calendar-showtime-poster:not([src]),
        .calendar-showtime-poster[src=""],
        .calendar-showtime-poster[src="/images/no-poster.jpg"] {
            opacity: 0;
            background: linear-gradient(45deg, #e9ecef 25%, transparent 25%, transparent 50%, #e9ecef 50%, #e9ecef 75%, transparent 75%, transparent);
            background-size: 8px 8px;
            position: relative;
        }

        .calendar-showtime-poster:not([src])::after,
        .calendar-showtime-poster[src=""]::after,
        .calendar-showtime-poster[src="/images/no-poster.jpg"]::after {
            content: "🎬";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 16px;
            opacity: 0.7;
        }

        .calendar-showtime-title {
            font-size: 10px;
            font-weight: 500;
            color: var(--text-dark);
            line-height: 1.2;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            margin-bottom: 2px;
        }

        .calendar-showtime-time {
            font-size: 9px;
            color: var(--text-muted);
            font-weight: 500;
        }

        /* Showtime Detail Modal */
        .showtime-detail-modal .modal-dialog {
            max-width: 800px;
        }

        .showtime-detail-header {
            display: flex;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .showtime-detail-poster {
            width: 150px;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: var(--shadow-md);
        }

        .showtime-detail-info h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-dark);
        }

        .showtime-detail-meta {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .showtime-detail-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            background: var(--content-secondary);
            border-radius: 8px;
        }

        .showtime-detail-item i {
            color: var(--primary-purple);
            width: 20px;
        }

        .showtime-detail-item strong {
            color: var(--text-dark);
        }

        .table-view {
            display: block;
        }

        .table-view.active {
            display: block;
        }

        .calendar-view.active ~ .table-view {
            display: none;
        }
    </style>
</head>

<body>
    <!-- New Dashboard Layout -->
    <div class="new-dashboard-layout">
        <!-- Sidebar -->
        @await Html.PartialAsync("~/Views/Shared/_DashboardSidebar.cshtml")

        <!-- Main Content -->
        <main class="new-dashboard-main">
            <div class="showtime-management-content">
                <!-- Page Header -->
                    <div class="showtime-page-header">
                        <h1 class="showtime-page-title">
                            <i class="fas fa-calendar-alt"></i>
                                Quản lý lịch chiếu
                            </h1>
                        <p class="showtime-page-subtitle">
                            Quản lý và điều phối lịch chiếu phim tại rạp Cinema City
                        </p>
                </div>

                    <!-- Controls Section -->
                    <div class="showtime-controls">
                        <div class="showtime-controls-header">
                            <div class="showtime-search-box">
                                <i class="fas fa-search showtime-search-icon"></i>
                                <input type="text" 
                                       class="showtime-search-input" 
                                       id="showtimeSearch"
                                       placeholder="Tìm kiếm theo tên phim, phòng chiếu..."
                                       onkeyup="searchShowtimes()">
                        </div>
                            <div class="d-flex gap-2 align-items-center">
                                <div class="view-toggle">
                                    <button class="view-toggle-btn active" onclick="switchView('calendar')">
                                        <i class="fas fa-calendar-alt"></i>
                                        Lịch
                                    </button>
                                    <button class="view-toggle-btn" onclick="switchView('table')">
                                        <i class="fas fa-list"></i>
                                        Bảng
                                    </button>
                        </div>
                                <button class="btn-filter" onclick="openFilterModal()">
                                    <i class="fas fa-filter"></i>
                                Lọc
                            </button>
                                <button class="btn-export" onclick="exportShowtimes()">
                                    <i class="fas fa-download"></i>
                                    Xuất Excel
                                </button>
                                <button class="btn-add-showtime" onclick="openCreateShowtimeModal()">
                                    <i class="fas fa-plus"></i>
                                    Thêm lịch chiếu
                                </button>
                        </div>
                    </div>
                </div>

                    <!-- Calendar View -->
                    <div class="calendar-view active" id="calendarView">
                        <div class="calendar-container">
                            <div class="calendar-header">
                                <div class="calendar-nav">
                                    <button class="calendar-nav-btn" onclick="changeMonth(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                                    <h3 class="calendar-title" id="calendarTitle">Tháng 12/2024</h3>
                                    <button class="calendar-nav-btn" onclick="changeMonth(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                                </div>
                                <button class="btn-add-showtime" onclick="openCreateShowtimeModal()">
                                    <i class="fas fa-plus"></i>
                                    Thêm lịch chiếu
                    </button>
                </div>
                            <div class="calendar-grid" id="calendarGrid">
                                <div class="calendar-weekdays">
                                    <div class="calendar-weekday">Thứ 2</div>
                                    <div class="calendar-weekday">Thứ 3</div>
                                    <div class="calendar-weekday">Thứ 4</div>
                                    <div class="calendar-weekday">Thứ 5</div>
                                    <div class="calendar-weekday">Thứ 6</div>
                                    <div class="calendar-weekday">Thứ 7</div>
                                    <div class="calendar-weekday">Chủ nhật</div>
                            </div>
                                <!-- Calendar days will be generated by JavaScript -->
                    </div>
                                </div>
                    </div>

                    <!-- Table View -->
                    <div class="table-view" id="tableView">
                        <div class="showtime-table-container" id="showtimeTableContainer">
                        <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                            <div class="d-flex align-items-center gap-3">
                                <h5 class="mb-0">Danh sách lịch chiếu</h5>
                                <span class="badge bg-primary">@Model.Showtimes.Count() lịch chiếu</span>
                                            </div>
                            <div class="bulk-actions">
                                <button class="bulk-action-btn danger" id="bulkDeleteBtn" onclick="bulkDeleteShowtimes()" disabled>
                                    <i class="fas fa-trash"></i>
                                    Xóa đã chọn
                                </button>
                                <button class="bulk-action-btn" id="bulkUpdateBtn" onclick="bulkUpdateStatus()" disabled>
                                    <i class="fas fa-toggle-on"></i>
                                    Cập nhật trạng thái
                                </button>
                    </div>
                </div>

                        <div class="table-responsive">
                            <table class="showtime-table" id="showtimeTable">
                        <thead>
                            <tr>
                                        <th style="width: 40px;">
                                            <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                        </th>
                                <th>Phim</th>
                                <th>Phòng chiếu</th>
                                <th>Ngày chiếu</th>
                                <th>Giờ chiếu</th>
                                <th>Giá vé</th>
                                        <th>Trạng thái</th>
                                        <th>Tình trạng</th>
                                        <th style="width: 120px;">Thao tác</th>
                            </tr>
                        </thead>
                                <tbody id="showtimeTableBody">
                                    @if (Model.Showtimes != null && Model.Showtimes.Any())
                                    {
                            @foreach (var showtime in Model.Showtimes.OrderBy(s => s.ShowDate).ThenBy(s => s.StartTime))
                            {
                                            var showtimeOccupancyRate = showtime.TotalSeats > 0 ? (double)showtime.BookedSeats / showtime.TotalSeats * 100 : 0;
                                            var occupancyStatus = showtimeOccupancyRate >= 90 ? "sold-out" : 
                                                                showtimeOccupancyRate >= 70 ? "nearly-full" : "available";
                                            var occupancyText = showtimeOccupancyRate >= 90 ? "Hết vé" : 
                                                              showtimeOccupancyRate >= 70 ? "Sắp hết vé" : "Còn vé";
                                            
                                            var status = showtime.ShowDate.Date < DateTime.Today ? "inactive" : 
                                                       showtime.ShowDate.Date == DateTime.Today ? "active" : "pending";
                                            var statusText = showtime.ShowDate.Date < DateTime.Today ? "Đã qua" : 
                                                           showtime.ShowDate.Date == DateTime.Today ? "Hôm nay" : "Sắp tới";
                                            
                                            <tr>
                                                <td>
                                                    <input type="checkbox" value="@showtime.Id" onchange="updateBulkActionButtons()">
                                                </td>
                                    <td>
                                        <div class="movie-info">
                                            @if (!string.IsNullOrEmpty(showtime.MoviePoster))
                                            {
                                                <img src="@showtime.MoviePoster" alt="@showtime.MovieTitle" class="movie-poster">
                                            }
                                                        else
                                                        {
                                                            <div class="movie-poster bg-light d-flex align-items-center justify-content-center">
                                                                <i class="fas fa-film text-muted"></i>
                                                            </div>
                                                        }
                                                        <div class="movie-details">
                                                            <h6>@showtime.MovieTitle</h6>
                                                            <small>@showtime.MovieDuration phút</small>
                                            </div>
                                        </div>
                                    </td>
                                                <td>
                                                    <strong>@showtime.CinemaRoomName</strong>
                                                </td>
                                                <td>
                                                    @showtime.ShowDate.ToString("dd/MM/yyyy")
                                                </td>
                                                <td>
                                                    <strong>@showtime.StartTime.ToString(@"hh\:mm")</strong>
                                                </td>
                                                <td>
                                                    <span class="text-success fw-bold">@showtime.Price.ToString("N0") VNĐ</span>
                                                </td>
                                                <td>
                                                    <span class="status-badge @status">@statusText</span>
                                                </td>
                                                <td>
                                                    <span class="status-badge @occupancyStatus">@occupancyText</span>
                                                    <div class="mt-1">
                                                        <small class="text-muted">@showtime.BookedSeats/@showtime.TotalSeats vé</small>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                                        <button class="action-btn" onclick="viewShowtime('@showtime.Id')" title="Xem chi tiết">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="action-btn edit" onclick="editShowtime('@showtime.Id')" title="Chỉnh sửa">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                                        <button class="action-btn delete" onclick="deleteShowtime('@showtime.Id')" title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="9">
                                                <div class="empty-state">
                                                    <i class="fas fa-calendar-times"></i>
                                                    <h5>Chưa có lịch chiếu nào</h5>
                                                    <p>Nhấn "Thêm lịch chiếu" để tạo lịch chiếu mới</p>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                        </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Showtime Detail Modal -->
    <div class="modal fade showtime-detail-modal" id="showtimeDetailModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết lịch chiếu</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="showtimeDetailBody">
                    <!-- Content will be loaded by JavaScript -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-warning" onclick="editCurrentShowtime()">
                        <i class="fas fa-edit"></i>
                        Chỉnh sửa
                    </button>
                    <button type="button" class="btn btn-danger" onclick="deleteCurrentShowtime()">
                        <i class="fas fa-trash"></i>
                        Xóa
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    <script>
        // Base API URL
        const apiBaseUrl = 'http://localhost:5274';

        // Search functionality
        function searchShowtimes() {
            const searchTerm = document.getElementById('showtimeSearch').value.toLowerCase();
            const tableBody = document.getElementById('showtimeTableBody');
            const rows = tableBody.querySelectorAll('tr');
            
            rows.forEach(row => {
                const movieTitle = row.querySelector('.movie-details h6')?.textContent.toLowerCase() || '';
                const roomName = row.querySelectorAll('td')[2]?.textContent.toLowerCase() || '';
                
                if (movieTitle.includes(searchTerm) || roomName.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Select all functionality
        function toggleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('tbody input[type="checkbox"]');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
            
            updateBulkActionButtons();
        }

        // Update bulk action buttons
        function updateBulkActionButtons() {
            const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const bulkUpdateBtn = document.getElementById('bulkUpdateBtn');
            
            const hasSelected = checkedBoxes.length > 0;
            bulkDeleteBtn.disabled = !hasSelected;
            bulkUpdateBtn.disabled = !hasSelected;
        }

        // Modal functions
        async function openCreateShowtimeModal() {
            try {
                // Load movies and cinema rooms for dropdowns
                await loadMoviesAndRooms();
                
                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('createNewShowtimeModal'));
                modal.show();
            } catch (error) {
                console.error('Error opening create showtime modal:', error);
                showNotification('Lỗi khi mở form thêm lịch chiếu', 'danger');
            }
        }
        
        async function loadMoviesAndRooms() {
            try {
                // Load movies
                const moviesResponse = await fetch(`${apiBaseUrl}/api/v1/booking-ticket/dropdown/movies`);
                const moviesResult = await moviesResponse.json();
                
                if (moviesResult.success) {
                    const movieSelect = document.getElementById('movieSelect');
                    movieSelect.innerHTML = '<option value="">-- Chọn phim --</option>';
                    moviesResult.data.forEach(movie => {
                        movieSelect.innerHTML += `<option value="${movie.id}">${movie.title}</option>`;
                    });
                }
                
                // Load cinema rooms
                const roomsResponse = await fetch(`${apiBaseUrl}/api/v1/cinemaroom/ViewRoom`);
                const roomsResult = await roomsResponse.json();
                
                const roomsData = roomsResult.data || roomsResult;

                if (Array.isArray(roomsData)) {
                    const roomSelect = document.getElementById('cinemaRoomSelect');
                    roomSelect.innerHTML = '<option value="">-- Chọn phòng chiếu --</option>';
                    roomsData.forEach(room => {
                        roomSelect.innerHTML += `<option value="${room.id}">${room.roomName}</option>`;
                    });
                } else {
                    showNotification('Lỗi khi tải dữ liệu phòng chiếu', 'danger');
                }
            } catch (error) {
                console.error('Error loading movies and rooms:', error);
                showNotification('Lỗi khi tải dữ liệu phim và phòng chiếu', 'danger');
            }
        }
        
        async function checkScheduleConflict() {
            const movieId = document.getElementById('movieSelect').value;
            const cinemaRoomId = document.getElementById('cinemaRoomSelect').value;
            const showDate = document.getElementById('showDate').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            
            if (!movieId || !cinemaRoomId || !showDate || !startTime || !endTime) {
                showNotification('Vui lòng điền đầy đủ thông tin trước khi kiểm tra xung đột', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`${apiBaseUrl}/api/v1/showtime/check-conflict?movieId=${movieId}&cinemaRoomId=${cinemaRoomId}&showDate=${showDate}&startTime=${startTime}&endTime=${endTime}`);
                const result = await response.json();
                
                if (result.success) {
                    if (result.data.hasConflict) {
                        showNotification('Có xung đột lịch chiếu! Vui lòng chọn thời gian khác.', 'danger');
                    } else {
                        showNotification('Không có xung đột lịch chiếu. Có thể tạo lịch chiếu này.', 'success');
                    }
                } else {
                    showNotification('Lỗi khi kiểm tra xung đột: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('Error checking schedule conflict:', error);
                showNotification('Lỗi khi kiểm tra xung đột lịch chiếu', 'danger');
            }
        }
        
        async function saveNewShowtime() {
            const formData = {
                movieId: document.getElementById('movieSelect').value,
                cinemaRoomId: document.getElementById('cinemaRoomSelect').value,
                showDate: document.getElementById('showDate').value,
                startTime: document.getElementById('startTime').value,
                endTime: document.getElementById('endTime').value,
                price: parseFloat(document.getElementById('price').value),
                isActive: document.getElementById('isActive').checked
            };
            
            // Validate form data
            if (!formData.movieId || !formData.cinemaRoomId || !formData.showDate || 
                !formData.startTime || !formData.endTime || !formData.price) {
                showNotification('Vui lòng điền đầy đủ thông tin', 'warning');
                return;
            }
            
            if (formData.price <= 0) {
                showNotification('Giá vé phải lớn hơn 0', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`${apiBaseUrl}/api/v1/showtime/create-new`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Tạo lịch chiếu mới thành công!', 'success');
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createNewShowtimeModal'));
                    modal.hide();
                    
                    // Reset form
                    document.getElementById('createShowtimeForm').reset();
                    
                    // Reload data
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showNotification('Lỗi khi tạo lịch chiếu: ' + result.message, 'danger');
                }
            } catch (error) {
                console.error('Error saving new showtime:', error);
                showNotification('Lỗi khi lưu lịch chiếu mới', 'danger');
            }
        }

        function openFilterModal() {
            showNotification('Chức năng lọc đang được phát triển', 'info');
        }

        function exportShowtimes() {
            showNotification('Đang xuất dữ liệu...', 'info');
        }

        // CRUD functions
        function viewShowtime(id) {
            showNotification(`Xem chi tiết lịch chiếu ID: ${id}`, 'info');
        }

        function editShowtime(id) {
            showNotification(`Chỉnh sửa lịch chiếu ID: ${id}`, 'info');
        }

        function deleteShowtime(id) {
            if (confirm('Bạn có chắc chắn muốn xóa lịch chiếu này?')) {
                showNotification(`Đã xóa lịch chiếu ID: ${id}`, 'success');
            }
        }

        function bulkDeleteShowtimes() {
            const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
            if (checkedBoxes.length === 0) {
                showNotification('Vui lòng chọn ít nhất một lịch chiếu để xóa', 'warning');
                return;
            }
            
            if (confirm(`Bạn có chắc chắn muốn xóa ${checkedBoxes.length} lịch chiếu đã chọn?`)) {
                showNotification(`Đã xóa ${checkedBoxes.length} lịch chiếu`, 'success');
                checkedBoxes.forEach(checkbox => {
                    checkbox.closest('tr').remove();
                });
                updateBulkActionButtons();
            }
        }

        function bulkUpdateStatus() {
            const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
            if (checkedBoxes.length === 0) {
                showNotification('Vui lòng chọn ít nhất một lịch chiếu để cập nhật', 'warning');
                return;
            }
            
            showNotification(`Đã cập nhật trạng thái cho ${checkedBoxes.length} lịch chiếu`, 'success');
        }

        // Notification system
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = `
                top: 20px;
                right: 20px;
                z-index: 10000;
                min-width: 300px;
                box-shadow: var(--shadow-lg);
                border: none;
                border-radius: 12px;
            `;
            
            const icon = type === 'success' ? 'check-circle' : 
                        type === 'warning' ? 'exclamation-triangle' : 
                        type === 'danger' ? 'times-circle' : 'info-circle';
            
            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-${icon} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }

        // Calendar functionality
        let currentDate = new Date();
        let currentShowtimeId = null;
        let showtimeData = @Html.Raw(Json.Serialize(Model.Showtimes ?? new List<UI.Areas.ShowtimeManagement.Models.ShowtimeDto>()));

        function switchView(viewType) {
            const calendarView = document.getElementById('calendarView');
            const tableView = document.getElementById('tableView');
            const toggleBtns = document.querySelectorAll('.view-toggle-btn');

            toggleBtns.forEach(btn => btn.classList.remove('active'));
            
            if (viewType === 'calendar') {
                calendarView.classList.add('active');
                tableView.classList.remove('active');
                document.querySelector('[onclick="switchView(\'calendar\')"]').classList.add('active');
                generateCalendar();
                    } else {
                calendarView.classList.remove('active');
                tableView.classList.add('active');
                document.querySelector('[onclick="switchView(\'table\')"]').classList.add('active');
            }
        }

        async function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            await loadMonthlyData();
            generateCalendar();
        }

        async function loadMonthlyData() {
            try {
                const month = currentDate.getMonth() + 1;
                const year = currentDate.getFullYear();
                
                showLoadingOverlay(true);
                
                const response = await fetch(`/ShowtimeManagement/Showtimes/GetMonthlyData?month=${month}&year=${year}`);
                const result = await response.json();
                
                if (result.success) {
                    showtimeData = result.data || [];
                } else {
                    console.error('Failed to load monthly data:', result.message);
                    showNotification('Không thể tải dữ liệu lịch chiếu', 'error');
                    showtimeData = [];
                }
            } catch (error) {
                console.error('Error loading monthly data:', error);
                showNotification('Lỗi khi tải dữ liệu', 'error');
                showtimeData = [];
            } finally {
                showLoadingOverlay(false);
            }
        }

        function showLoadingOverlay(show) {
            const container = document.querySelector('.calendar-container');
            let overlay = container.querySelector('.loading-overlay');
            
            if (show) {
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.className = 'loading-overlay';
                    overlay.innerHTML = '<i class="fas fa-spinner fa-spin loading-spinner-small"></i>';
                    container.appendChild(overlay);
                }
                overlay.style.display = 'flex';
            } else {
                if (overlay) {
                    overlay.style.display = 'none';
                }
            }
        }

        function generateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const firstDayOfWeek = (firstDay.getDay() + 6) % 7; // Convert to Monday = 0
            
            // Update title
            const monthNames = ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
                              'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'];
            document.getElementById('calendarTitle').textContent = `${monthNames[month]}/${year}`;

            const calendarGrid = document.getElementById('calendarGrid');
            
            // Clear existing days
            const existingDays = calendarGrid.querySelectorAll('.calendar-day');
            existingDays.forEach(day => day.remove());

            // Generate calendar days
            let dayCount = 1;
            for (let week = 0; week < 6; week++) {
                for (let day = 0; day < 7; day++) {
                    const dayElement = document.createElement('div');
                    dayElement.className = 'calendar-day';
                    
                    const dayIndex = week * 7 + day;
                    
                    if (dayIndex < firstDayOfWeek) {
                        // Previous month days
                        const prevMonthDay = new Date(year, month, -(firstDayOfWeek - dayIndex - 1));
                        dayElement.classList.add('other-month');
                        dayElement.innerHTML = `<div class="calendar-day-number">${prevMonthDay.getDate()}</div>`;
                    } else if (dayCount <= lastDay.getDate()) {
                        // Current month days
                        const currentDay = new Date(year, month, dayCount);
                        const isToday = currentDay.toDateString() === new Date().toDateString();
                        
                        if (isToday) {
                            dayElement.classList.add('today');
                        }
                        
                        dayElement.innerHTML = `
                            <div class="calendar-day-number">${dayCount}</div>
                            <div class="calendar-showtimes" id="day-${year}-${month}-${dayCount}">
                                ${generateShowtimesForDay(currentDay)}
                            </div>
                        `;
                        dayCount++;
                    } else {
                        // Next month days
                        const nextMonthDay = dayCount - lastDay.getDate();
                        dayElement.classList.add('other-month');
                        dayElement.innerHTML = `<div class="calendar-day-number">${nextMonthDay}</div>`;
                        dayCount++;
                    }
                    
                    calendarGrid.appendChild(dayElement);
                }
                
                if (dayCount > lastDay.getDate() && week < 5) {
                    break;
                }
            }
        }

        function generateShowtimesForDay(date) {
            const dateStr = date.toISOString().split('T')[0];
            const dayShowtimes = showtimeData.filter(st => {
                const showtimeDate = new Date(st.showDate).toISOString().split('T')[0];
                return showtimeDate === dateStr;
            });

            return dayShowtimes.map(showtime => {
                const posterUrl = showtime.moviePoster && showtime.moviePoster.trim() !== '' 
                    ? showtime.moviePoster 
                    : '/images/default-movie-poster.jpg';
                
                return `
                    <div class="calendar-showtime-item" onclick="showShowtimeDetail('${showtime.id}')">
                        <img src="${posterUrl}" 
                             alt="${showtime.movieTitle}" 
                             class="calendar-showtime-poster"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                             onload="this.style.opacity='1';">
                        <div class="calendar-showtime-fallback" style="display:none; height:45px; background:#f8f9fa; border-radius:4px; align-items:center; justify-content:center; margin-bottom:4px;">
                            <i class="fas fa-film text-muted"></i>
                        </div>
                        <div class="calendar-showtime-title">${showtime.movieTitle}</div>
                        <div class="calendar-showtime-time">${formatTime(showtime.startTime)}</div>
                    </div>
                `;
            }).join('');
        }

        function formatTime(timeSpan) {
            // Assuming timeSpan is in format "HH:mm:ss" or similar
            return timeSpan.substring(0, 5);
        }

        function showShowtimeDetail(showtimeId) {
            const showtime = showtimeData.find(st => st.id === showtimeId);
            if (!showtime) return;

            currentShowtimeId = showtimeId;
            
            const modalBody = document.getElementById('showtimeDetailBody');
            modalBody.innerHTML = `
                <div class="showtime-detail-header">
                    <img src="${showtime.moviePoster || '/images/no-poster.jpg'}" 
                         alt="${showtime.movieTitle}" 
                         class="showtime-detail-poster"
                         onerror="this.src='/images/no-poster.jpg'">
                    <div class="showtime-detail-info">
                        <h3>${showtime.movieTitle}</h3>
                        <p class="text-muted">Thời lượng: ${showtime.movieDuration} phút</p>
                        <div class="showtime-detail-meta">
                            <div class="showtime-detail-item">
                                <i class="fas fa-calendar"></i>
                                <div>
                                    <strong>Ngày chiếu:</strong><br>
                                    ${new Date(showtime.showDate).toLocaleDateString('vi-VN')}
                                </div>
                            </div>
                            <div class="showtime-detail-item">
                                <i class="fas fa-clock"></i>
                                <div>
                                    <strong>Giờ chiếu:</strong><br>
                                    ${formatTime(showtime.startTime)}
                                </div>
                            </div>
                            <div class="showtime-detail-item">
                                <i class="fas fa-door-open"></i>
                                <div>
                                    <strong>Phòng chiếu:</strong><br>
                                    ${showtime.cinemaRoomName}
                                </div>
                            </div>
                            <div class="showtime-detail-item">
                                <i class="fas fa-money-bill"></i>
                                <div>
                                    <strong>Giá vé:</strong><br>
                                    ${showtime.price.toLocaleString('vi-VN')} VNĐ
                                </div>
                            </div>
                            <div class="showtime-detail-item">
                                <i class="fas fa-users"></i>
                                <div>
                                    <strong>Tình trạng vé:</strong><br>
                                    ${showtime.bookedSeats}/${showtime.totalSeats} vé đã đặt
                                </div>
                            </div>
                            <div class="showtime-detail-item">
                                <i class="fas fa-info-circle"></i>
                                <div>
                                    <strong>Trạng thái:</strong><br>
                                    ${getStatusText(showtime.showDate)}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            const modal = new bootstrap.Modal(document.getElementById('showtimeDetailModal'));
            modal.show();
        }

        function getStatusText(showDate) {
            const today = new Date();
            const showtimeDate = new Date(showDate);
            
            if (showtimeDate.toDateString() === today.toDateString()) {
                return 'Hôm nay';
            } else if (showtimeDate < today) {
                return 'Đã qua';
            } else {
                return 'Sắp tới';
            }
        }

        function editCurrentShowtime() {
            if (currentShowtimeId) {
                editShowtime(currentShowtimeId);
                bootstrap.Modal.getInstance(document.getElementById('showtimeDetailModal')).hide();
            }
        }

        function deleteCurrentShowtime() {
            if (currentShowtimeId) {
                deleteShowtime(currentShowtimeId);
                bootstrap.Modal.getInstance(document.getElementById('showtimeDetailModal')).hide();
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Showtime Management Dashboard loaded');
            generateCalendar();
        });
    </script>
    
    @await Html.PartialAsync("_CreateNewModal")
</body>
</html>