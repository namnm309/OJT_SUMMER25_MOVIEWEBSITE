@model UI.Areas.ShowtimeManagement.Models.ShowtimePageViewModel
@{
    ViewData["Title"] = "Quản lý lịch chiếu - Cinema City";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="~/css/new-dashboard.css" />
    
    <link rel="stylesheet" href="~/css/ShowTimeManagement/index.css" />
    
</head>

@{
    ViewBag.PageTitle = "Quản lý lịch chiếu";
    ViewBag.ParentTitle = "Dashboard";
    ViewBag.ParentUrl = Url.Action("AdminDashboard", "Dashboard");
}
<body>
    
    <div class="new-dashboard-layout">
        
        @await Html.PartialAsync("~/Views/Shared/_DashboardSidebar.cshtml")

        
        <main class="new-dashboard-main">
            <div class="showtime-management-content">
                
                    <div class="showtime-page-header">
                        @await Html.PartialAsync("~/Views/Shared/_DashboardBreadcrumb.cshtml")
                        <p class="showtime-page-subtitle">
                            Quản lý và điều phối lịch chiếu phim tại rạp Cinema City
                        </p>
                </div>

                    
                    <div class="showtime-controls">
                        <div class="showtime-controls-header">
                            <div class="showtime-search-box">
                                <i class="fas fa-search showtime-search-icon"></i>
                                <input type="text" 
                                       class="showtime-search-input" 
                                       id="showtimeSearch"
                                       placeholder="Tìm kiếm theo tên phim, phòng chiếu..."
                                       onkeyup="searchShowtimes()">
                                <!-- Kết quả phim -->
                                <div id="movieSearchResult" class="movie-search-result"></div>
                        </div>
                            <div class="d-flex gap-2 align-items-center">
                                <div class="view-toggle">
                                    <button class="view-toggle-btn active" onclick="switchView('calendar')">
                                        <i class="fas fa-calendar-alt"></i>
                                        Lịch
                                    </button>
                                    <button class="view-toggle-btn" onclick="switchView('table')">
                                        <i class="fas fa-list"></i>
                                        Bảng
                                    </button>
                        </div>
                                <button class="btn-filter" onclick="openFilterModal()">
                                    <i class="fas fa-filter"></i>
                                Lọc
                            </button>
                                <button class="btn-export" onclick="exportShowtimes()">
                                    <i class="fas fa-download"></i>
                                    Xuất Excel
                                </button>
                                <button class="btn-add-showtime" onclick="openCreateShowtimeModal()">
                                    <i class="fas fa-plus"></i>
                                    Thêm lịch chiếu
                                </button>
                        </div>
                    </div>
                </div>

                    
                    <div class="calendar-view active" id="calendarView">
                        <div class="calendar-container">
                            <div class="calendar-header">
                                <div class="calendar-nav">
                                    <button class="calendar-nav-btn" onclick="changeMonth(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                                    <h3 class="calendar-title" id="calendarTitle">Tháng 12/2024</h3>
                                    <button class="calendar-nav-btn" onclick="changeMonth(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                                </div>
                                <button class="btn-add-showtime" onclick="openCreateShowtimeModal()">
                                    <i class="fas fa-plus"></i>
                                    Thêm lịch chiếu
                    </button>
                </div>
                            <div class="calendar-grid" id="calendarGrid">
                                <div class="calendar-weekdays">
                                    <div class="calendar-weekday">Thứ 2</div>
                                    <div class="calendar-weekday">Thứ 3</div>
                                    <div class="calendar-weekday">Thứ 4</div>
                                    <div class="calendar-weekday">Thứ 5</div>
                                    <div class="calendar-weekday">Thứ 6</div>
                                    <div class="calendar-weekday">Thứ 7</div>
                                    <div class="calendar-weekday">Chủ nhật</div>
                            </div>
                                
                    </div>
                                </div>
                    </div>

                    
                    <div class="table-view" id="tableView">
                        <div class="showtime-table-container" id="showtimeTableContainer">
                        <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                            <div class="d-flex align-items-center gap-3">
                                <h5 class="mb-0">Danh sách lịch chiếu</h5>
                                <span class="badge bg-primary">@Model.Showtimes.Count() lịch chiếu</span>
                                <!-- old pageSizeSelect removed, handled in movie-pagination -->
                                            </div>
                            <div class="bulk-actions">
                                <button class="bulk-action-btn danger" id="bulkDeleteBtn" onclick="bulkDeleteShowtimes()" disabled>
                                    <i class="fas fa-trash"></i>
                                    Xóa đã chọn
                                </button>
                                <button class="bulk-action-btn" id="bulkUpdateBtn" onclick="bulkUpdateStatus()" disabled>
                                    <i class="fas fa-toggle-on"></i>
                                    Cập nhật trạng thái
                                </button>
                    </div>
                </div>

                        <div class="movie-pagination d-flex justify-content-between align-items-center py-2">
                            <div class="pagination-info">
                                <span id="paginationInfo">Trang 1/1 (Hiển thị 0-0 của 0)</span>
                            </div>
                            <div class="pagination-controls d-flex align-items-center gap-1">
                                <button id="prevPageBtn" class="btn-pagination btn btn-sm btn-outline-secondary" disabled onclick="loadShowtimesTable(currentTablePage-1)">❮ Trước</button>
                                <div id="pageNumbers" class="page-numbers d-flex gap-1"></div>
                                <button id="nextPageBtn" class="btn-pagination btn btn-sm btn-outline-secondary" disabled onclick="loadShowtimesTable(currentTablePage+1)">Sau ❯</button>
                            </div>
                            <div class="pagination-size">
                                <select id="pageSizeSelect" class="form-select form-select-sm" style="width:auto;" onchange="changePageSize()">
                                    <option value="5">5/trang</option>
                                    <option value="10" selected>10/trang</option>
                                    <option value="25">25/trang</option>
                                    <option value="50">50/trang</option>
                                </select>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="showtime-table" id="showtimeTable">
                        <thead>
                            <tr>
                                        <th style="width: 40px;">
                                            <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                        </th>
                                <th>Phim</th>
                                <th>Phòng chiếu</th>
                                <th>Ngày chiếu</th>
                                <th>Giờ chiếu</th>
                                <th>Giờ kết thúc</th>
                                <th>Giá vé</th>
                                        <th>Trạng thái</th>
                                        <th>Tình trạng</th>
                                        <th style="width: 120px;">Thao tác</th>
                            </tr>
                        </thead>
                                <tbody id="showtimeTableBody">
                                    @if (Model.Showtimes != null && Model.Showtimes.Any())
                                    {
                            @foreach (var showtime in Model.Showtimes.OrderBy(s => s.ShowDate).ThenBy(s => s.StartTime))
                            {
                                            var showtimeOccupancyRate = showtime.TotalSeats > 0 ? (double)showtime.BookedSeats / showtime.TotalSeats * 100 : 0;
                                            var occupancyStatus = showtimeOccupancyRate >= 90 ? "sold-out" : 
                                                                showtimeOccupancyRate >= 70 ? "nearly-full" : "available";
                                            var occupancyText = showtimeOccupancyRate >= 90 ? "Hết vé" : 
                                                              showtimeOccupancyRate >= 70 ? "Sắp hết vé" : "Còn vé";
                                            
                                            var status = showtime.ShowDate.Date < DateTime.Today ? "inactive" : 
                                                       showtime.ShowDate.Date == DateTime.Today ? "active" : "pending";
                                            var statusText = showtime.ShowDate.Date < DateTime.Today ? "Đã qua" : 
                                                           showtime.ShowDate.Date == DateTime.Today ? "Hôm nay" : "Sắp tới";
                                            
                                            <tr>
                                                <td>
                                                    <input type="checkbox" value="@showtime.Id" onchange="updateBulkActionButtons()">
                                                </td>
                                    <td>
                                        <div class="movie-info">
                                            @if (!string.IsNullOrEmpty(showtime.MoviePoster))
                                            {
                                                <img src="@showtime.MoviePoster" alt="@showtime.MovieTitle" class="movie-poster">
                                            }
                                                        else
                                                        {
                                                            <div class="movie-poster bg-light d-flex align-items-center justify-content-center">
                                                                <i class="fas fa-film text-muted"></i>
                                                            </div>
                                                        }
                                                        <div class="movie-details">
                                                            <h6>@showtime.MovieTitle</h6>
                                                            <small>@showtime.MovieDuration phút</small>
                                            </div>
                                        </div>
                                    </td>
                                                <td>
                                                    <strong>@showtime.CinemaRoomName</strong>
                                                </td>
                                                <td>
                                                    @showtime.ShowDate.ToString("dd/MM/yyyy")
                                                </td>
                                                <td>
                                                    <strong>@showtime.StartTime.ToString(@"hh\:mm")</strong>
                                                </td>
                                                <td>
                                                    <strong>@showtime.EndTime.ToString(@"hh\:mm")</strong>
                                                </td>
                                                <td>
                                                    <span class="text-success fw-bold">@showtime.Price.ToString("N0") VNĐ</span>
                                                </td>
                                                <td>
                                                    <span class="status-badge @status">@statusText</span>
                                                </td>
                                                <td>
                                                    <span class="status-badge @occupancyStatus">@occupancyText</span>
                                                    <div class="mt-1">
                                                        <small class="text-muted">@showtime.BookedSeats/@showtime.TotalSeats vé</small>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                                        <button class="action-btn" onclick="viewShowtime('@showtime.Id')" title="Xem chi tiết">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="action-btn edit" onclick="editShowtime('@showtime.Id')" title="Chỉnh sửa">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                                        <button class="action-btn delete" onclick="deleteShowtime('@showtime.Id')" title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="9">
                                                <div class="empty-state">
                                                    <i class="fas fa-calendar-times"></i>
                                                    <h5>Chưa có lịch chiếu nào</h5>
                                                    <p>Nhấn "Thêm lịch chiếu" để tạo lịch chiếu mới</p>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                        </div>
                        <!-- pagination moved to top -->
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    
    <div class="modal fade showtime-detail-modal" id="showtimeDetailModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết lịch chiếu</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="showtimeDetailBody">
                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-warning" onclick="editCurrentShowtime()">
                        <i class="fas fa-edit"></i>
                        Chỉnh sửa
                    </button>
                    <button type="button" class="btn btn-danger" onclick="deleteCurrentShowtime()">
                        <i class="fas fa-trash"></i>
                        Xóa
                    </button>
                </div>
            </div>
        </div>
    </div>

    
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @await Html.PartialAsync("_CreateNewModal")

    @* <script src="~/js/ShowTimeManagement/index.js"></script> *@

    <script>

               // Sử dụng HTTPS để trùng với backend và tránh lỗi mixed-scheme/CORS
               const apiBaseUrl = 'https://localhost:7049';

               let isEditMode = false;
               let editingShowtimeId = null;

               function searchShowtimes() {
                   const searchTerm = document.getElementById('showtimeSearch').value.toLowerCase();
                   const tableBody = document.getElementById('showtimeTableBody');
                   const rows = tableBody.querySelectorAll('tr');

                   rows.forEach(row => {
                       const movieTitle = row.querySelector('.movie-details h6')?.textContent.toLowerCase() || '';
                       const roomName = row.querySelectorAll('td')[2]?.textContent.toLowerCase() || '';

                       if (movieTitle.includes(searchTerm) || roomName.includes(searchTerm)) {
                           row.style.display = '';
                       } else {
                           row.style.display = 'none';
                       }
                   });

                   showMovieSuggestions(searchTerm);
               }


               function toggleSelectAll() {
                   const selectAllCheckbox = document.getElementById('selectAll');
                   const checkboxes = document.querySelectorAll('tbody input[type="checkbox"]');

                   checkboxes.forEach(checkbox => {
                       checkbox.checked = selectAllCheckbox.checked;
                   });

                   updateBulkActionButtons();
               }


               function updateBulkActionButtons() {
                   const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
                   const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
                   const bulkUpdateBtn = document.getElementById('bulkUpdateBtn');

                   const hasSelected = checkedBoxes.length > 0;
                   bulkDeleteBtn.disabled = !hasSelected;
                   bulkUpdateBtn.disabled = !hasSelected;
               }


               async function openCreateShowtimeModal() {
                   try {

                       await loadMoviesAndRooms();


                       const modal = new bootstrap.Modal(document.getElementById('createNewShowtimeModal'));
                       modal.show();
                   } catch (error) {
                       console.error('Error opening create showtime modal:', error);
                       showNotification('Lỗi khi mở form thêm lịch chiếu', 'danger');
                   }
               }

               async function loadMoviesAndRooms() {
                   try {

                       const moviesResponse = await fetch(`${apiBaseUrl}/api/v1/booking-ticket/dropdown/movies`);
                       const moviesResult = await moviesResponse.json();

                       // Một số API trả về { data: [...] } hoặc { Data: [...] } hoặc trả thẳng mảng
                       const moviesData = moviesResult.data || moviesResult.Data || moviesResult;

                       if (Array.isArray(moviesData) && moviesData.length) {
                           const movieSelect = document.getElementById('movieSelect');
                           movieSelect.innerHTML = '<option value="">-- Chọn phim --</option>';
                           moviesData.forEach(movie => {
                               // movie có thể có 'id' / 'Id', 'title' / 'Title'
                               const movieId = movie.id || movie.Id;
                               const movieTitle = movie.title || movie.Title;
                               movieSelect.innerHTML += `<option value="${movieId}" data-duration="${movie.duration || movie.Duration || 0}">${movieTitle}</option>`;
                           });
                       } else {
                           showNotification('Không tìm thấy dữ liệu phim', 'danger');
                       }


                       const roomsResponse = await fetch(`${apiBaseUrl}/api/v1/cinemaroom/ViewRoom`);
                       const roomsResult = await roomsResponse.json();

                       const roomsData = roomsResult.data || roomsResult;

                       if (Array.isArray(roomsData)) {
                           const roomSelect = document.getElementById('cinemaRoomSelect');
                           roomSelect.innerHTML = '<option value="">-- Chọn phòng chiếu --</option>';
                           roomsData.forEach(room => {
                               roomSelect.innerHTML += `<option value="${room.id}">${room.roomName}</option>`;
                           });
                       } else {
                           showNotification('Lỗi khi tải dữ liệu phòng chiếu', 'danger');
                       }
                   } catch (error) {
                       console.error('Error loading movies and rooms:', error);
                       showNotification('Lỗi khi tải dữ liệu phim và phòng chiếu', 'danger');
                   }
               }

               async function checkScheduleConflict() {
                   const movieId = document.getElementById('movieSelect').value;
                   const cinemaRoomId = document.getElementById('cinemaRoomSelect').value;
                   const showDate = document.getElementById('showDate').value;
                   const startTime = document.getElementById('startTime').value;
                   const endTime = document.getElementById('endTime').value;

                   if (!movieId || !cinemaRoomId || !showDate || !startTime || !endTime) {
                       showNotification('Vui lòng điền đầy đủ thông tin trước khi kiểm tra xung đột', 'warning');
                       return;
                   }

                   try {
                       const response = await fetch(`${apiBaseUrl}/api/v1/showtime/CheckConflict?movieId=${movieId}&cinemaRoomId=${cinemaRoomId}&showDate=${showDate}&startTime=${startTime}&endTime=${endTime}`);
                       const result = await response.json();

                       if (result.success) {
                           if (result.data.hasConflict) {
                               showNotification('Có xung đột lịch chiếu! Vui lòng chọn thời gian khác.', 'danger');
                           } else {
                               showNotification('Không có xung đột lịch chiếu. Có thể tạo lịch chiếu này.', 'success');
                           }
                       } else {
                           showNotification('Lỗi khi kiểm tra xung đột: ' + result.message, 'danger');
                       }
                   } catch (error) {
                       console.error('Error checking schedule conflict:', error);
                       showNotification('Lỗi khi kiểm tra xung đột lịch chiếu', 'danger');
                   }
               }

                       async function saveNewShowtime() {
            // 0. Tính endTime tự động dựa vào duration
            calculateEndTime();

            // 1. Lấy rawDate từ picker (MM/DD/YYYY) và chuyển sang ISO (YYYY-MM-DD)
            const rawDate = document.getElementById('showDate').value;    // ví dụ "07/26/2025"
            let showDateIso = rawDate;
            if (rawDate.includes('/')) {
                const [mm, dd, yyyy] = rawDate.split('/');
                showDateIso = `${yyyy}-${mm.padStart(2,'0')}-${dd.padStart(2,'0')}`;
            }

            // 2. Chuẩn hóa giờ bắt đầu/kết thúc: nếu thiếu :ss thì thêm vào
            const normalizeTime = t => t && (t.length === 5 ? `${t}:00` : t);
            const startRaw = document.getElementById('startTime').value;
            const endRaw   = document.getElementById('endTime').value;
            const startTime = normalizeTime(startRaw);
            const endTime   = normalizeTime(endRaw);

            // 3. Client-side check: giờ bắt đầu phải nhỏ hơn giờ kết thúc
            const t1 = new Date(`1970-01-01T${startTime}`);
            const t2 = new Date(`1970-01-01T${endTime}`);
            if (!startTime || !endTime || t1 >= t2) {
                showNotification('Giờ bắt đầu phải nhỏ hơn giờ kết thúc','danger');
                return;
            }

            // 4. Kiểm tra xung đột lịch (gọi sang autoCheckConflict đã convert date rồi)
            const hasConflict = await autoCheckConflict();
            if (hasConflict) return;

            // 5. Kiểm tra bắt buộc các trường đã chọn
            const movieId       = document.getElementById('movieSelect').value;
            const cinemaRoomId  = document.getElementById('cinemaRoomSelect').value;
            if (!movieId || !cinemaRoomId || !showDateIso) {
                showNotification('Vui lòng chọn phim, phòng chiếu và ngày','warning');
                return;
            }

            // 6. Build payload và gửi lên server
            const formData = {
                movieId,
                cinemaRoomId,
                showDate: showDateIso,
                startTime,
                endTime,
                price: parseFloat(document.getElementById('price').value) || 0,
                isActive: document.getElementById('isActive').checked
            };

            try {
                const response = await fetch(`${apiBaseUrl}/api/v1/showtime/create-new`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const text = await response.text();
                let result;
                try { result = JSON.parse(text); } catch { result = { message: text }; }

                const ok = response.ok || result.code === 200 || result.success === true;
                if (ok) {
                    showNotification('Tạo lịch chiếu mới thành công!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createNewShowtimeModal')).hide();
                    document.getElementById('createNewShowtimeForm').reset();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification('Lỗi khi tạo lịch chiếu: ' + (result.message || 'Unknown error'), 'danger');
                }
            } catch (err) {
                console.error('Error saving new showtime:', err);
                showNotification('Lỗi khi lưu lịch chiếu mới', 'danger');
            }
        }


               function openFilterModal() {
                   showNotification('Chức năng lọc đang được phát triển', 'info');
               }

               function exportShowtimes() {
                   showNotification('Đang xuất dữ liệu...', 'info');
               }


               function viewShowtime(id) {
                   showNotification(`Xem chi tiết lịch chiếu ID: ${id}`, 'info');
               }

               function editShowtime(id) {
                   showNotification(`Chỉnh sửa lịch chiếu ID: ${id}`, 'info');
               }

               function deleteShowtime(id) {
                   if (confirm('Bạn có chắc chắn muốn xóa lịch chiếu này?')) {
                       showNotification(`Đã xóa lịch chiếu ID: ${id}`, 'success');
                   }
               }

               function bulkDeleteShowtimes() {
                   const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
                   if (checkedBoxes.length === 0) {
                       showNotification('Vui lòng chọn ít nhất một lịch chiếu để xóa', 'warning');
                       return;
                   }

                   if (confirm(`Bạn có chắc chắn muốn xóa ${checkedBoxes.length} lịch chiếu đã chọn?`)) {
                       showNotification(`Đã xóa ${checkedBoxes.length} lịch chiếu`, 'success');
                       checkedBoxes.forEach(checkbox => {
                           checkbox.closest('tr').remove();
                       });
                       updateBulkActionButtons();
                   }
               }

               function bulkUpdateStatus() {
                   const checkedBoxes = document.querySelectorAll('tbody input[type="checkbox"]:checked');
                   if (checkedBoxes.length === 0) {
                       showNotification('Vui lòng chọn ít nhất một lịch chiếu để cập nhật', 'warning');
                       return;
                   }

                   showNotification(`Đã cập nhật trạng thái cho ${checkedBoxes.length} lịch chiếu`, 'success');
               }


               function showNotification(message, type = 'info') {
                   const notification = document.createElement('div');
                   notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
                   notification.style.cssText = `
                       top: 20px;
                       right: 20px;
                       z-index: 10000;
                       min-width: 300px;
                       box-shadow: var(--shadow-lg);
                       border: none;
                       border-radius: 12px;
                   `;

                   const icon = type === 'success' ? 'check-circle' :
                               type === 'warning' ? 'exclamation-triangle' :
                               type === 'danger' ? 'times-circle' : 'info-circle';

                   notification.innerHTML = `
                       <div class="d-flex align-items-center">
                           <i class="fas fa-${icon} me-2"></i>
                           ${message}
                       </div>
                       <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                   `;

                   document.body.appendChild(notification);

                   setTimeout(() => {
                       notification.remove();
                   }, 5000);
               }


               let currentDate = new Date();
               let currentShowtimeId = null;
               let showtimeData = @Html.Raw(Json.Serialize(Model.Showtimes ?? new List<UI.Areas.ShowtimeManagement.Models.ShowtimeDto>()));

               function switchView(viewType) {
                   const calendarView = document.getElementById('calendarView');
                   const tableView = document.getElementById('tableView');
                   const toggleBtns = document.querySelectorAll('.view-toggle-btn');

                   toggleBtns.forEach(btn => btn.classList.remove('active'));

                   if (viewType === 'calendar') {
                       calendarView.classList.add('active');
                       tableView.classList.remove('active');
                       document.querySelector('[onclick="switchView(\'calendar\')"]').classList.add('active');
                       // Load dữ liệu tháng hiện tại sau đó render lịch
                       loadMonthlyData().then(generateCalendar);
                           } else {
                       calendarView.classList.remove('active');
                       tableView.classList.add('active');
                       document.querySelector('[onclick="switchView(\'table\')"]').classList.add('active');
                       loadShowtimesTable(1);
                   }
               }

               async function changeMonth(direction) {
                   currentDate.setMonth(currentDate.getMonth() + direction);
                   await loadMonthlyData();
                   generateCalendar();
               }

               async function loadMonthlyData() {
                   try {
                       const month = currentDate.getMonth() + 1;
                       const year = currentDate.getFullYear();

                       showLoadingOverlay(true);

                       const response = await fetch(`/ShowtimeManagement/Showtimes/GetMonthlyData?month=${month}&year=${year}`);
                       const result = await response.json();

                       if (result.success) {
                           showtimeData = result.data || [];
                       } else {
                           console.error('Failed to load monthly data:', result.message);
                           showNotification('Không thể tải dữ liệu lịch chiếu', 'error');
                           showtimeData = [];
                       }
                   } catch (error) {
                       console.error('Error loading monthly data:', error);
                       showNotification('Lỗi khi tải dữ liệu', 'error');
                       showtimeData = [];
                   } finally {
                       showLoadingOverlay(false);
                   }
               }

               function showLoadingOverlay(show) {
                   const container = document.querySelector('.calendar-container');
                   let overlay = container.querySelector('.loading-overlay');

                   if (show) {
                       if (!overlay) {
                           overlay = document.createElement('div');
                           overlay.className = 'loading-overlay';
                           overlay.innerHTML = '<i class="fas fa-spinner fa-spin loading-spinner-small"></i>';
                           container.appendChild(overlay);
                       }
                       overlay.style.display = 'flex';
                   } else {
                       if (overlay) {
                           overlay.style.display = 'none';
                       }
                   }
               }

               function generateCalendar() {
                   const year = currentDate.getFullYear();
                   const month = currentDate.getMonth();
                   const firstDay = new Date(year, month, 1);
                   const lastDay = new Date(year, month + 1, 0);
                   const firstDayOfWeek = (firstDay.getDay() + 6) % 7; // Convert to Monday = 0


                   const monthNames = ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
                                     'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'];
                   document.getElementById('calendarTitle').textContent = `${monthNames[month]}/${year}`;

                   const calendarGrid = document.getElementById('calendarGrid');


                   const existingDays = calendarGrid.querySelectorAll('.calendar-day');
                   existingDays.forEach(day => day.remove());


                   let dayCount = 1;
                   for (let week = 0; week < 6; week++) {
                       for (let day = 0; day < 7; day++) {
                           const dayElement = document.createElement('div');
                           dayElement.className = 'calendar-day';

                           const dayIndex = week * 7 + day;

                           if (dayIndex < firstDayOfWeek) {

                               const prevMonthDay = new Date(year, month, -(firstDayOfWeek - dayIndex - 1));
                               dayElement.classList.add('other-month');
                               dayElement.innerHTML = `<div class="calendar-day-number">${prevMonthDay.getDate()}</div>`;
                           } else if (dayCount <= lastDay.getDate()) {

                               const currentDay = new Date(year, month, dayCount);
                               const isToday = currentDay.toDateString() === new Date().toDateString();

                               if (isToday) {
                                   dayElement.classList.add('today');
                               }

                               dayElement.innerHTML = `
                                   <div class="calendar-day-number">${dayCount}</div>
                                   <div class="calendar-showtimes" id="day-${year}-${month}-${dayCount}">
                                       ${generateShowtimesForDay(currentDay)}
                                   </div>
                               `;
                               dayCount++;
                           } else {

                               const nextMonthDay = dayCount - lastDay.getDate();
                               dayElement.classList.add('other-month');
                               dayElement.innerHTML = `<div class="calendar-day-number">${nextMonthDay}</div>`;
                               dayCount++;
                           }

                           calendarGrid.appendChild(dayElement);
                       }

                       if (dayCount > lastDay.getDate() && week < 5) {
                           break;
                       }
                   }
                   // Khởi tạo tooltip cho các item vừa render
                   initializeShowtimeTooltips();
               }

                       function generateShowtimesForDay(date) {
            // Lấy ngày theo giờ local, format "YYYY-MM-DD"
            const y = date.getFullYear();
            const m = String(date.getMonth() + 1).padStart(2, '0');
            const d = String(date.getDate()).padStart(2, '0');
            const dateStr = `${y}-${m}-${d}`;   // "YYYY-MM-DD"

            // 1. Lọc showtimes trùng ngày
            let dayShowtimes = showtimeData.filter(st => {
                // st.showDate format: "YYYY-MM-DDTHH:mm:ss"
                return (st.showDate || '').startsWith(dateStr);
            });

            // 2. Sort theo startTime tăng dần
            dayShowtimes.sort((a, b) => a.startTime.localeCompare(b.startTime));

            // 3. Render ra HTML
            return dayShowtimes.map(showtime => {
                const posterUrl = showtime.moviePoster?.trim()
                    ? showtime.moviePoster
                    : '/images/default-movie-poster.jpg';

                return `
                    <div class="calendar-showtime-item" onclick="showShowtimeDetail('${showtime.id}')"
                         data-movie-id="${showtime.movieId || ''}"
                         data-movie-title="${(showtime.movieTitle || '').toLowerCase()}"
                         data-bs-toggle="tooltip" data-bs-html="true"
                         data-poster="${posterUrl}"
                         title="<img src='${posterUrl}' width='140' height='200' style='object-fit:cover;border-radius:6px;'>">
                        <span class="calendar-showtime-title">${showtime.movieTitle}</span>
                        <span class="calendar-showtime-time">${formatTime(showtime.startTime)}</span>
                    </div>
                `;
            }).join('');
        }


               function formatTime(timeSpan) {

                   return timeSpan.substring(0, 5);
               }

               function showShowtimeDetail(showtimeId) {
                   const showtime = showtimeData.find(st => st.id === showtimeId);
                   if (!showtime) return;

                   currentShowtimeId = showtimeId;

                   const modalBody = document.getElementById('showtimeDetailBody');
                   modalBody.innerHTML = `
                       <div class="showtime-detail-header">
                           <img src="${showtime.moviePoster || '/images/no-poster.jpg'}"
                                alt="${showtime.movieTitle}"
                                class="showtime-detail-poster"
                                onerror="this.src='/images/no-poster.jpg'">
                           <div class="showtime-detail-info">
                               <h3>${showtime.movieTitle}</h3>
                               <p class="text-muted">Thời lượng: ${showtime.movieDuration} phút</p>
                               <div class="showtime-detail-meta">
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-calendar"></i>
                                       <div>
                                           <strong>Ngày chiếu:</strong><br>
                                           ${new Date(showtime.showDate).toLocaleDateString('vi-VN')}
                                       </div>
                                   </div>
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-clock"></i>
                                       <div>
                                           <strong>Giờ chiếu:</strong><br>
                                           ${formatTime(showtime.startTime)}
                                       </div>
                                   </div>
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-door-open"></i>
                                       <div>
                                           <strong>Phòng chiếu:</strong><br>
                                           ${showtime.cinemaRoomName}
                                       </div>
                                   </div>
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-money-bill"></i>
                                       <div>
                                           <strong>Giá vé:</strong><br>
                                           ${showtime.price.toLocaleString('vi-VN')} VNĐ
                                       </div>
                                   </div>
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-users"></i>
                                       <div>
                                           <strong>Tình trạng vé:</strong><br>
                                           ${showtime.bookedSeats}/${showtime.totalSeats} vé đã đặt
                                       </div>
                                   </div>
                                   <div class="showtime-detail-item">
                                       <i class="fas fa-info-circle"></i>
                                       <div>
                                           <strong>Trạng thái:</strong><br>
                                           ${getStatusText(showtime.showDate)}
                                       </div>
                                   </div>
                               </div>
                           </div>
                       </div>
                   `;

                   const modal = new bootstrap.Modal(document.getElementById('showtimeDetailModal'));
                   modal.show();
               }

               function getStatusText(showDate) {
                   const today = new Date();
                   const showtimeDate = new Date(showDate);

                   if (showtimeDate.toDateString() === today.toDateString()) {
                       return 'Hôm nay';
                   } else if (showtimeDate < today) {
                       return 'Đã qua';
                   } else {
                       return 'Sắp tới';
                   }
               }

               function editCurrentShowtime() {
                   if (currentShowtimeId) {
                       editShowtime(currentShowtimeId);
                       bootstrap.Modal.getInstance(document.getElementById('showtimeDetailModal')).hide();
                   }
               }

               function deleteCurrentShowtime() {
                   if (currentShowtimeId) {
                       deleteShowtime(currentShowtimeId);
                       bootstrap.Modal.getInstance(document.getElementById('showtimeDetailModal')).hide();
                   }
               }

               // Tính giờ kết thúc dựa vào thời lượng phim & giờ bắt đầu
               function calculateEndTime() {
                   const movieSelect = document.getElementById('movieSelect');
                   const startTimeInput = document.getElementById('startTime');
                   const endTimeInput = document.getElementById('endTime');

                   if (!movieSelect || !startTimeInput || !endTimeInput) return;

                   const duration = parseInt(movieSelect.selectedOptions[0]?.dataset.duration || '0');
                   const startVal = startTimeInput.value;
                   if (!startVal) return;
                   if (!duration) {
                       showNotification('Phim chưa có thời lượng nên không tính được giờ kết thúc', 'warning');
                       return;
                   }

                   const [h, m] = startVal.split(':').map(Number);
                   if (isNaN(h) || isNaN(m)) return;

                   const startDate = new Date();
                   startDate.setHours(h, m, 0, 0);
                   const endDate = new Date(startDate.getTime() + duration * 60000);

                   const endHours = String(endDate.getHours()).padStart(2, '0');
                   const endMinutes = String(endDate.getMinutes()).padStart(2, '0');
                   endTimeInput.value = `${endHours}:${endMinutes}`;
               }

               // Lắng nghe thay đổi để cập nhật EndTime
               document.addEventListener('DOMContentLoaded', () => {
                   document.getElementById('movieSelect')?.addEventListener('change', calculateEndTime);
                   document.getElementById('startTime')?.addEventListener('change', calculateEndTime);
               });

                       async function autoCheckConflict() {
            // 1. Lấy rawDate và chuyển sang ISO YYYY-MM-DD
            const rawDate = document.getElementById('showDate').value;    // ví dụ "07/26/2025"
            let showDateIso = rawDate;
            if (rawDate.includes('/')) {
                const [mm, dd, yyyy] = rawDate.split('/');
                showDateIso = `${yyyy}-${mm.padStart(2,'0')}-${dd.padStart(2,'0')}`;
                // kết quả: "2025-07-26"
            }

            // 2. Lấy các trường còn lại
            const cinemaRoomId = document.getElementById('cinemaRoomSelect').value;
            let startTime = document.getElementById('startTime').value;
            let endTime   = document.getElementById('endTime').value;
            const fix = t => t && (t.length === 5 ? `${t}:00` : t);
            startTime = fix(startTime);
            endTime   = fix(endTime);

            // Nếu thiếu thông tin thì bỏ qua
            if (!cinemaRoomId || !showDateIso || !startTime || !endTime)
                return false;

            try {
                // 3. Gọi API với showDateIso thay vì rawDate
                const resp = await fetch(
                  `${apiBaseUrl}/api/v1/showtime/CheckConflict`
                  + `?cinemaRoomId=${cinemaRoomId}`
                  + `&showDate=${showDateIso}`
                  + `&startTime=${startTime}`
                  + `&endTime=${endTime}`
                );
                const result = await resp.json();

                // API trả về data = true nếu KHÔNG xung đột
                if (result.success && result.data === false) {
                    showNotification('Có xung đột lịch chiếu! Vui lòng chọn thời gian khác.', 'danger');
                    return true;
                }
            } catch (err) {
                console.error('Error auto checking conflict', err);
            }

            return false;
        }


               function clearCalendarHighlight() {
                   document.querySelectorAll('.calendar-showtime-item.selected-movie').forEach(el => el.classList.remove('selected-movie'));
               }

               function highlightMovieInCalendar(movieId) {
                   if (!movieId) return;
                   document.querySelectorAll(`.calendar-showtime-item[data-movie-id='${movieId}']`).forEach(el => el.classList.add('selected-movie'));
               }

               async function showMovieSuggestions(term) {
                   const container = document.getElementById('movieSearchResult');
                   if (!container) return;

                   if (!term) { hideMoviePreview(); clearCalendarHighlight(); return; }

                   container.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i></div>';
                   container.style.display = 'block';

                   try {
                       const resp = await fetch(`${apiBaseUrl}/api/v1/movie/Search?keyword=${encodeURIComponent(term)}`);
                       const result = await resp.json();
                       const movies = result.data || result || [];

                       if (!Array.isArray(movies) || !movies.length) {
                           container.innerHTML = '<span class="text-muted" style="font-size:12px;">Không tìm thấy phim</span>';
                           clearCalendarHighlight();
                           return;
                       }

                       // Chọn phim phù hợp nhất: ưu tiên khớp tên chính xác, kế tiếp là bắt đầu bằng từ khoá, sau đó lấy đầu tiên
                       const termLower = term.toLowerCase();
                       let chosen = movies.find(m => (m.title || '').toLowerCase() === termLower);
                       if (!chosen) {
                           chosen = movies.find(m => (m.title || '').toLowerCase().startsWith(termLower));
                       }
                       if (!chosen) {
                           chosen = movies[0];
                       }
                       selectMovieFromSearch(chosen.id, true);
                   } catch(err) {
                       console.error('Error searching movie', err);
                       container.innerHTML = '<span class="text-danger">Lỗi tìm kiếm phim</span>';
                   }
               }

               async function selectMovieFromSearch(movieId, auto = false) {
                   hideMoviePreview();
                   clearCalendarHighlight();
                   highlightMovieInCalendar(movieId);

                   const container = document.getElementById('movieSearchResult');
                   if (!container) return;

                   container.dataset.currentMovieId = movieId;

                   container.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i></div>';

                   try {
                       const resp = await fetch(`${apiBaseUrl}/api/v1/movie/GetById?movieId=${movieId}`);
                       const result = await resp.json();
                       const movie = result.data || result;

                       const poster = movie.primaryImageUrl || (Array.isArray(movie.images)? movie.images.find(i => i.isPrimary)?.imageUrl : null) || '/images/no-poster.jpg';
                       const title = movie.title || 'Không rõ tên';

                       // Lấy showtimes theo showtimeData của tháng hiện tại
                       const times = showtimeData
                           .filter(st => st.movieId === movieId)
                           .sort((a,b)=> new Date(a.showDate) - new Date(b.showDate) || a.startTime.localeCompare(b.startTime));

                       const timesHtml = times.length ?
                           '<ul style="list-style:none;padding-left:0;margin:6px 0 0 0;max-height:140px;overflow-y:auto;">' +
                           times.slice(0,20).map(t => `<li style="font-size:12px;">${new Date(t.showDate).toLocaleDateString('vi-VN')} ${formatTime(t.startTime)} - ${t.cinemaRoomName}</li>`).join('') +
                           '</ul>' : '<p class="text-muted mb-0" style="font-size:12px;">Không có lịch chiếu</p>';

                       container.innerHTML = `
                           <div class="d-flex gap-2 align-items-start movie-preview" style="display:flex;">
                               <img src="${poster}" alt="${title}" class="preview-poster" onerror="this.src='/images/no-poster.jpg'">
                               <div style="flex:1;">
                                   <strong>${title}</strong>
                                   ${timesHtml}
                               </div>
                           </div>`;
                       container.style.display = 'block';
                   } catch (err) {
                       console.error('Error preview movie', err);
                       container.innerHTML = '<span class="text-danger">Không thể tải thông tin phim</span>';
                   }
               }

               function hideMoviePreview() {
                   const container = document.getElementById('movieSearchResult');
                   if (container) container.style.display = 'none';
               }

               /*================ TABLE VIEW - PAGINATION ================*/
               let tablePageSize = 10;
               let currentTablePage = 1;
               let totalTablePages = 1;
               let totalItemsCount = 0;

               async function loadShowtimesTable(page = 1) {
                   const tbody = document.getElementById('showtimeTableBody');
                   if (!tbody) return;
                   tbody.innerHTML = `<tr><td colspan="10" class="text-center py-4"><i class="fas fa-spinner fa-spin"></i></td></tr>`;

                   try {
                       tablePageSize = parseInt(document.getElementById('pageSizeSelect')?.value || 10);
                       const resp = await fetch(`${apiBaseUrl}/api/v1/showtime?page=${page}&pageSize=${tablePageSize}`);
                       const result = await resp.json();
                       const data = result.data || result.Data || result;
                       const items = data.items || data.Items || data;
                       totalTablePages = data.totalPages || data.TotalPages || 1;
                       totalItemsCount = data.totalItems || data.TotalItems || 0;
                       currentTablePage = data.currentPage || data.CurrentPage || page;

                       if (!Array.isArray(items) || !items.length) {
                           tbody.innerHTML = `<tr><td colspan="10" class="text-center py-4 text-muted">Không có dữ liệu</td></tr>`;
                       } else {
                           tbody.innerHTML = items.map(renderTableRow).join('');
                       }

                       updatePaginationUI();
                   } catch(err) {
                       console.error('Error load table', err);
                       tbody.innerHTML = `<tr><td colspan="10" class="text-center text-danger">Lỗi tải dữ liệu</td></tr>`;
                   }
               }

               function renderTableRow(item) {
                   const poster = item.moviePoster || '/images/no-poster.jpg';
                   const occupancyRate = item.totalSeats ? (item.bookedSeats / item.totalSeats) * 100 : 0;
                   const occupancyText = occupancyRate >= 90 ? 'Hết vé' : occupancyRate >= 70 ? 'Sắp hết vé' : 'Còn vé';
                   const statusText = new Date(item.showDate).toDateString() === new Date().toDateString() ? 'Hôm nay' : (new Date(item.showDate) < new Date() ? 'Đã qua' : 'Sắp tới');

                   return `
                       <tr>
                           <td><input type="checkbox" value="${item.id}" onchange="updateBulkActionButtons()"></td>
                           <td>
                               <div class="d-flex gap-2 align-items-center movie-details">
                                   <img src="${poster}" alt="${item.movieTitle}" class="movie-poster" style="width:40px;height:60px;object-fit:cover;border-radius:4px;">
                                   <div>
                                       <h6 class="mb-0">${item.movieTitle}</h6>
                                       <small>${item.movieDuration} phút</small>
                                   </div>
                               </div>
                           </td>
                           <td>${item.cinemaRoomName}</td>
                           <td>${new Date(item.showDate).toLocaleDateString('vi-VN')}</td>
                           <td>${formatTime(item.startTime)}</td>
                           <td>${formatTime(item.endTime)}</td>
                           <td><span class="text-success fw-bold">${(item.price || 0).toLocaleString('vi-VN')} VNĐ</span></td>
                           <td>${statusText}</td>
                           <td>${item.bookedSeats}/${item.totalSeats} vé (${Math.round(occupancyRate)}%)</td>
                           <td><!-- actions placeholder --></td>
                       </tr>`;
               }

               function updatePaginationUI() {
                   // Info text
                   const infoEl = document.getElementById('paginationInfo');
                   if (infoEl) {
                       const startItem = totalItemsCount === 0 ? 0 : (currentTablePage - 1) * tablePageSize + 1;
                       const endItem = Math.min(currentTablePage * tablePageSize, totalItemsCount);
                       infoEl.textContent = `Trang ${currentTablePage}/${totalTablePages} (Hiển thị ${startItem}-${endItem} của ${totalItemsCount})`;
                   }

                   // Prev/next buttons
                   document.getElementById('prevPageBtn')?.toggleAttribute('disabled', currentTablePage <= 1);
                   document.getElementById('nextPageBtn')?.toggleAttribute('disabled', currentTablePage >= totalTablePages);

                   // Page numbers
                   const pagesWrapper = document.getElementById('pageNumbers');
                   if (!pagesWrapper) return;
                   pagesWrapper.innerHTML = '';
                   for (let i = 1; i <= totalTablePages; i++) {
                       const el = document.createElement('div');
                       el.className = 'page-number' + (i === currentTablePage ? ' active' : '');
                       el.textContent = i;
                       el.onclick = () => loadShowtimesTable(i);
                       pagesWrapper.appendChild(el);
                   }
               }

               function changePageSize() {
                   currentTablePage = 1;
                   loadShowtimesTable(1);
               }

        /*============== END TABLE PAGINATION =============*/


               document.addEventListener('DOMContentLoaded', function() {
                   console.log('Showtime Management Dashboard loaded');
                   // Load dữ liệu tháng hiện tại sau đó render lịch
                   loadMonthlyData().then(generateCalendar);

                   // Gắn submit handler cho form tạo lịch chiếu mới
                   const form = document.getElementById('createNewShowtimeForm');
                   if (form) {
                       form.addEventListener('submit', function (e) {
                           e.preventDefault(); // Ngăn reload trang
                           form.classList.add('was-validated');
                           saveNewShowtime(); // Gọi hàm lưu
                       });
                   }
               });

               function initializeShowtimeTooltips() {
                   const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                   tooltipTriggerList.map(el => new bootstrap.Tooltip(el));
               }

    </script>
    
    
    
</body>
</html>