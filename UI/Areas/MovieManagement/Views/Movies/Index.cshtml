@{
    ViewData["Title"] = "Quản lý phim - Cinema City";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- Homepage Base CSS for Footer -->
    <link rel="stylesheet" href="~/css/HomePage/base.css" />
    <!-- Dashboard CSS -->
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <!-- Shared Footer CSS -->
    <link rel="stylesheet" href="~/css/shared-footer.css" />
    
    <style>
        /* Page content styles only - no header overrides */
        html, body {
            background: #0a0a0a;
            color: #fff;
            font-family: 'Inter', sans-serif;
            margin: 0 !important;
            padding: 0 !important;
        }
        
        .cinema-movie-management {
            background: #0a0a0a;
            min-height: calc(100vh - 80px);
            padding-top: 0;
            display: flex;
            flex-direction: column;
        }
        
        .management-content {
            padding: 20px 0;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .page-header {
            background: linear-gradient(135deg, #df2144 0%, #ff1e2b 100%);
            padding: 60px 0;
            margin-bottom: 30px;
            margin-top: 0;
            position: relative;
            overflow: hidden;
        }
        
        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
            pointer-events: none;
        }
        
        .page-header h1 {
            color: #fff;
            font-size: 3rem;
            font-weight: 800;
            margin: 0;
            text-align: center;
            font-family: 'Inter', sans-serif;
            position: relative;
            z-index: 2;
        }
        
        .page-header .breadcrumb {
            justify-content: center;
            background: transparent;
            margin-top: 20px;
            position: relative;
            z-index: 2;
        }
        
        .page-header .breadcrumb-item {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .page-header .breadcrumb-item + .breadcrumb-item::before {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .page-header .breadcrumb-item.active {
            color: #fff;
            font-weight: 600;
        }
        
        .page-header .breadcrumb-item a {
            text-decoration: none;
            transition: color 0.3s ease;
        }
        
        .page-header .breadcrumb-item a:hover {
            color: rgba(255, 255, 255, 1);
        }
        
        /* Movie management content styles */
        .controls-section {
            background: rgba(42, 42, 42, 0.9) !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            border-radius: 16px !important;
            padding: 32px !important;
            margin-bottom: 40px !important;
            backdrop-filter: blur(20px) !important;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
        }

        .controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 2rem;
            flex-wrap: wrap;
        }

        .search-box {
            position: relative;
            flex: 1;
            min-width: 300px;
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.6);
            z-index: 2;
        }
        
        .search-input {
            width: 100%;
            font-size: 16px !important;
            padding: 16px 20px 16px 50px !important;
            border-radius: 12px !important;
            background: rgba(255, 255, 255, 0.08) !important;
            border: 2px solid rgba(255, 255, 255, 0.1) !important;
            color: white;
            transition: all 0.3s ease;
        }
        
        .search-input:focus {
            border-color: rgba(223, 33, 68, 0.6) !important;
            box-shadow: 0 0 0 4px rgba(223, 33, 68, 0.2) !important;
            background: rgba(255, 255, 255, 0.12) !important;
            outline: none;
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        
        .btn-add-movie {
            background: linear-gradient(135deg, #df2144, #ff4466);
            border: none;
            color: white;
            font-size: 16px !important;
            padding: 16px 32px !important;
            border-radius: 12px !important;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(223, 33, 68, 0.3) !important;
            white-space: nowrap;
        }
        
        .btn-add-movie:hover {
            transform: translateY(-3px) !important;
            box-shadow: 0 12px 35px rgba(223, 33, 68, 0.5) !important;
        }
        
        .movie-table-container {
            background: rgba(42, 42, 42, 0.9) !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            border-radius: 20px !important;
            overflow: hidden !important;
            backdrop-filter: blur(20px) !important;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
        }

        .movie-table {
            width: 100%;
            border-collapse: collapse;
            color: white;
        }

        .movie-table th {
            background: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .movie-table td {
            padding: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            vertical-align: middle;
        }

        .movie-table tr:hover {
            background: rgba(255, 255, 255, 0.02);
        }

        .movie-poster {
            width: 60px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .movie-info {
            max-width: 200px;
        }

        .movie-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: white;
        }

        .movie-studio {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .genre-tag {
            background: rgba(223, 33, 68, 0.2);
            color: #df2144;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-dropdown {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 8px 12px;
            color: white;
            font-size: 0.85rem;
        }

        .status-dropdown:focus {
            border-color: #df2144;
            outline: none;
        }

        .status-dropdown option {
            background: #2a2a2a;
            color: white;
        }

        .toggle-switch {
            width: 50px;
            height: 24px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toggle-switch::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            top: 2px;
            left: 2px;
            transition: all 0.3s ease;
        }

        .toggle-switch.active {
            background: #df2144;
        }

        .toggle-switch.active::before {
            transform: translateX(26px);
        }

        .rating-input {
            width: 70px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 6px;
            color: white;
            text-align: center;
        }

        .rating-input:focus {
            border-color: #df2144;
            outline: none;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-action {
            width: 36px;
            height: 36px;
            border: none;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .btn-view {
            background: rgba(52, 152, 219, 0.2);
            color: #3498db;
        }

        .btn-view:hover {
            background: #3498db;
            color: white;
        }

        .btn-edit {
            background: rgba(241, 196, 15, 0.2);
            color: #f1c40f;
        }

        .btn-edit:hover {
            background: #f1c40f;
            color: #333;
        }

        .btn-delete {
            background: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
        }

        .btn-delete:hover {
            background: #e74c3c;
            color: white;
        }

        .loading-spinner {
            text-align: center;
            padding: 40px;
            color: rgba(255, 255, 255, 0.6);
        }

        .loading-spinner i {
            font-size: 24px;
            margin-bottom: 10px;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: linear-gradient(135deg, #2a2a2a 0%, #3a3a3a 100%);
            margin: 5% auto;
            padding: 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            width: 90%;
            max-width: 800px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
            color: white;
            overflow: hidden;
        }

        .modal-header {
            background: linear-gradient(135deg, #df2144, #ff4466);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .modal-close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }

        .modal-close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 30px;
            max-height: 70vh;
            overflow-y: auto;
        }

        /* Footer styling override */
        .cinema-footer {
            margin-top: auto !important;
            position: relative !important;
            clear: both;
            width: 100% !important;
            flex-shrink: 0 !important;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .controls-header {
                flex-direction: column;
                gap: 1rem;
            }

            .search-box {
                min-width: auto;
            }

            .page-header h1 {
                font-size: 2rem;
            }

            .movie-table {
                font-size: 0.85rem;
            }

            .movie-table th,
            .movie-table td {
                padding: 10px 8px;
            }
        }
    </style>
</head>
<body>
    <div class="cinema-movie-management">
                @{
            ViewBag.CurrentPage = "MovieManagement";
        }
        
        <!-- Header - Unified Dashboard Style -->
        @Html.Partial("_DashboardHeader")
        
        <!-- Page Header -->
        <div class="page-header">
            <div class="container">
                <h1 id="movieListTitle"><i class="fas fa-film me-3"></i>Quản lý phim</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/" style="color: rgba(255, 255, 255, 0.8);">
                                <i class="fas fa-home"></i> Trang chủ
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/Dashboard" style="color: rgba(255, 255, 255, 0.8);">
                                Dashboard
                            </a>
                        </li>
                        <li class="breadcrumb-item active">Quản lý phim</li>
                    </ol>
                </nav>
                        </div>
                </div>

    <!-- Main Content -->
        <div class="management-content">
            <div class="container-fluid px-4">


        <!-- Controls Section -->
        <div class="controls-section">
            <div class="controls-header">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="search-input" placeholder="Tìm kiếm phim theo tên..." id="movieSearch">
                </div>
                <button class="btn-add-movie" onclick="openAddMovieModal()">
                        <i class="fas fa-plus"></i>
                        Thêm phim mới
                    </button>
                </div>
            </div>

        <!-- Movies Table -->
        <div class="movie-table-container">
            <table class="movie-table">
                <thead>
                    <tr>
                        <th>POSTER</th>
                        <th>THÔNG TIN PHIM</th>
                        <th>THỂ LOẠI</th>
                        <th>NGÀY PHÁT HÀNH</th>
                        <th>THỜI LƯỢNG</th>
                        <th>TRẠNG THÁI</th>
                        <th>PHIM NỔI BẬT</th>
                        <th>PHIM ĐỀ XUẤT</th>
                        <th>RATING</th>
                        <th>HÀNH ĐỘNG</th>
                    </tr>
                </thead>
                <tbody id="movieTableBody">
                    <tr>
                        <td colspan="10" class="loading-spinner">
                            <i class="fas fa-spinner fa-spin"></i>
                            <p>Đang tải dữ liệu...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
                    </div>
                    </div>
                </div>
                
<!-- Anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

<!-- Movie Detail Modal -->
<div id="movieDetailModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Chi tiết phim</h3>
            <span class="modal-close" onclick="closeModal('movieDetailModal')">&times;</span>
                    </div>
        <div class="modal-body">
            <!-- Content will be populated by JavaScript -->
                </div>
                    </div>
                </div>
                
<!-- Edit Movie Modal -->
<div id="editMovieModal" class="modal">
    <div class="modal-content modal-large">
        <div class="modal-header">
            <h3>Chỉnh sửa phim</h3>
            <span class="modal-close" onclick="closeModal('editMovieModal')">&times;</span>
                    </div>
        <div class="modal-body">
            <!-- Content will be populated by JavaScript -->
                </div>
            </div>
                </div>
            </div>

            </div>
        </div>
        
        <!-- Footer -->
        @await Html.PartialAsync("footer")
                        
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    <!-- Anti-forgery token for AJAX requests -->
    @Html.AntiForgeryToken()
    
    <script>
        // API Base URL
        const API_BASE = '/api/v1';
        let movies = [];

        // Load movies on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadMovies();
            
            // Add event listeners for toggle switches
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('toggle-switch')) {
                    const movieId = e.target.getAttribute('data-movie-id');
                    const currentState = e.target.getAttribute('data-current-state') === 'true';
                    const type = e.target.getAttribute('data-type');
                    
                    if (type === 'featured') {
                        toggleFeatured(movieId, !currentState);
                    } else if (type === 'recommended') {
                        toggleRecommended(movieId, !currentState);
                    }
                }
            });
        });

        // Load movies from pagination API using controller
        async function loadMovies() {
            try {
                console.log('Loading movies through controller...');
                
                // Call controller endpoint that uses ApiService
                const response = await fetch('/MovieManagement/Movies/GetMoviesPagination?page=1&pageSize=100');
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Controller Response:', data);
                    
                    if (data.success && data.data) {
                        movies = data.data;
                        console.log(`Successfully loaded ${movies.length} movies`);
                    } else {
                        console.error('Controller returned error:', data.message);
                        movies = [];
                    }
                    
                    updateMovieHeader();
                    renderMovies();
                } else {
                    console.error('Controller Error:', response.status);
                    showEmptyState('Không thể tải dữ liệu phim. Vui lòng thử lại.');
                }
                
            } catch (error) {
                console.error('Error loading movies:', error);
                showEmptyState('Không thể tải dữ liệu phim. Vui lòng thử lại.');
            }
        }

        // Update movie header with count - exactly like the image
        function updateMovieHeader() {
            const movieCount = movies.length;
            const headerTitle = document.getElementById('movieListTitle');
            headerTitle.innerHTML = `<i class="fas fa-film me-2"></i>Danh sách phim (${movieCount} phim)`;
            
            // Debug log
            console.log(`Loaded ${movieCount} movies successfully`);
        }

        // Render movies table
        function renderMovies() {
            const tbody = document.getElementById('movieTableBody');
            
            if (movies.length === 0) {
                showEmptyState();
                return;
            }
            
            tbody.innerHTML = movies.map(movie => {
                const statusText = getStatusText(movie.status);
                const genresText = Array.isArray(movie.genres) && movie.genres.length > 0 
                    ? movie.genres.join(', ') 
                    : 'Chưa phân loại';
                
                return `
                <tr data-movie-id="${movie.id}">
                    <td>
                        <img src="${movie.posterUrl || '/images/placeholder-movie.jpg'}" 
                             alt="${movie.title}" 
                             class="movie-poster"
                                                     onerror="this.src='/images/placeholder-movie.jpg'">
                                        </td>
                    <td>
                        <div class="movie-info">
                            <div class="movie-title">${movie.title || 'N/A'}</div>
                            <div class="movie-studio">${movie.productionCompany || 'Chưa có thông tin'}</div>
                                            </div>
                                        </td>
                    <td>
                        <div class="movie-genres">
                            <span class="genre-tag">${genresText}</span>
                                                </div>
                                        </td>
                    <td>${movie.releaseDate ? new Date(movie.releaseDate).toLocaleDateString('vi-VN') : 'N/A'}</td>
                    <td>${movie.runningTime ? movie.runningTime + ' phút' : 'N/A'}</td>
                    <td>
                        <select class="status-dropdown" onchange="changeMovieStatus('${movie.id}', this.value)">
                            <option value="2" ${movie.status === 2 ? 'selected' : ''}>Đang chiếu</option>
                            <option value="1" ${movie.status === 1 ? 'selected' : ''}>Sắp chiếu</option>
                            <option value="3" ${movie.status === 3 ? 'selected' : ''}>Ngừng chiếu</option>
                            <option value="0" ${movie.status === 0 ? 'selected' : ''}>Chưa có</option>
                        </select>
                                        </td>
                    <td>
                        <button class="toggle-switch ${movie.isFeatured ? 'active' : ''}" 
                                data-movie-id="${movie.id}" 
                                data-current-state="${movie.isFeatured}" 
                                data-type="featured">
                        </button>
                                        </td>
                    <td>
                        <button class="toggle-switch ${movie.isRecommended ? 'active' : ''}" 
                                data-movie-id="${movie.id}" 
                                data-current-state="${movie.isRecommended}" 
                                data-type="recommended">
                        </button>
                                        </td>
                    <td>
                        <input type="number" class="rating-input" 
                               value="${movie.rating || 0}" 
                               min="0" max="10" step="0.1"
                               onchange="updateRating('${movie.id}', this.value)">
                                        </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-action btn-view" title="Xem chi tiết" onclick="viewMovie('${movie.id}')">
                                                    <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn-action btn-edit" title="Chỉnh sửa" onclick="editMovie('${movie.id}')">
                                                    <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-action btn-delete" title="Xóa" onclick="deleteMovie('${movie.id}')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
            `;
            }).join('');
        }

        // Helper function to get status text
        function getStatusText(status) {
            switch(status) {
                case 2: return 'Đang chiếu';    // NowShowing
                case 1: return 'Sắp chiếu';     // ComingSoon
                case 3: return 'Ngừng chiếu';   // Stopped
                case 0: return 'Chưa có';       // NotAvailable
                default: return 'Không xác định';
            }
        }

        // Action functions 
        async function changeMovieStatus(movieId, status) {
            try {
                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                
                const response = await fetch(`/MovieManagement/Movies/ChangeMovieStatus?movieId=${movieId}&status=${status}`, {
                    method: 'PATCH',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    // Update the movie in local array
                    const movie = movies.find(m => m.id === movieId);
                    if (movie) {
                        movie.status = parseInt(status);
                    }
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error changing status:', error);
                showNotification('Đã xảy ra lỗi khi cập nhật trạng thái', 'error');
            }
        }

        async function toggleFeatured(movieId, isFeatured) {
            try {
                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                
                const response = await fetch(`/MovieManagement/Movies/SetFeatured?movieId=${movieId}&isFeatured=${isFeatured}`, {
                    method: 'PATCH',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    // Update the movie in local array
                    const movie = movies.find(m => m.id === movieId);
                    if (movie) {
                        movie.isFeatured = isFeatured;
                    }
                    // Update the toggle button
                    const toggleBtn = document.querySelector(`button[data-movie-id="${movieId}"][data-type="featured"]`);
                    if (toggleBtn) {
                        toggleBtn.className = `toggle-switch ${isFeatured ? 'active' : ''}`;
                        toggleBtn.setAttribute('data-current-state', isFeatured);
                    }
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error toggling featured:', error);
                showNotification('Đã xảy ra lỗi khi cập nhật trạng thái nổi bật', 'error');
            }
        }

        async function toggleRecommended(movieId, isRecommended) {
            try {
                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                
                const response = await fetch(`/MovieManagement/Movies/SetRecommended?movieId=${movieId}&isRecommended=${isRecommended}`, {
                    method: 'PATCH',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    // Update the movie in local array
                    const movie = movies.find(m => m.id === movieId);
                    if (movie) {
                        movie.isRecommended = isRecommended;
                    }
                    // Update the toggle button
                    const toggleBtn = document.querySelector(`button[data-movie-id="${movieId}"][data-type="recommended"]`);
                    if (toggleBtn) {
                        toggleBtn.className = `toggle-switch ${isRecommended ? 'active' : ''}`;
                        toggleBtn.setAttribute('data-current-state', isRecommended);
                    }
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error toggling recommended:', error);
                showNotification('Đã xảy ra lỗi khi cập nhật trạng thái đề xuất', 'error');
            }
        }

        async function updateRating(movieId, rating) {
            try {
                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                
                const response = await fetch(`/MovieManagement/Movies/UpdateRating?movieId=${movieId}&rating=${rating}`, {
                    method: 'PATCH',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    // Update the movie in local array
                    const movie = movies.find(m => m.id === movieId);
                    if (movie) {
                        movie.rating = parseFloat(rating);
                    }
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error updating rating:', error);
                showNotification('Đã xảy ra lỗi khi cập nhật rating', 'error');
            }
        }

        async function viewMovie(movieId) {
            try {
                const response = await fetch(`/MovieManagement/Movies/GetMovieById?movieId=${movieId}`);
                const result = await response.json();
                
                console.log('View Movie API Response:', result); // Debug log
                
                if (result.success) {
                    // Check if data is nested under .data property
                    const movieData = result.data?.data || result.data;
                    console.log('Movie Data for View:', movieData); // Debug log
                    
                    if (movieData) {
                        showMovieDetailModal(movieData);
                    } else {
                        showNotification('Không có dữ liệu phim', 'error');
                    }
                } else {
                    showNotification('Không thể tải thông tin phim', 'error');
                }
            } catch (error) {
                console.error('Error loading movie details:', error);
                showNotification('Đã xảy ra lỗi khi tải thông tin phim', 'error');
            }
        }

        async function editMovie(movieId) {
            try {
                const response = await fetch(`/MovieManagement/Movies/GetMovieById?movieId=${movieId}`);
                const result = await response.json();
                
                console.log('Edit Movie API Response:', result); // Debug log
                
                if (result.success) {
                    // Check if data is nested under .data property
                    const movieData = result.data?.data || result.data;
                    console.log('Movie Data for Edit:', movieData); // Debug log
                    
                    if (movieData) {
                        showEditMovieModal(movieData);
                    } else {
                        showNotification('Không có dữ liệu phim để chỉnh sửa', 'error');
                    }
                } else {
                    showNotification('Không thể tải thông tin phim để chỉnh sửa', 'error');
                }
            } catch (error) {
                console.error('Error loading movie for edit:', error);
                showNotification('Đã xảy ra lỗi khi tải thông tin phim', 'error');
            }
        }

        function deleteMovie(movieId) {
            console.log(`Deleting movie ${movieId}`);
            // TODO: Implement delete movie functionality if needed
        }

        // Notification function
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                <span>${message}</span>
                <button onclick="this.parentElement.remove()" class="notification-close">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Show empty state
        function showEmptyState(message = 'Chưa có phim nào trong hệ thống') {
            const tbody = document.getElementById('movieTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="10" class="empty-state">
                        <i class="fas fa-film"></i>
                        <h3>Không có dữ liệu</h3>
                        <p>${message}</p>
                    </td>
                </tr>
            `;
        }

        function openAddMovieModal() {
            alert('Chức năng thêm phim sẽ được triển khai sau');
        }

        // Modal functions
        function showMovieDetailModal(movieData) {
            console.log('Showing detail modal with data:', movieData); // Debug log
            
            const modal = document.getElementById('movieDetailModal');
            const modalBody = modal.querySelector('.modal-body');
            
            // Handle different possible data structures
            const title = movieData.title || movieData.Title || 'Không có tiêu đề';
            const director = movieData.director || movieData.Director || 'N/A';
            const actors = movieData.actors || movieData.Actors || 'N/A';
            const productionCompany = movieData.productionCompany || movieData.ProductionCompany || 'N/A';
            const runningTime = movieData.runningTime || movieData.RunningTime || 'N/A';
            const releaseDate = movieData.releaseDate || movieData.ReleaseDate;
            const status = movieData.status || movieData.Status || 0;
            const rating = movieData.rating || movieData.Rating || 0;
            const content = movieData.content || movieData.Content || 'Chưa có mô tả';
            const trailerUrl = movieData.trailerUrl || movieData.TrailerUrl;
            const isFeatured = movieData.isFeatured || movieData.IsFeatured || false;
            const isRecommended = movieData.isRecommended || movieData.IsRecommended || false;
            
            // Get image URL
            const posterUrl = movieData.primaryImageUrl || movieData.PrimaryImageUrl || 
                              (movieData.images && movieData.images.length > 0 ? movieData.images[0].imageUrl : '') ||
                              (movieData.Images && movieData.Images.length > 0 ? movieData.Images[0].ImageUrl : '') ||
                              '/images/placeholder-movie.jpg';
            
            modalBody.innerHTML = `
                <div class="movie-detail-content">
                    <div class="movie-detail-header">
                        <img src="${posterUrl}" 
                             alt="${title}" class="movie-detail-poster"
                             onerror="this.src='/images/placeholder-movie.jpg'">
                        <div class="movie-detail-info">
                            <h2>${title}</h2>
                            <p><strong>Đạo diễn:</strong> ${director}</p>
                            <p><strong>Diễn viên:</strong> ${actors}</p>
                            <p><strong>Công ty sản xuất:</strong> ${productionCompany}</p>
                            <p><strong>Thời lượng:</strong> ${runningTime} phút</p>
                            <p><strong>Ngày phát hành:</strong> ${releaseDate ? new Date(releaseDate).toLocaleDateString('vi-VN') : 'N/A'}</p>
                            <p><strong>Trạng thái:</strong> <span class="status-badge status-${status}">${getStatusText(status)}</span></p>
                            <p><strong>Rating:</strong> ${rating}/10</p>
                            <div class="movie-tags">
                                ${isFeatured ? '<span class="tag featured">Nổi bật</span>' : ''}
                                ${isRecommended ? '<span class="tag recommended">Đề xuất</span>' : ''}
                                    </div>
                                </div>
                            </div>
                    <div class="movie-detail-description">
                        <h4>Mô tả</h4>
                        <p>${content}</p>
                    </div>
                    ${trailerUrl ? `
                        <div class="movie-detail-trailer">
                            <h4>Trailer</h4>
                            <a href="${trailerUrl}" target="_blank" class="trailer-link">
                                <i class="fas fa-play"></i> Xem trailer
                        </a>
                    </div>
                    ` : ''}
            </div>
            `;
            
            modal.style.display = 'block';
        }

        function showEditMovieModal(movieData) {
            console.log('Showing edit modal with data:', movieData); // Debug log
            
            const modal = document.getElementById('editMovieModal');
            const modalBody = modal.querySelector('.modal-body');
            
            // Store original movie data for update
            modal.setAttribute('data-movie-data', JSON.stringify(movieData));
            
            // Handle different possible data structures
            const id = movieData.id || movieData.Id || '';
            const title = movieData.title || movieData.Title || '';
            const director = movieData.director || movieData.Director || '';
            const actors = movieData.actors || movieData.Actors || '';
            const productionCompany = movieData.productionCompany || movieData.ProductionCompany || '';
            const runningTime = movieData.runningTime || movieData.RunningTime || '';
            const releaseDate = movieData.releaseDate || movieData.ReleaseDate;
            const endDate = movieData.endDate || movieData.EndDate;
            const rating = movieData.rating || movieData.Rating || 0;
            const content = movieData.content || movieData.Content || '';
            const trailerUrl = movieData.trailerUrl || movieData.TrailerUrl || '';
            const isFeatured = movieData.isFeatured || movieData.IsFeatured || false;
            const isRecommended = movieData.isRecommended || movieData.IsRecommended || false;
            const version = movieData.version || movieData.Version || '2D';
            
            // Get image URL
            const posterUrl = movieData.primaryImageUrl || movieData.PrimaryImageUrl || 
                              (movieData.images && movieData.images.length > 0 ? movieData.images[0].imageUrl : '') ||
                              (movieData.Images && movieData.Images.length > 0 ? movieData.Images[0].ImageUrl : '') ||
                              '';
            
            modalBody.innerHTML = `
                <form id="editMovieForm" onsubmit="updateMovie(event, '${id}')">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editTitle">Tên phim</label>
                            <input type="text" id="editTitle" name="title" value="${title}" required>
                        </div>
                        <div class="form-group">
                            <label for="editReleaseDate">Ngày phát hành</label>
                            <input type="date" id="editReleaseDate" name="releaseDate" 
                                   value="${releaseDate ? releaseDate.split('T')[0] : ''}">
                    </div>
                </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editEndDate">Ngày kết thúc</label>
                            <input type="date" id="editEndDate" name="endDate" 
                                   value="${endDate ? endDate.split('T')[0] : ''}">
                    </div>
                        <div class="form-group">
                            <label for="editProductionCompany">Hãng sản xuất</label>
                            <input type="text" id="editProductionCompany" name="productionCompany" value="${productionCompany}">
                    </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editDirector">Đạo diễn</label>
                            <input type="text" id="editDirector" name="director" value="${director}">
                </div>
                        <div class="form-group">
                            <label for="editActors">Diễn viên</label>
                            <input type="text" id="editActors" name="actors" value="${actors}">
            </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editRunningTime">Thời lượng (phút) *</label>
                            <input type="number" id="editRunningTime" name="runningTime" value="${runningTime}" min="1" required>
                </div>
                        <div class="form-group">
                            <label for="editVersion">Phiên bản *</label>
                            <select id="editVersion" name="version" required>
                                <option value="TwoD" ${(version === 1 || version === 'TwoD' || version === '2D') ? 'selected' : ''}>2D</option>
                                <option value="ThreeD" ${(version === 2 || version === 'ThreeD' || version === '3D') ? 'selected' : ''}>3D</option>
                                <option value="FourDX" ${(version === 3 || version === 'FourDX' || version === '4DX') ? 'selected' : ''}>4DX</option>
                            </select>
                    </div>
                </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editRating">Rating</label>
                            <input type="number" id="editRating" name="rating" value="${rating}" 
                                   min="0" max="10" step="0.1">
            </div>
                        <div class="form-group">
                            <!-- Empty space for layout balance -->
            </div>
        </div>
                    
                    <div class="form-group full-width">
                        <label for="editContent">Mô tả phim</label>
                        <textarea id="editContent" name="content" rows="4" placeholder="Mô tả nội dung phim...">${content}</textarea>
                </div>
                    
                    <!-- Genres Selection -->
                    <div class="form-group full-width">
                        <label for="editGenres">Thể loại phim *</label>
                        <div class="genres-selection">
                            <div id="genreCheckboxes" class="genre-checkboxes">
                                <!-- Will be populated dynamically -->
                </div>
                        </div>
                        <small class="text-muted">Chọn ít nhất một thể loại</small>
                    </div>
                    
                    <!-- Show Times Section -->
                    <div class="form-group full-width">
                        <label>Lịch chiếu</label>
                        <div class="showtimes-section">
                            <div class="showtimes-header">
                                <button type="button" class="btn-add-showtime" onclick="addShowTimeEntry()">
                                    ➕ Thêm lịch chiếu
                    </button>
                            </div>
                            <div id="showTimesContainer" class="showtimes-container">
                                <!-- Showtimes will be added here -->
                            </div>
                        </div>
                        <small class="text-muted">Thêm ít nhất một lịch chiếu</small>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="editTrailerUrl">Trailer</label>
                        <div class="trailer-upload-container">
                            <div class="upload-method-tabs">
                                <button type="button" class="tab-btn active" onclick="switchTrailerTab('url')">URL</button>
                                <button type="button" class="tab-btn" onclick="switchTrailerTab('upload')">Upload</button>
                            </div>
                            <div id="trailerUrlTab" class="upload-tab active">
                                <input type="url" id="editTrailerUrl" name="trailerUrl" value="${trailerUrl}" 
                                       placeholder="https://player.cloudinary.com/embed/?cloud_name=swp39imagel">
                            </div>
                            <div id="trailerUploadTab" class="upload-tab">
                                <input type="file" id="trailerFileInput" accept="video/*" style="display: none;">
                                <button type="button" class="btn-upload-file" onclick="document.getElementById('trailerFileInput').click()">
                                    📤 Chọn file video
                    </button>
                                <div id="trailerUploadProgress" class="upload-progress" style="display: none;">
                                    <div class="progress-bar"></div>
                                    <span class="progress-text">Đang upload...</span>
                </div>
                                <div id="trailerUploadResult" class="upload-result"></div>
            </div>
        </div>
                        <small class="text-muted">Hỗ trợ MP4, MOV, AVI, MKV, WEBM</small>
    </div>

                    <div class="form-group full-width">
                        <label>Hình ảnh phim</label>
                        
                        <!-- Poster chính -->
                        <div class="poster-upload-section">
                            <h4>Poster chính</h4>
                            <div class="image-upload-container">
                                <div class="upload-method-tabs">
                                    <button type="button" class="tab-btn active" onclick="switchPosterTab('url')">URL</button>
                                    <button type="button" class="tab-btn" onclick="switchPosterTab('upload')">Upload</button>
                                </div>
                                <div id="posterUrlTab" class="upload-tab active">
                                    <input type="url" id="editImageUrl" name="imageUrl" value="${posterUrl}" 
                                           placeholder="https://upload.wikimedia.org/wiki">
                                </div>
                                <div id="posterUploadTab" class="upload-tab">
                                    <input type="file" id="posterFileInput" accept="image/*" style="display: none;">
                                    <button type="button" class="btn-upload-file" onclick="document.getElementById('posterFileInput').click()">
                                        📤 Chọn hình ảnh
                                    </button>
                                    <div id="posterUploadProgress" class="upload-progress" style="display: none;">
                                        <div class="progress-bar"></div>
                                        <span class="progress-text">Đang upload...</span>
                                    </div>
                                </div>
                                <div class="image-preview">
                                    <img src="${posterUrl || '/images/placeholder-movie.jpg'}" 
                                         alt="Poster preview" class="poster-preview" id="posterPreview"
                                         onerror="this.src='/images/placeholder-movie.jpg'">
                                    <span class="poster-label">Poster chính</span>
                                    <div class="image-meta">
                                        <input type="text" id="posterDescription" name="posterDescription" placeholder="Mô tả hình ảnh..." class="image-description-input">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Hình ảnh bổ sung -->
                        <div class="additional-images-section">
                            <h4>Hình ảnh bổ sung</h4>
                            <div class="additional-images-upload">
                                <input type="file" id="additionalImagesInput" accept="image/*" multiple style="display: none;">
                                <button type="button" class="btn-upload-multiple" onclick="document.getElementById('additionalImagesInput').click()">
                                    📤 Thêm nhiều hình ảnh
                                </button>
                                <div id="additionalUploadProgress" class="upload-progress" style="display: none;">
                                    <div class="progress-bar"></div>
                                    <span class="progress-text">Đang upload...</span>
                                </div>
                            </div>
                            <div id="additionalImagesContainer" class="additional-images-grid">
                                <!-- Additional images will be populated here -->
                            </div>
                        </div>
                        
                        <small class="text-muted">Hỗ trợ PNG, JPG, JPEG, GIF, WEBP. Có thể upload nhiều hình cùng lúc.</small>
                    </div>
                    
                    <div class="form-row checkbox-row">
                        <div class="form-group">
                            <label class="checkbox-label">
                                <input type="checkbox" id="editIsFeatured" name="isFeatured" ${isFeatured ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                Phim nổi bật
                            </label>
                        </div>
                        <div class="form-group">
                            <label class="checkbox-label">
                                <input type="checkbox" id="editIsRecommended" name="isRecommended" ${isRecommended ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                Phim đề xuất
                            </label>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="btn-cancel" onclick="closeModal('editMovieModal')">Hủy</button>
                        <button type="submit" class="btn-save">🔄 Cập nhật phim</button>
                    </div>
                </form>
            `;
            
            // Add event listeners
            setupUploadEventListeners();
            
            // Load poster description
            loadPosterDescription(movieData);
            
            // Load existing additional images
            loadExistingAdditionalImages(movieData);
            
            // Load genres and rooms
            loadGenresAndRooms(movieData);
            
            modal.style.display = 'block';
        }

        function loadPosterDescription(movieData) {
            const posterDescInput = document.getElementById('posterDescription');
            if (posterDescInput && movieData.images) {
                const images = movieData.images || movieData.Images || [];
                const primaryImage = images.find(img => img.isPrimary || img.IsPrimary);
                if (primaryImage) {
                    const description = primaryImage.description || primaryImage.Description || '';
                    posterDescInput.value = description;
                }
            }
        }

        function loadExistingAdditionalImages(movieData) {
            const container = document.getElementById('additionalImagesContainer');
            container.innerHTML = ''; // Clear existing

            // Get all images except primary
            const allImages = [];
            if (movieData.images || movieData.Images) {
                const images = movieData.images || movieData.Images;
                if (Array.isArray(images)) {
                    images.forEach(img => {
                        const isPrimary = img.isPrimary || img.IsPrimary || false;
                        const imageUrl = img.imageUrl || img.ImageUrl || '';
                        const description = img.description || img.Description || '';
                        
                        if (!isPrimary && imageUrl) {
                            allImages.push({
                                url: imageUrl,
                                name: `Hình ảnh ${allImages.length + 1}`,
                                description: description
                            });
                        }
                    });
                }
            }

            // Display existing additional images
            if (allImages.length > 0) {
                displayAdditionalImages(allImages, container);
            }
        }

        // Setup all upload event listeners
        function setupUploadEventListeners() {
            // Poster URL input change
            const imageUrlInput = document.getElementById('editImageUrl');
            const posterPreview = document.getElementById('posterPreview');
            
            if (imageUrlInput) {
                imageUrlInput.addEventListener('input', function() {
                    if (this.value) {
                        posterPreview.src = this.value;
                        posterPreview.onerror = function() {
                            this.src = '/images/placeholder-movie.jpg';
                        };
                    }
                });
            }

            // Trailer file upload
            const trailerFileInput = document.getElementById('trailerFileInput');
            if (trailerFileInput) {
                trailerFileInput.addEventListener('change', handleTrailerUpload);
            }

            // Poster file upload
            const posterFileInput = document.getElementById('posterFileInput');
            if (posterFileInput) {
                posterFileInput.addEventListener('change', handlePosterUpload);
            }

            // Additional images upload
            const additionalImagesInput = document.getElementById('additionalImagesInput');
            if (additionalImagesInput) {
                additionalImagesInput.addEventListener('change', handleAdditionalImagesUpload);
            }
        }

        // Tab switching functions
        function switchTrailerTab(tab) {
            const urlTab = document.getElementById('trailerUrlTab');
            const uploadTab = document.getElementById('trailerUploadTab');
            const buttons = document.querySelectorAll('.trailer-upload-container .tab-btn');
            
            buttons.forEach(btn => btn.classList.remove('active'));
            
            if (tab === 'url') {
                urlTab.classList.add('active');
                uploadTab.classList.remove('active');
                buttons[0].classList.add('active');
            } else {
                urlTab.classList.remove('active');
                uploadTab.classList.add('active');
                buttons[1].classList.add('active');
            }
        }

        function switchPosterTab(tab) {
            const urlTab = document.getElementById('posterUrlTab');
            const uploadTab = document.getElementById('posterUploadTab');
            const buttons = document.querySelectorAll('.poster-upload-section .tab-btn');
            
            buttons.forEach(btn => btn.classList.remove('active'));
            
            if (tab === 'url') {
                urlTab.classList.add('active');
                uploadTab.classList.remove('active');
                buttons[0].classList.add('active');
            } else {
                urlTab.classList.remove('active');
                uploadTab.classList.add('active');
                buttons[1].classList.add('active');
            }
        }

        // Upload handlers
        async function handleTrailerUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const progressDiv = document.getElementById('trailerUploadProgress');
            const progressBar = progressDiv.querySelector('.progress-bar');
            const resultDiv = document.getElementById('trailerUploadResult');
            
            try {
                // Show progress
                progressDiv.style.display = 'block';
                progressBar.style.width = '0%';
                resultDiv.innerHTML = '';

                // Simulate progress
                const progressInterval = setInterval(() => {
                    const currentWidth = parseInt(progressBar.style.width) || 0;
                    if (currentWidth < 90) {
                        progressBar.style.width = (currentWidth + 10) + '%';
                    }
                }, 200);

                // Upload to Cloudinary via controller
                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('/MovieManagement/Movies/UploadVideo', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                if (result.success) {
                    // Update trailer URL input
                    const trailerUrlInput = document.getElementById('editTrailerUrl');
                    trailerUrlInput.value = result.videoUrl;
                    
                    resultDiv.innerHTML = `<div class="upload-success">✅ Upload thành công!</div>`;
                    
                    // Switch back to URL tab
                    switchTrailerTab('url');
                } else {
                    resultDiv.innerHTML = `<div class="upload-error">❌ ${result.message}</div>`;
                }

                setTimeout(() => {
                    progressDiv.style.display = 'none';
                }, 2000);

            } catch (error) {
                console.error('Error uploading video:', error);
                resultDiv.innerHTML = `<div class="upload-error">❌ Lỗi khi upload video</div>`;
                progressDiv.style.display = 'none';
            }
        }

        async function handlePosterUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const progressDiv = document.getElementById('posterUploadProgress');
            const progressBar = progressDiv.querySelector('.progress-bar');
            const posterPreview = document.getElementById('posterPreview');
            
            try {
                // Show progress
                progressDiv.style.display = 'block';
                progressBar.style.width = '0%';

                // Simulate progress
                const progressInterval = setInterval(() => {
                    const currentWidth = parseInt(progressBar.style.width) || 0;
                    if (currentWidth < 90) {
                        progressBar.style.width = (currentWidth + 10) + '%';
                    }
                }, 200);

                // Upload to Cloudinary via controller
                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('/MovieManagement/Movies/UploadImage', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                clearInterval(progressInterval);
                progressBar.style.width = '100%';

                if (result.success) {
                    // Update image URL input and preview
                    const imageUrlInput = document.getElementById('editImageUrl');
                    imageUrlInput.value = result.imageUrl;
                    posterPreview.src = result.imageUrl;
                    
                    showNotification('Upload poster thành công!', 'success');
                    
                    // Switch back to URL tab
                    switchPosterTab('url');
                } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                }

                setTimeout(() => {
                    progressDiv.style.display = 'none';
                }, 2000);

            } catch (error) {
                console.error('Error uploading image:', error);
                showNotification('Lỗi khi upload hình ảnh', 'error');
                progressDiv.style.display = 'none';
            }
        }

        async function handleAdditionalImagesUpload(event) {
            const files = Array.from(event.target.files);
            if (files.length === 0) return;

            const progressDiv = document.getElementById('additionalUploadProgress');
            const progressBar = progressDiv.querySelector('.progress-bar');
            const container = document.getElementById('additionalImagesContainer');
            
            try {
                // Show progress
                progressDiv.style.display = 'block';
                progressBar.style.width = '0%';

                const uploadedImages = [];
                const totalFiles = files.length;

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    
                    // Update progress
                    const progress = ((i + 1) / totalFiles) * 100;
                    progressBar.style.width = progress + '%';

                    try {
                        const formData = new FormData();
                        formData.append('file', file);

                        const response = await fetch('/MovieManagement/Movies/UploadImage', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();

                        if (result.success) {
                            uploadedImages.push({
                                url: result.imageUrl,
                                name: file.name
                            });
                        }
                    } catch (error) {
                        console.error(`Error uploading ${file.name}:`, error);
                    }
                }

                // Display uploaded images
                displayAdditionalImages(uploadedImages, container);
                
                showNotification(`Đã upload ${uploadedImages.length}/${totalFiles} hình ảnh thành công!`, 'success');

                setTimeout(() => {
                    progressDiv.style.display = 'none';
                }, 2000);

            } catch (error) {
                console.error('Error uploading images:', error);
                showNotification('Lỗi khi upload hình ảnh', 'error');
                progressDiv.style.display = 'none';
            }
        }

        function displayAdditionalImages(images, container) {
            images.forEach((image, index) => {
                const imageDiv = document.createElement('div');
                imageDiv.className = 'additional-image-item';
                imageDiv.innerHTML = `
                    <img src="${image.url}" alt="${image.name}" class="additional-image-preview">
                    <div class="image-overlay">
                        <span class="image-name">${image.name}</span>
                        <button type="button" class="btn-remove-image" onclick="removeAdditionalImage(this)">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="image-meta">
                        <input type="text" class="additional-image-description" placeholder="Mô tả hình ảnh..." value="${image.description || ''}">
                    </div>
                `;
                container.appendChild(imageDiv);
            });
        }

        function removeAdditionalImage(button) {
            const imageItem = button.closest('.additional-image-item');
            imageItem.remove();
        }

        // Load genres and rooms for selection
        async function loadGenresAndRooms(movieData) {
            try {
                // Load genres
                const genresResponse = await fetch('/MovieManagement/Movies/GetGenres');
                const genresResult = await genresResponse.json();
                
                if (genresResult.success && genresResult.data && genresResult.data.data) {
                    populateGenres(genresResult.data.data, movieData);
                }
                
                // Load rooms  
                const roomsResponse = await fetch('/MovieManagement/Movies/GetCinemaRooms');
                const roomsResult = await roomsResponse.json();
                
                if (roomsResult.success && roomsResult.data && roomsResult.data.data) {
                    window.availableRooms = roomsResult.data.data;
                    loadExistingShowTimes(movieData);
                }
            } catch (error) {
                console.error('Error loading genres and rooms:', error);
            }
        }

        function populateGenres(genres, movieData) {
            const container = document.getElementById('genreCheckboxes');
            container.innerHTML = '';
            
            // Get existing genre IDs from movie data
            const existingGenreIds = [];
            if (movieData.genres || movieData.Genres) {
                const movieGenres = movieData.genres || movieData.Genres;
                if (Array.isArray(movieGenres)) {
                    movieGenres.forEach(genre => {
                        if (genre.id) existingGenreIds.push(genre.id);
                        else if (genre.Id) existingGenreIds.push(genre.Id);
                    });
                }
            }

            genres.forEach(genre => {
                const genreId = genre.id || genre.Id;
                const genreName = genre.name || genre.Name || genre.genreName || genre.GenreName;
                const isChecked = existingGenreIds.includes(genreId);
                
                const genreDiv = document.createElement('div');
                genreDiv.className = 'genre-checkbox-item';
                genreDiv.innerHTML = `
                    <label class="genre-checkbox-label">
                        <input type="checkbox" value="${genreId}" ${isChecked ? 'checked' : ''}>
                        <span class="genre-checkmark"></span>
                        ${genreName}
                    </label>
                `;
                container.appendChild(genreDiv);
            });
        }

        function loadExistingShowTimes(movieData) {
            const container = document.getElementById('showTimesContainer');
            container.innerHTML = '';
            
            // Load existing show times
            if (movieData.showTimes || movieData.ShowTimes) {
                const showTimes = movieData.showTimes || movieData.ShowTimes;
                if (Array.isArray(showTimes)) {
                    showTimes.forEach(showTime => {
                        let showDate = showTime.showDate || showTime.ShowDate;
                        const roomId = showTime.roomId || showTime.RoomId;
                        
                        // Convert to datetime-local format
                        if (showDate) {
                            const date = new Date(showDate);
                            showDate = date.toISOString().slice(0, 16); // Format for datetime-local input
                        }
                        
                        addShowTimeEntry(showDate, roomId);
                    });
                }
            }
            
            // Add one empty entry if no existing times
            if (container.children.length === 0) {
                addShowTimeEntry();
            }
        }

        function addShowTimeEntry(showDate = '', roomId = '') {
            const container = document.getElementById('showTimesContainer');
            const entryDiv = document.createElement('div');
            entryDiv.className = 'showtime-entry';
            
            // Build room options
            let roomOptions = '<option value="">Chọn phòng chiếu</option>';
            if (window.availableRooms) {
                window.availableRooms.forEach(room => {
                    const id = room.id || room.Id;
                    const name = room.name || room.Name || room.roomName || room.RoomName;
                    const isSelected = id === roomId ? 'selected' : '';
                    roomOptions += `<option value="${id}" ${isSelected}>${name}</option>`;
                });
            }
            
            entryDiv.innerHTML = `
                <div class="showtime-fields">
                    <div class="showtime-field">
                        <label>Ngày chiếu</label>
                        <input type="datetime-local" class="showtime-date" value="${showDate}" required>
                    </div>
                    <div class="showtime-field">
                        <label>Phòng chiếu</label>
                        <select class="showtime-room" required>
                            ${roomOptions}
                        </select>
                    </div>
                    <div class="showtime-actions">
                        <button type="button" class="btn-remove-showtime" onclick="removeShowTimeEntry(this)">
                            🗑️
                        </button>
                    </div>
                </div>
            `;
            
            container.appendChild(entryDiv);
        }

        function removeShowTimeEntry(button) {
            const entry = button.closest('.showtime-entry');
            entry.remove();
            
            // Ensure at least one entry remains
            const container = document.getElementById('showTimesContainer');
            if (container.children.length === 0) {
                addShowTimeEntry();
            }
        }

        async function updateMovie(event, movieId) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // Get version value (API expects enum string)
            const versionValue = formData.get('version'); // Already "TwoD", "ThreeD", "FourDX"
            
            // Collect all images with proper MovieImageDto format
            const images = [];
            
            // Add main poster as primary image
            const posterUrl = formData.get('imageUrl');
            const posterDescription = document.getElementById('posterDescription').value;
            if (posterUrl) {
                images.push({
                    imageUrl: posterUrl,
                    description: posterDescription || "Poster chính",
                    displayOrder: 1,
                    isPrimary: true
                });
            }
            
            // Add additional images
            const additionalImageItems = document.querySelectorAll('.additional-image-item');
            additionalImageItems.forEach((item, index) => {
                const img = item.querySelector('img');
                const descInput = item.querySelector('.additional-image-description');
                if (img && img.src && !img.src.includes('placeholder')) {
                    images.push({
                        imageUrl: img.src,
                        description: descInput ? descInput.value : `Hình ảnh ${index + 2}`,
                        displayOrder: index + 2,
                        isPrimary: false
                    });
                }
            });

            // Collect selected genres
            const genreIds = [];
            const checkedGenres = document.querySelectorAll('#genreCheckboxes input[type="checkbox"]:checked');
            checkedGenres.forEach(checkbox => {
                genreIds.push(checkbox.value);
            });

            // Collect show times
            const showTimes = [];
            const showTimeEntries = document.querySelectorAll('.showtime-entry');
            showTimeEntries.forEach(entry => {
                const dateInput = entry.querySelector('.showtime-date');
                const roomSelect = entry.querySelector('.showtime-room');
                if (dateInput && roomSelect && dateInput.value && roomSelect.value) {
                    // Convert datetime-local to ISO string
                    const showDateTime = new Date(dateInput.value).toISOString();
                    showTimes.push({
                        showDate: showDateTime,
                        roomId: roomSelect.value
                    });
                }
            });
            
            // genreIds and showTimes are now collected from UI inputs above
            // No need to preserve from original data since user can modify them
            
            // Build movie data according to MovieUpdateDto format
            const movieData = {
                id: movieId,
                title: formData.get('title'),
                releaseDate: formData.get('releaseDate'),
                endDate: formData.get('endDate'),
                director: formData.get('director'),
                actors: formData.get('actors'),
                productionCompany: formData.get('productionCompany'),
                runningTime: parseInt(formData.get('runningTime')),
                version: versionValue,
                rating: parseFloat(formData.get('rating')) || 0,
                trailerUrl: formData.get('trailerUrl'),
                content: formData.get('content'),
                isFeatured: formData.get('isFeatured') === 'on',
                isRecommended: formData.get('isRecommended') === 'on',
                // Required fields for MovieUpdateDto
                genreIds: genreIds,
                showTimes: showTimes,
                images: images
            };

            // Validate required fields
            if (genreIds.length === 0) {
                showNotification('Vui lòng chọn ít nhất một thể loại phim', 'error');
                return;
            }

            if (showTimes.length === 0) {
                showNotification('Vui lòng thêm ít nhất một lịch chiếu', 'error');
                return;
            }

            console.log('Sending movie data:', movieData); // Debug log

            try {
                const response = await fetch('/MovieManagement/Movies/UpdateMovieData', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(movieData)
                });

                const result = await response.json();
                if (result.success) {
                    showNotification(result.message, 'success');
                    closeModal('editMovieModal');
                    // Reload movies to show updated data
                    loadMovies();
            } else {
                    showNotification('Lỗi: ' + result.message, 'error');
                    console.error('Update error:', result);
                }
            } catch (error) {
                console.error('Error updating movie:', error);
                showNotification('Đã xảy ra lỗi khi cập nhật phim', 'error');
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Navigation dropdown support (similar to Details.cshtml)
        document.addEventListener('DOMContentLoaded', function() {
            // Enable Bootstrap dropdown if present
            const dropdownElementList = document.querySelectorAll('.dropdown-toggle');
            const dropdownList = [...dropdownElementList].map(dropdownToggleEl => {
                if (typeof bootstrap !== 'undefined') {
                    return new bootstrap.Dropdown(dropdownToggleEl);
                }
                return null;
            });
        });
    </script>
</body>
</html>