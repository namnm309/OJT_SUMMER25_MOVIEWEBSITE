@model UI.Models.BookingDropdownViewModel
@{
    ViewData["Title"] = "Chọn Phim";
}

<div class="movie-selection-container">
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">Chọn Phim Yêu Thích</h1>
            <p class="hero-subtitle">Khám phá những bộ phim đang chiếu hot nhất</p>
        </div>
    </div>
    
    <div class="container">
        <!-- Main Content with 2 columns -->
        <div class="main-content">
            <!-- Left Column: Movies Grid -->
            <div class="movies-column">
                <div class="movies-section">
                    <h2 class="section-title">Phim Đang Chiếu</h2>
                    <div class="movies-grid" id="moviesGrid">
                        @if (Model.Movies != null && Model.Movies.Any())
                        {
                            @foreach (var movie in Model.Movies)
                            {
                                <div class="movie-card" data-movie-id="@movie.Id">
                                    <div class="movie-poster">
                                        <img src="@movie.PrimaryImageUrl" alt="@movie.Title" class="poster-image">
                                        <div class="movie-overlay">
                                            <div class="movie-rating">
                                                @if (movie.Rating > 0)
                                                {
                                                    <span class="rating-badge">⭐ @movie.Rating</span>
                                                }
                                            </div>
                                            <button class="select-btn">Chọn Phim</button>
                                        </div>
                                    </div>
                                    <div class="movie-info">
                                        <h3 class="movie-title">@movie.Title</h3>
                                        <p class="movie-director">Đạo diễn: @movie.Director</p>
                                        <p class="movie-duration">@movie.RunningTime phút</p>
                                        <p class="movie-description">@(movie.Content?.Length > 120 ? movie.Content.Substring(0, 120) + "..." : movie.Content)</p>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-movies">
                                <i class="fas fa-film"></i>
                                <p>Hiện tại chưa có phim nào để hiển thị</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Right Column: Movie Details & Showtimes -->
            <div class="details-column">
                <!-- Default state -->
                <div id="defaultState" class="default-state">
                    <div class="empty-state">
                        <i class="fas fa-hand-pointer"></i>
                        <h3>Chọn một bộ phim</h3>
                        <p>Vui lòng chọn phim từ danh sách bên trái để xem lịch chiếu</p>
                    </div>
                </div>
                
                <!-- Selected Movie Info -->
                <div id="selectedMovieDetails" class="selected-movie-details" style="display: none;">
                    <div class="movie-header">
                        <div id="selectedMovieInfo" class="selected-movie-info">
                            <!-- Selected movie info will be displayed here -->
                        </div>
                    </div>
                    
                    <!-- Movie Dates Section -->
                    <div id="movieDatesSection" class="dates-section">
                        <h3 class="subsection-title">Chọn Ngày Chiếu</h3>
                        <div id="movieDates" class="dates-grid">
                            <!-- Dates will be loaded here -->
                        </div>
                    </div>
                    
                    <!-- Movie Times Section -->
                    <div id="movieTimesSection" class="times-section" style="display: none;">
                        <h3 class="subsection-title">Chọn Suất Chiếu</h3>
                        <div id="movieTimes" class="times-grid">
                            <!-- Times will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.movie-selection-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Hero Section */
.hero-section {
    background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url('https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-4.0.3') center/cover;
    height: 250px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: white;
    margin-bottom: 40px;
}

.hero-content {
    max-width: 600px;
    padding: 0 20px;
}

.hero-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 15px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

.hero-subtitle {
    font-size: 1.2rem;
    font-weight: 300;
    opacity: 0.9;
}

/* Container */
.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Main Content Layout */
.main-content {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: 40px;
    align-items: start;
}

/* Movies Column */
.movies-column {
    min-height: 600px;
}

/* Details Column */
.details-column {
    position: sticky;
    top: 20px;
    background: rgba(255,255,255,0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 30px;
    min-height: 500px;
    border: 1px solid rgba(255,255,255,0.2);
}

/* Default State */
.default-state {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.empty-state {
    text-align: center;
    color: white;
    opacity: 0.8;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 20px;
    opacity: 0.6;
}

.empty-state h3 {
    font-size: 1.5rem;
    margin-bottom: 10px;
    font-weight: 600;
}

.empty-state p {
    font-size: 1rem;
    line-height: 1.5;
}

/* Selected Movie Details */
.selected-movie-details {
    animation: fadeInUp 0.5s ease;
}

@@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.movie-header {
    margin-bottom: 30px;
}

.selected-movie-info {
    background: rgba(255,255,255,0.15);
    border-radius: 15px;
    padding: 20px;
    color: white;
    border: 1px solid rgba(255,255,255,0.2);
}

/* Section Titles */
.section-title {
    font-size: 2.2rem;
    font-weight: 600;
    color: white;
    text-align: center;
    margin-bottom: 30px;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
}

.subsection-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: white;
    margin-bottom: 20px;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
}

/* Movies Grid */
.movies-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 25px;
}

/* Movie Card */
.movie-card {
    background: white;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
}

.movie-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 15px 35px rgba(0,0,0,0.25);
}

.movie-card.selected {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 0 0 3px #28a745, 0 15px 35px rgba(40,167,69,0.3);
}

/* Movie Poster */
.movie-poster {
    position: relative;
    height: 350px;
    overflow: hidden;
}

.poster-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.movie-card:hover .poster-image {
    transform: scale(1.05);
}

/* Movie Overlay */
.movie-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.8) 100%);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 20px;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.movie-card:hover .movie-overlay {
    opacity: 1;
}

.movie-rating {
    align-self: flex-end;
}

.rating-badge {
    background: rgba(255,193,7,0.9);
    color: white;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: 600;
    font-size: 0.85rem;
    backdrop-filter: blur(10px);
}

.select-btn {
    background: linear-gradient(45deg, #28a745, #20c997);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    align-self: center;
}

.select-btn:hover {
    background: linear-gradient(45deg, #218838, #1ea080);
    transform: scale(1.05);
}

/* Movie Info */
.movie-info {
    padding: 20px;
}

.movie-title {
    font-size: 1.2rem;
    font-weight: 700;
    color: #333;
    margin-bottom: 8px;
    line-height: 1.3;
}

.movie-director {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 6px;
    font-weight: 500;
}

.movie-duration {
    color: #28a745;
    font-size: 0.85rem;
    font-weight: 600;
    margin-bottom: 10px;
}

.movie-description {
    color: #777;
    font-size: 0.85rem;
    line-height: 1.4;
}

/* No Movies */
.no-movies {
    grid-column: 1 / -1;
    text-align: center;
    padding: 60px 20px;
    color: white;
}

.no-movies i {
    font-size: 4rem;
    margin-bottom: 20px;
    opacity: 0.7;
}

.no-movies p {
    font-size: 1.2rem;
    opacity: 0.8;
}

/* Dates and Times Sections */
.dates-section, .times-section {
    margin-bottom: 30px;
}

.dates-grid, .times-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 12px;
}

.date-btn, .time-btn {
    background: rgba(255,255,255,0.15);
    color: white;
    border: 2px solid rgba(255,255,255,0.2);
    padding: 12px 8px;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    backdrop-filter: blur(5px);
    font-size: 0.85rem;
}

.date-btn:hover, .time-btn:hover {
    background: rgba(255,255,255,0.25);
    border-color: rgba(255,255,255,0.4);
    transform: translateY(-2px);
}

.date-btn.selected, .time-btn.selected {
    background: #28a745;
    border-color: #28a745;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(40,167,69,0.4);
}

/* Loading State */
.loading-state {
    text-align: center;
    color: white;
    padding: 20px;
    opacity: 0.8;
}

.loading-state i {
    font-size: 1.5rem;
    margin-right: 10px;
}

/* Responsive Design */
@@media (max-width: 1200px) {
    .main-content {
        grid-template-columns: 1fr 350px;
        gap: 30px;
    }
}

@@media (max-width: 992px) {
    .main-content {
        grid-template-columns: 1fr;
        gap: 30px;
    }
    
    .details-column {
        position: static;
        order: -1;
    }
}

@@media (max-width: 768px) {
    .hero-title {
        font-size: 2.2rem;
    }
    
    .hero-subtitle {
        font-size: 1rem;
    }
    
    .movies-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }
    
    .section-title {
        font-size: 1.8rem;
    }
    
    .details-column {
        padding: 20px;
    }
}

@@media (max-width: 480px) {
    .movies-grid {
        grid-template-columns: 1fr;
    }
    
    .hero-title {
        font-size: 1.8rem;
    }
    
    .dates-grid, .times-grid {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    }
}
</style>

<script>
let selectedMovieId = null;
let selectedDate = null;

document.addEventListener('DOMContentLoaded', function() {
    console.log('Document ready fired');
    console.log('Movie cards found:', document.querySelectorAll('.movie-card').length);
    
    // Movie card click handler
    // Trong phần JavaScript, thêm validation cho movieId
    document.querySelectorAll('.movie-card').forEach(function(card) {
    card.addEventListener('click', function(e) {
    e.preventDefault();
    console.log('Movie card clicked!');
    
    const movieId = this.getAttribute('data-movie-id');
    
    // Thêm validation cho movieId
    console.log('Raw movieId:', movieId);
    console.log('MovieId length:', movieId ? movieId.length : 0);
    
    // Kiểm tra định dạng GUID (36 ký tự với dấu gạch ngang)
    const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    
    if (!movieId || !guidRegex.test(movieId)) {
    console.error('Invalid movieId format:', movieId);
    alert('ID phim không hợp lệ. Vui lòng thử lại.');
    return;
    }
    
    const movieTitle = this.querySelector('.movie-title').textContent;
    const moviePoster = this.querySelector('.poster-image').getAttribute('src');
    const movieDirector = this.querySelector('.movie-director').textContent;
    const movieDuration = this.querySelector('.movie-duration').textContent;
    
    console.log('Movie details:', { movieId, movieTitle, moviePoster, movieDirector, movieDuration });
    
    // Remove previous selection
    document.querySelectorAll('.movie-card').forEach(c => c.classList.remove('selected'));
    this.classList.add('selected');
    
    selectedMovieId = movieId;
    
    // Hide default state and show movie details
    console.log('Hiding default state...');
    document.getElementById('defaultState').style.display = 'none';
    console.log('Showing movie details...');
    document.getElementById('selectedMovieDetails').style.display = 'block';
    
    // Update selected movie info
    document.getElementById('selectedMovieInfo').innerHTML = `
        <div style="display: flex; align-items: center; gap: 15px;">
            <img src="${moviePoster}" alt="${movieTitle}" style="width: 60px; height: 90px; object-fit: cover; border-radius: 8px; flex-shrink: 0;">
            <div style="text-align: left; flex: 1;">
                <h4 style="margin-bottom: 6px; font-size: 1.1rem; font-weight: 600;">${movieTitle}</h4>
                <p style="margin-bottom: 4px; opacity: 0.9; font-size: 0.9rem;">${movieDirector}</p>
                <p style="opacity: 0.9; font-size: 0.9rem; color: #28a745;">${movieDuration}</p>
            </div>
        </div>
    `;
    
    console.log('Loading movie dates for ID:', movieId);
    loadMovieDates(movieId);
    });
    });
    
    function loadMovieDates(movieId) {
        console.log('loadMovieDates called with:', movieId);
        
        // Show loading state
        document.getElementById('movieDates').innerHTML = '<div class="loading-state"><i class="fas fa-spinner fa-spin"></i>Đang tải ngày chiếu...</div>';
        document.getElementById('movieDatesSection').style.display = 'block';
        document.getElementById('movieTimesSection').style.display = 'none';
        
        // Sửa URL để sử dụng đường dẫn tuyệt đối tới backend API
        const apiUrl = `https://localhost:7049/api/v1/booking-ticket/dropdown/movies/${movieId}/dates`;
        console.log('API URL:', apiUrl);
        
        fetch(apiUrl)
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('API Success:', data);
                // Sửa từ data.Data thành data.data (chữ d viết thường)
                if (data.data && Array.isArray(data.data) && data.data.length > 0) {
                    displayMovieDates(data.data);
                } else {
                    console.log('No dates found');
                    document.getElementById('movieDates').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-exclamation-triangle"></i><br>Không có ngày chiếu nào cho phim này.</div>';
                }
            })
            .catch(error => {
                console.error('API Error:', error);
                document.getElementById('movieDates').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-times-circle"></i><br>Có lỗi xảy ra khi tải ngày chiếu.</div>';
            });
    }
    
    function displayMovieDates(dates) {
        console.log('displayMovieDates called with:', dates);
        
        const datesHtml = dates.map(date => 
            `<button class="date-btn" data-date="${date.code}">
                <div style="font-size: 0.9rem; margin-bottom: 4px; font-weight: 600;">${date.text}</div>
                <div style="font-size: 0.75rem; opacity: 0.8;">${getDayOfWeek(date.code)}</div>
            </button>`
        ).join('');
        
        document.getElementById('movieDates').innerHTML = datesHtml;
        
        // Date click handler
        document.querySelectorAll('.date-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                console.log('Date clicked:', this.getAttribute('data-date'));
                document.querySelectorAll('.date-btn').forEach(b => b.classList.remove('selected'));
                this.classList.add('selected');
                
                selectedDate = this.getAttribute('data-date');
                loadMovieTimes(selectedMovieId, selectedDate);
            });
        });
    }
    
    function loadMovieTimes(movieId, date) {
        console.log('loadMovieTimes called with:', { movieId, date });
        
        // Show loading state
        document.getElementById('movieTimes').innerHTML = '<div class="loading-state"><i class="fas fa-spinner fa-spin"></i>Đang tải suất chiếu...</div>';
        document.getElementById('movieTimesSection').style.display = 'block';
        
        // Sửa để gọi trực tiếp API backend như loadMovieDates
        const apiUrl = `https://localhost:7049/api/v1/booking-ticket/dropdown/movies/${movieId}/times?date=${encodeURIComponent(date + ' 10:00:00+07')}`;
        console.log('API URL:', apiUrl);
        
        fetch(apiUrl)
            .then(response => {
                console.log('ShowTimes Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('ShowTimes Success:', data);
                if (data.data && Array.isArray(data.data) && data.data.length > 0) {
                    displayMovieTimes(data.data);
                } else {
                    document.getElementById('movieTimes').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-exclamation-triangle"></i><br>Không có suất chiếu nào cho ngày này.</div>';
                }
            })
            .catch(error => {
                console.error('ShowTimes Error:', error);
                document.getElementById('movieTimes').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-times-circle"></i><br>Có lỗi xảy ra khi tải suất chiếu.</div>';
            });
    }
    
    function displayMovieTimes(times) {
        console.log('displayMovieTimes called with:', times);
        
        const timesHtml = times.map(time => 
            `<button class="time-btn" data-showtime-id="${time.id}">
                <div style="font-size: 0.9rem; font-weight: 600; margin-bottom: 4px;">${time.time}</div>
                <div style="font-size: 0.7rem; opacity: 0.8; margin-bottom: 2px;">Phòng chiếu</div>
                <div style="font-size: 0.65rem; opacity: 0.7;">Còn ghế trống</div>
            </button>`
        ).join('');
        
        document.getElementById('movieTimes').innerHTML = timesHtml;
        
        // Time click handler
        document.querySelectorAll('.time-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('selected'));
                this.classList.add('selected');
                
                const showtimeId = this.getAttribute('data-showtime-id');
                
                // Show confirmation and redirect
                setTimeout(() => {
                    window.location.href = `/BookingManagement/Booking/SelectSeat?showtimeId=${showtimeId}`;
                }, 500);
            });
        });
    }
    
    // Helper functions
    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        return `${day}/${month}`;
    }
    
    function getDayOfWeek(dateString) {
        const date = new Date(dateString);
        const days = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
        return days[date.getDay()];
    }
});
</script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
}

// Trong hàm click event của movie card
$('.movie-card').on('click', function() {
    const movieId = $(this).data('movie-id');
    console.log('MovieId được lấy:', movieId); // Kiểm tra giá trị này
    console.log('Độ dài movieId:', movieId.length); // Phải là 36 ký tự
    
    if (movieId) {
        loadMovieTimes(movieId);
    }
});