@model SelectSeatViewModel
@{
    ViewData["Title"] = "Chọn Ghế";
    Layout = "_Layout";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        color: white;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }

    .main-container {
        display: grid;
        grid-template-columns: 1fr 400px;
        gap: 2rem;
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
        min-height: 100vh;
    }

    .movie-section {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .movie-info-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        gap: 2rem;
        align-items: flex-start;
    }

    .movie-poster {
        flex-shrink: 0;
        width: 200px;
        height: 300px;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 300"><defs><radialGradient id="bg" cx="50%" cy="30%"><stop offset="0%" stop-color="%23003366"/><stop offset="100%" stop-color="%23001122"/></radialGradient></defs><rect width="100%" height="100%" fill="url(%23bg)"/><circle cx="100" cy="100" r="50" fill="rgba(255,255,255,0.1)"/><text x="100" y="120" text-anchor="middle" fill="white" font-size="16" font-family="Arial">AVATAR</text><text x="100" y="140" text-anchor="middle" fill="white" font-size="8" font-family="Arial">THE WAY OF WATER</text><text x="100" y="280" text-anchor="middle" fill="white" font-size="8" font-family="Arial">DECEMBER</text></svg>') center/cover;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

        .movie-poster img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .movie-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .movie-title {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        background: linear-gradient(45deg, #fff, #87ceeb);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .movie-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .meta-item {
        background: rgba(255, 255, 255, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .movie-description {
        color: rgba(255, 255, 255, 0.8);
        line-height: 1.6;
        font-size: 1rem;
        margin-bottom: 1rem;
    }

    .showtime-info {
        background: linear-gradient(45deg, #667eea, #764ba2);
        padding: 1.5rem;
        border-radius: 15px;
        margin-top: 1rem;
    }

    .showtime-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        text-align: center;
    }

    .showtime-item {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .showtime-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
        margin-bottom: 0.5rem;
    }

    .showtime-value {
        font-size: 1.1rem;
        font-weight: bold;
        color: white;
    }

    /* CSS cải tiến cho phần chọn ghế */
    .seat-selection {
        flex: 1;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.02);
        border-radius: 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .selection-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .section-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: white;
        margin: 0;
    }

    .seat-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .seat-count, .seat-available, .seat-occupied {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.9rem;
        background: rgba(255, 255, 255, 0.1);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .seat-available {
        background: rgba(0, 255, 0, 0.2);
        border-color: rgba(0, 255, 0, 0.3);
    }

    .seat-occupied {
        background: rgba(255, 0, 0, 0.2);
        border-color: rgba(255, 0, 0, 0.3);
    }

    .seat-types {
        display: flex;
        gap: 0.5rem;
    }

    .seat-type {
        background: rgba(255, 255, 255, 0.1);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        color: white;
    }

    /* Màn hình cong cải tiến */
    .screen-container {
        display: flex;
        justify-content: center;
        margin: 2rem 0 3rem 0;
        perspective: 1000px;
    }

    .screen {
        width: 80%;
        height: 8px;
        background: linear-gradient(90deg, transparent 0%, rgba(135, 206, 250, 0.8) 20%, rgba(135, 206, 250, 1) 50%, rgba(135, 206, 250, 0.8) 80%, transparent 100%);
        border-radius: 50px;
        position: relative;
        transform: rotateX(45deg) rotateY(0deg);
        box-shadow: 0 0 20px rgba(135, 206, 250, 0.5), 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .screen-text {
        position: absolute;
        top: -25px;
        left: 50%;
        transform: translateX(-50%);
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.8rem;
        letter-spacing: 2px;
        font-weight: 300;
    }

    /* Cải tiến seat map */
    .seat-map {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.8rem;
        margin-bottom: 2rem;
        padding: 2rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        min-height: 300px;
        width: 100%;
        overflow-x: auto;
    }

    .seat-row {
        display: flex;
        align-items: center;
        gap: 1rem;
        width: 100%;
        justify-content: center;
        min-height: 40px;
    }

    .row-label {
        color: rgba(255, 255, 255, 0.6);
        font-weight: 600;
        font-size: 0.9rem;
        width: 20px;
        text-align: center;
    }

    .seats-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex-wrap: nowrap;
    }

    /* Cải tiến style ghế */
    .seat {
        width: 35px;
        height: 35px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 600;
        color: white;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        flex-shrink: 0;
    }

    .seat-number {
        font-size: 0.7rem;
        font-weight: bold;
        text-align: center;
        line-height: 1;
    }

    .seat.regular.available {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

        .seat.regular.available:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
        }

    .seat.vip.available {
        background: linear-gradient(45deg, #f5c518, #ffd700);
        border: 1px solid #ffd700;
        color: #000;
    }

        .seat.vip.available:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(245, 197, 24, 0.5);
        }

    .seat.selected {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        border: 1px solid #764ba2 !important;
        color: white !important;
        transform: scale(1.1);
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.6);
    }

    .seat.occupied {
        background: #666 !important;
        border: 1px solid #555 !important;
        cursor: not-allowed;
        opacity: 0.5;
    }

    /* Legend cải tiến */
    .seat-legend {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        flex-wrap: wrap;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.8);
    }

    .legend-seat {
        width: 16px;
        height: 16px;
        border-radius: 4px;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

        .legend-seat.normal {
            background: rgba(255, 255, 255, 0.1);
        }

        .legend-seat.comfort {
            background: rgba(255, 255, 255, 0.2);
        }

        .legend-seat.double-comfort {
            background: linear-gradient(45deg, #f5c518, #ffd700);
        }

        .legend-seat.available {
            background: rgba(255, 255, 255, 0.1);
        }

        .legend-seat.for-disabilities {
            background: rgba(0, 150, 255, 0.6);
        }

        .legend-seat.selected {
            background: linear-gradient(45deg, #667eea, #764ba2);
        }

        .legend-seat.taken {
            background: #666;
        }

    /* Booking section cải tiến */
    .booking-section {
        width: 350px;
        padding: 1rem;
    }

    .movie-tickets-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        padding: 1.5rem;
        color: white;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

        .card-header h3 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .ticket-icon {
        font-size: 1.5rem;
    }

    .ticket-details {
        margin-bottom: 1.5rem;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.8rem;
        font-size: 0.9rem;
    }

    .label {
        color: rgba(255, 255, 255, 0.8);
    }

    .value {
        font-weight: 600;
    }

    .total-amount {
        font-size: 1.1rem;
        font-weight: 700;
    }

    .selected-seats-display {
        margin: 1.5rem 0;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        min-height: 60px;
    }

    .seats-grid {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        justify-content: center;
    }

    .ticket-summary {
        margin: 1.5rem 0;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }

    .summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .total-price-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 700;
        font-size: 1.1rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-buy {
        width: 100%;
        padding: 1rem;
        background: rgba(0, 0, 0, 0.8);
        border: none;
        border-radius: 10px;
        color: white;
        font-weight: 700;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-buy:hover:not(:disabled) {
            background: rgba(0, 0, 0, 0.9);
            transform: translateY(-2px);
        }

        .btn-buy:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    
    @@media (max-width: 768px) {
        .main-container {
            flex-direction: column;
        }

        .booking-section {
            width: 100%;
            margin-top: 2rem;
        }

        .seat {
            width: 30px;
            height: 30px;
            font-size: 0.7rem;
        }

        .seat-legend {
            gap: 1rem;
        }
    }

    .btn {
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: 500;
        font-size: 1rem;
        width: 100%;
        margin-bottom: 1rem;
    }

    .btn-primary {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        border: 1px solid transparent;
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .btn:disabled {
        background: rgba(255, 255, 255, 0.1) !important;
        color: rgba(255, 255, 255, 0.3) !important;
        cursor: not-allowed;
        transform: none !important;
    }

    .btn-primary:hover:not(:disabled) {
        box-shadow: 0 10px 20px rgba(40, 167, 69, 0.3);
    }

    /* Thay thế CSS cho nút thanh toán */
    .btn-continue {
        width: 100%;
        padding: 1.2rem;
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 50%, #ff3838 100%);
        color: white;
        border: none;
        border-radius: 15px;
        font-size: 1.2rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        text-transform: uppercase;
        letter-spacing: 1px;
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
    }

    .btn-continue::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }

    .btn-continue:hover::before {
        left: 100%;
    }

    .btn-continue:hover:not(:disabled) {
        transform: translateY(-3px) scale(1.02);
        box-shadow: 0 15px 35px rgba(255, 107, 107, 0.4);
        background: linear-gradient(135deg, #ff5252 0%, #d32f2f 50%, #c62828 100%);
    }

    .btn-continue:active {
        transform: translateY(-1px) scale(1.01);
        box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
    }

    .btn-continue:disabled {
        background: rgba(255, 255, 255, 0.1);
        cursor: not-allowed;
        opacity: 0.6;
        transform: none !important;
        box-shadow: none;
    }

    /* Hiệu ứng loading cho nút thanh toán */
    .btn-continue.loading {
        pointer-events: none;
        position: relative;
    }

    .btn-continue.loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s linear infinite;
    }

    /* Cải thiện thêm cho nút xác nhận ghế */
    .btn-confirm-seats {
        width: 100%;
        padding: 1.2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #5a67d8 100%);
        color: white;
        border: none;
        border-radius: 15px;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.4s ease;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        position: relative;
        overflow: hidden;
    }

    .btn-confirm-seats::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }

    .btn-confirm-seats:hover::before {
        left: 100%;
    }

    .btn-confirm-seats:hover:not(:disabled) {
        transform: translateY(-3px) scale(1.02);
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        background: linear-gradient(135deg, #5a67d8 0%, #667eea 50%, #4c51bf 100%);
    }

    .btn-confirm-seats:active {
        transform: translateY(-1px) scale(1.01);
    }

    .btn-confirm-seats:disabled {
        background: rgba(255, 255, 255, 0.1);
        cursor: not-allowed;
        opacity: 0.6;
        transform: none !important;
        box-shadow: none;
    }

    /* Cải thiện container cho các nút */
    .ticket-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    /* Thêm hiệu ứng pulse cho nút khi có thể nhấn */
    .btn-continue:not(:disabled),
    .btn-confirm-seats:not(:disabled) {
        animation: subtle-pulse 2s infinite;
    }

    @@keyframes subtle-pulse {
        0%, 100% {
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
        }
        50% {
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.5);
        }
    }

    .btn-confirm-seats:not(:disabled) {
        animation: subtle-pulse-blue 2s infinite;
    }

    @@keyframes subtle-pulse-blue {
        0%, 100% {
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        50% {
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.5);
        }
    }

    .seat.loading {
        opacity: 0.6;
        pointer-events: none;
        position: relative;
    }

    .seat.loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 16px;
        height: 16px;
        margin: -8px 0 0 -8px;
        border: 2px solid #fff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    @@media (max-width: 1024px) {
        .main-container {
            grid-template-columns: 1fr;
        }

        .movie-info-card {
            flex-direction: column;
            text-align: center;
        }

        .movie-poster {
            width: 150px;
            height: 225px;
            margin: 0 auto;
        }

        .seat {
            width: 25px;
            height: 25px;
            font-size: 0.6rem;
        }

        .movie-title {
            font-size: 1.8rem;
        }

        .booking-section {
            position: relative;
            top: 0;
        }
    }
</style>

<div class="main-container">
    <!-- Phần thông tin phim và chọn ghế -->
    <div class="movie-section">
        <!-- Thông tin phim -->
        <div class="movie-info-card">
            <div class="movie-poster">
                <div class="movie-poster">
                    <h1 class="movie-title">@Model.MovieTitle</h1>
                </div>
            </div>

            <div class="movie-details">
                <h1 class="movie-title">@Model.MovieTitle</h1>

                <div class="movie-meta" id="movieMeta">
                    <span class="meta-item">📽️ Đang tải...</span>
                    <span class="meta-item">⏱️ Đang tải...</span>
                    <span class="meta-item">⭐ Đang tải...</span>
                    <span class="meta-item">🎬 Đang tải...</span>
                </div>

                <div class="movie-description" id="movieDescription">
                    Đang tải thông tin phim...
                </div>

                <!-- Thông tin suất chiếu -->
                <div class="showtime-info">
                    <div class="showtime-details">
                        <div class="showtime-item">
                            <div class="showtime-label">🎭 Rạp chiếu</div>
                            <div class="showtime-value" id="cinemaRoom">@Model.CinemaRoom</div>
                        </div>
                        <div class="showtime-item">
                            <div class="showtime-label">📅 Ngày chiếu</div>
                            <div class="showtime-value" id="showDate">@Model.ShowTime.ToString("dd/MM/yyyy")</div>
                        </div>
                        <div class="showtime-item">
                            <div class="showtime-label">🕐 Giờ chiếu</div>
                            <div class="showtime-value" id="showTime">@Model.ShowTime.ToString("HH:mm")</div>
                        </div>
                        <div class="showtime-item">
                            <div class="showtime-label">🎫 Loại vé</div>
                            <div class="showtime-value" id="ticketType">Đang tải...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Phần chọn ghế -->
        <div class="seat-selection">
            <div class="selection-header">
                <h2 class="section-title">Select Your Seats</h2>
                <div class="seat-info" id="seatInfo">
                    <span class="seat-count">Đang tải...</span>
                    <div class="seat-types" id="seatTypes">
                        <!-- Sẽ được cập nhật từ API -->
                    </div>
                </div>
            </div>

            <!-- Màn hình cong với hiệu ứng đẹp hơn -->
            <div class="screen-container">
                <div class="screen">
                    <span class="screen-text">SCREEN</span>
                </div>
            </div>

            <div class="seat-map" id="seatMap">
                <!-- Ghế sẽ được load từ API -->
            </div>

            <!-- Legend cải tiến -->
            <div class="seat-legend">
                <div class="legend-item">
                    <div class="legend-color seat-available"></div>
                    <span>Ghế trống</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color seat-selected"></div>
                    <span>Ghế đã chọn</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color seat-unavailable"></div>
                    <span>Ghế đã đặt</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color seat-vip"></div>
                    <span>Ghế VIP</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Phần đặt vé - sidebar bên phải với style mới -->
    <div class="booking-section">
        <div class="movie-tickets-card">
            <div class="card-header">
                <h3><i class="fas fa-ticket-alt"></i> MOVIE TICKETS</h3>
                <div class="ticket-icon">🎫</div>
            </div>

            <div class="ticket-details">
                <div class="detail-row">
                    <span class="label">Date & Time</span>
                    <span class="value" id="ticketDateTime">@Model.ShowTime.ToString("dd/MM/yyyy, HH:mm")</span>
                </div>
                <div class="detail-row">
                    <span class="label">Tickets (Double comfort)</span>
                    <span class="value" id="ticketCount">@Model.SelectedSeatCount</span>
                </div>
                <div class="detail-row">
                    <span class="label">Total</span>
                    <span class="value total-amount" id="ticketTotal">@String.Format("{0:N0}", Model.TotalPrice)₫</span>
                </div>
            </div>

            <div class="selected-seats-display">
                <div class="seats-grid" id="selectedSeatsDisplay">
                    <!-- Ghế được chọn sẽ hiển thị ở đây -->
                </div>
            </div>

            <div class="ticket-summary">
                <div class="summary-item">
                    <span>1 Ticket Double comfort</span>
                    <span>2D</span>
                </div>
                <div class="total-price-section">
                    <span class="total-label">TOTAL PRICE</span>
                    <div class="total-row">
                        <span>Tổng cộng:</span>
                        <span class="total-amount" id="totalPrice">@String.Format("{0:N0}", Model.TotalPrice)₫</span>
                    </div>
                </div>
            </div>

            <!-- Xóa phần này:
            <button type="button" class="btn-add-parking">
                ADD PARKING
            </button>
            -->

            <div class="ticket-actions">
                <button id="confirmSeatsBtn" class="btn-confirm-seats" disabled>
                    CHỌN GHẾ ĐỂ TIẾP TỤC
                </button>
                <button id="continueBtn" class="btn-continue" style="display: none;">
                    THANH TOÁN
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const totalPriceElement = document.getElementById('totalPrice');
        const continueBtn = document.getElementById('continueBtn');
        const selectedSeatsDisplay = document.getElementById('selectedSeatsDisplay');
        const seatMapContainer = document.getElementById('seatMap');

        let selectedSeats = [];
        let maxSeats = 8; // Giới hạn tối đa 8 ghế
        const showTimeId = '@Model.ShowTimeId';
        let allSeats = []; // Lưu trữ tất cả ghế từ API

        // Cải thiện hàm loadSeats với debug tốt hơn
        async function loadSeats() {
            try {
                console.log('Loading seats for showTimeId:', showTimeId);

                // Hiển thị loading
                seatMapContainer.innerHTML = `
                        <div id="loadingSeats" style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.7);">
                            <i class="fas fa-spinner fa-spin"></i> Đang tải ghế...
                        </div>
                    `;

                const response = await fetch(`https://localhost:7049/api/v1/booking-ticket/available?showTimeId=${showTimeId}`, {
                    headers: {
                        'Authorization': `Bearer ${getAuthToken()}`
                    }
                });

                console.log('API Response status:', response.status);
                console.log('API Response headers:', response.headers);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Full API response:', JSON.stringify(data, null, 2));

                if (data.code === 200 && data.data) {
                    if (data.data.seats && data.data.seats.length > 0) {
                        allSeats = data.data.seats;
                        console.log('Seats loaded successfully:', allSeats.length, 'seats');
                        renderSeats(data.data.seats);

                        // Cập nhật tên phòng
                        if (data.data.roomName) {
                            updateRoomName(data.data.roomName);
                        }
                    } else {
                        console.error('No seats found in API response');
                        throw new Error('Không có ghế nào trong phòng chiếu này');
                    }
                } else {
                    console.error('Invalid API response:', data);
                    throw new Error(data.message || 'Invalid API response format');
                }
            } catch (error) {
                console.error('Error loading seats:', error);
                seatMapContainer.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #ff6b6b;">
                            <i class="fas fa-exclamation-triangle"></i>
                            ${error.message || 'Không thể tải danh sách ghế. Vui lòng thử lại!'}
                            <br><br>
                            <button onclick="loadSeats()" class="btn btn-primary" style="padding: 0.5rem 1rem;">
                                Thử lại
                            </button>
                        </div>
                    `;
            }
        }

        // Render ghế từ dữ liệu API
        function renderSeats(seats) {
            console.log('Rendering seats:', seats);
            console.log('Total seats received:', seats.length);

            // Xóa loading spinner
            const loadingElement = document.getElementById('loadingSeats');
            if (loadingElement) {
                loadingElement.remove();
            }

            // Cập nhật tổng số ghế trong header
            updateSeatCount(seats.length);

            // Group seats by row - sửa lỗi group
            const seatsByRow = {};
            seats.forEach(seat => {
                const rowKey = seat.rowIndex || seat.row || 1;
                if (!seatsByRow[rowKey]) {
                    seatsByRow[rowKey] = [];
                }
                seatsByRow[rowKey].push(seat);
            });

            console.log('Seats grouped by row:', seatsByRow);

            let html = '';


            const sortedRows = Object.keys(seatsByRow).sort((a, b) => parseInt(a) - parseInt(b));
            console.log('Sorted rows:', sortedRows);

            if (sortedRows.length === 0) {
                html = `
                        <div style="text-align: center; padding: 2rem; color: #ff6b6b;">
                            <i class="fas fa-exclamation-triangle"></i>
                            Không có ghế nào được tìm thấy!
                            <br><br>
                            <button onclick="loadSeats()" class="btn btn-primary" style="padding: 0.5rem 1rem;">
                                Thử lại
                            </button>
                        </div>
                    `;
            } else {
                sortedRows.forEach(rowIndex => {
                    const rowSeats = seatsByRow[rowIndex].sort((a, b) => {
                        const colA = a.columnIndex || a.column || 1;
                        const colB = b.columnIndex || b.column || 1;
                        return colA - colB;
                    });

                    const rowLabel = String.fromCharCode(64 + parseInt(rowIndex)); // A, B, C...

                    html += `
                            <div class="seat-row">
                                <span class="row-label">${rowLabel}</span>
                                <div class="seats-container">
                        `;

                    rowSeats.forEach(seat => {
                        const seatClass = getSeatClass(seat);
                        const isDisabled = !seat.isAvailable;
                        const seatCode = seat.seatCode || seat.code || `${rowLabel}${seat.columnIndex || seat.column || '?'}`;
                        const seatPrice = seat.price || 0;

                        html += `
                                <button type="button" class="${seatClass}"
                                        data-seat-id="${seat.id}"
                                        data-seat-code="${seatCode}"
                                        data-seat-price="${seatPrice}"
                                        data-seat-type="${seat.seatType || 'regular'}"
                                        title="Ghế ${seatCode} - ${formatPrice(seatPrice)} VNĐ"
                                        ${isDisabled ? 'disabled' : ''}>
                                    <span class="seat-number">${seatCode}</span>
                                </button>
                            `;
                    });

                    html += `
                                </div>
                                <span class="row-label">${rowLabel}</span>
                            </div>
                        `;
                });
            }

            console.log('Generated HTML length:', html.length);
            seatMapContainer.innerHTML = html;


            attachSeatEventListeners();

            // Cập nhật thống kê ghế
            updateSeatStatistics(seats);
        }

        // Thêm hàm cập nhật số lượng ghế trong header
        function updateSeatCount(totalSeats) {
            const seatCountElement = document.querySelector('.seat-count');
            if (seatCountElement) {
                seatCountElement.textContent = `${totalSeats} Seats Total`;
            }
        }

        // Thêm hàm cập nhật thống kê ghế
        function updateSeatStatistics(seats) {
            const availableSeats = seats.filter(seat => seat.isAvailable).length;
            const occupiedSeats = seats.filter(seat => !seat.isAvailable).length;
            const totalSeats = seats.length;

            // Lấy các loại ghế duy nhất
            const seatTypes = [...new Set(seats.map(seat => seat.seatType || 'Regular'))];

            // Cập nhật thông tin trong seat-info
            const seatInfo = document.getElementById('seatInfo');
            if (seatInfo) {
                let seatTypesHtml = '';
                seatTypes.forEach(type => {
                    const displayName = getSeatTypeDisplayName(type);
                    seatTypesHtml += `<span class="seat-type">${displayName}</span>`;
                });

                seatInfo.innerHTML = `
                        <span class="seat-count">Tổng: ${totalSeats} ghế</span>
                        <span class="seat-available">Trống: ${availableSeats}</span>
                        <span class="seat-occupied">Đã đặt: ${occupiedSeats}</span>
                        <div class="seat-types">
                            ${seatTypesHtml}
                        </div>
                    `;
            }

            console.log(`Seat Statistics - Total: ${totalSeats}, Available: ${availableSeats}, Occupied: ${occupiedSeats}`);
        }

        // Thêm hàm helper để hiển thị tên loại ghế
        function getSeatTypeDisplayName(seatType) {
            const typeMap = {
                'regular': 'Thường',
                'normal': 'Thường',
                'vip': 'VIP',
                'comfort': 'Comfort',
                'doublecomfort': 'Double Comfort',
                'double-comfort': 'Double Comfort',
                'fordisabilities': 'Người khuyết tật',
                'for-disabilities': 'Người khuyết tật'
            };

            return typeMap[seatType.toLowerCase()] || seatType;
        }

        // Xác định class CSS cho ghế dựa trên loại và trạng thái
        function getSeatClass(seat) {
            let baseClass = 'seat';

            if (!seat.isAvailable) {
                return baseClass + ' occupied';
            }

            // Thêm class theo loại ghế - xử lý case-insensitive
            const seatType = (seat.seatType || 'regular').toLowerCase();
            switch (seatType) {
                case 'vip':
                    return baseClass + ' vip available';
                case 'comfort':
                    return baseClass + ' comfort available';
                case 'doublecomfort':
                case 'double-comfort':
                    return baseClass + ' double-comfort available';
                case 'fordisabilities':
                case 'for-disabilities':
                    return baseClass + ' for-disabilities available';
                case 'regular':
                case 'normal':
                default:
                    return baseClass + ' regular available';
            }
        }

        // Thêm biến global để lưu thông tin booking
        let currentBooking = null;

        // Thêm hàm xác nhận tất cả ghế đã chọn
        async function confirmAllSelectedSeats() {
            if (selectedSeats.length === 0) {
                alert('Vui lòng chọn ít nhất 1 ghế');
                return false;
            }

            try {
                const confirmButton = document.getElementById('confirmSeatsBtn');
                confirmButton.disabled = true;
                confirmButton.textContent = 'ĐANG XỬ LÝ...';

                const userId = getCurrentUserId();
                const seatIds = selectedSeats.map(s => s.id);
                
                const requestData = {
                    showTimeId: showTimeId,
                    seatIds: seatIds,
                    userId: userId
                };

                const response = await fetch('https://localhost:7049/api/v1/booking-ticket/confirm', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getAuthToken()}`
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();
                
                if (result.code === 200) {
                    // Lưu thông tin booking
                    currentBooking = {
                        bookingId: result.data.bookingId,
                        total: result.data.total,
                        seats: result.data.seats
                    };
                    console.log('All seats confirmed, booking info:', currentBooking);
                    
                    // Ẩn nút xác nhận ghế và hiện nút thanh toán
                    confirmButton.style.display = 'none';
                    continueBtn.style.display = 'block';
                    
                    alert('Đã xác nhận ghế thành công! Bạn có thể tiến hành thanh toán.');
                    return true;
                } else {
                    alert(result.message || 'Không thể xác nhận ghế');
                    return false;
                }
            } catch (error) {
                console.error('Error confirming seats:', error);
                alert('Có lỗi xảy ra khi xác nhận ghế');
                return false;
            } finally {
                const confirmButton = document.getElementById('confirmSeatsBtn');
                confirmButton.disabled = false;
                updateContinueButtonState();
            }
        }

        // Thêm hàm gọi API confirm booking
        async function confirmSeatSelection(seatId, isSelected) {
            try {
                // Lấy userId từ session hoặc token
                const userId = getCurrentUserId(); // Bạn cần implement hàm này
                
                const requestData = {
                    showTimeId: showTimeId,
                    seatIds: [seatId],
                    userId: userId
                };

                const response = await fetch('https://localhost:7049/api/v1/booking-ticket/confirm', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getAuthToken()}` // Nếu cần authentication
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();
                
                if (result.code === 200) {
                    console.log('Seat confirmed successfully:', result);
                    
                    // Lưu thông tin booking từ response
                    if (result.data) {
                        currentBooking = {
                            bookingId: result.data.bookingId,
                            total: result.data.total,
                            seats: result.data.seats
                        };
                        console.log('Booking info saved:', currentBooking);
                    }
                    
                    return true;
                } else {
                    console.error('Failed to confirm seat:', result.message);
                    alert(result.message || 'Không thể xác nhận ghế này');
                    return false;
                }
            } catch (error) {
                console.error('Error confirming seat:', error);
                alert('Có lỗi xảy ra khi xác nhận ghế. Vui lòng thử lại!');
                return false;
            }
        }

        // Gắn event listeners cho ghế - PHIÊN BẢN MỚI
        function attachSeatEventListeners() {
            const seats = document.querySelectorAll('.seat:not([disabled])');

            seats.forEach(seat => {
                seat.addEventListener('click', function () {
                    const seatId = this.dataset.seatId;
                    const seatCode = this.dataset.seatCode;
                    const seatPrice = parseFloat(this.dataset.seatPrice);
                    const seatType = this.dataset.seatType;

                    if (this.classList.contains('selected')) {
                        // Bỏ chọn ghế - chỉ cập nhật UI, không gọi API
                        this.classList.remove('selected');
                        selectedSeats = selectedSeats.filter(s => s.id !== seatId);
                    } else {
                        // Chọn ghế - chỉ cập nhật UI, không gọi API
                        if (selectedSeats.length < maxSeats) {
                            this.classList.add('selected');
                            selectedSeats.push({
                                id: seatId,
                                code: seatCode,
                                price: seatPrice,
                                type: seatType
                            });
                        } else {
                            alert(`Bạn chỉ có thể chọn tối đa ${maxSeats} ghế.`);
                        }
                    }

                    updateDisplay();
                    updateContinueButtonState(); // Cập nhật trạng thái nút tiếp tục
                });
            });
        }

        // Thêm hàm cập nhật trạng thái nút tiếp tục
        function updateContinueButtonState() {
            const confirmButton = document.getElementById('confirmSeatsBtn');
            if (confirmButton) {
                if (selectedSeats.length > 0) {
                    confirmButton.disabled = false;
                    confirmButton.textContent = `XÁC NHẬN ${selectedSeats.length} GHẾ`;
                } else {
                    confirmButton.disabled = true;
                    confirmButton.textContent = 'CHỌN GHẾ ĐỂ TIẾP TỤC';
                }
            }
        }

        // Cập nhật tên phòng
        function updateRoomName(roomName) {
            console.log('Updating room name:', roomName);

            // Cập nhật tên phòng trong showtime info
            const roomElements = document.querySelectorAll('.showtime-value');
            if (roomElements.length > 0 && roomName) {
                roomElements[0].textContent = roomName; // Phần tử đầu tiên là rạp chiếu
                console.log('Room name updated to:', roomName);
            }

            // Cập nhật thêm trong header nếu có
            const sectionTitle = document.querySelector('.section-title');
            if (sectionTitle) {
                sectionTitle.textContent = `Select Your Seats - ${roomName}`;
            }
        }

        // Format giá tiền
        function formatPrice(price) {
            return new Intl.NumberFormat('vi-VN').format(price);
        }

        // Cập nhật hiển thị ghế đã chọn và tổng tiền
        function updateDisplay() {
            // Cập nhật hiển thị ghế đã chọn
            if (selectedSeats.length === 0) {
                selectedSeatsDisplay.innerHTML = '<div style="text-align: center; color: rgba(255,255,255,0.6); padding: 1rem;">Chưa chọn ghế nào</div>';
            } else {
                selectedSeatsDisplay.innerHTML = selectedSeats.map(seat =>
                    `<div class="selected-seat-item" style="background: rgba(255,255,255,0.2); padding: 0.3rem 0.6rem; border-radius: 5px; font-size: 0.8rem;">${seat.code}</div>`
                ).join('');
            }

            // Cập nhật tổng tiền
            const total = selectedSeats.reduce((sum, seat) => sum + seat.price, 0);
            totalPriceElement.textContent = formatPrice(total) + '₫';

            // CẬP NHẬT TỔNG TIỀN TRONG TICKET DETAILS
            const ticketTotalElement = document.getElementById('ticketTotal');
            if (ticketTotalElement) {
                ticketTotalElement.textContent = formatPrice(total) + '₫';
            }

            // CẬP NHẬT SỐ LƯỢNG VÉ TRONG TICKET DETAILS
            const ticketCountElement = document.getElementById('ticketCount');
            if (ticketCountElement) {
                ticketCountElement.textContent = selectedSeats.length;
            }

            // Cập nhật số ghế đã chọn trong header
            const seatCountInHeader = document.querySelector('.seat-count');
            if (seatCountInHeader && allSeats.length > 0) {
                seatCountInHeader.textContent = `${selectedSeats.length}/${allSeats.length} Seats Selected`;
            }

            // Enable/disable nút tiếp tục
            continueBtn.disabled = selectedSeats.length === 0;
        }

        // Hàm helper để lấy userId hiện tại
        function getCurrentUserId() {
            // Implement logic để lấy userId từ:
            // 1. Session storage
            // 2. Local storage  
            // 3. JWT token
            // 4. Cookie
            // 5. Hidden input field
            
            // Ví dụ từ session storage:
            return sessionStorage.getItem('userId') || localStorage.getItem('userId');
            
            // Hoặc từ JWT token:
            // const token = getAuthToken();
            // if (token) {
            //     const payload = JSON.parse(atob(token.split('.')[1]));
            //     return payload.sub || payload.userId;
            // }
            // return null;
        }

        // Hàm helper để lấy auth token nếu cần
        function getAuthToken() {
            return sessionStorage.getItem('jwtToken') || localStorage.getItem('jwtToken') ||
                   localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
        }

        // Validate ghế trước khi chuyển trang
        async function validateAndContinue() {
            if (selectedSeats.length === 0) {
                alert('Vui lòng chọn ít nhất 1 ghế');
                return;
            }

            try {
                const seatIds = selectedSeats.map(s => s.id);
                const seatNames = selectedSeats.map(s => s.seatNumber || s.name).join(',');

                console.log('Selected seats for validation:', selectedSeats);
                console.log('Seat IDs:', seatIds);
                console.log('Seat Names:', seatNames);

                const response = await fetch(`https://localhost:7049/api/v1/booking-ticket/validate?showTimeId=${showTimeId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getAuthToken()}`
                    },
                    body: JSON.stringify(seatIds)
                });

                const result = await response.json();

                if (result.code === 200) {
                    // Ghế hợp lệ, chuyển trang với thêm thông tin tên ghế
                    const seatIdsParam = seatIds.join(',');
                    const seatNamesParam = encodeURIComponent(seatNames);
                    window.location.href = `/BookingManagement/Booking/ConfirmBooking?showTimeId=${showTimeId}&seatIds=${seatIdsParam}&seatNames=${seatNamesParam}`;
                } else {
                    alert(result.message || 'Ghế đã chọn không hợp lệ. Vui lòng chọn lại!');
                    // Reload lại ghế để cập nhật trạng thái
                    selectedSeats = [];
                    loadSeats();
                }
            } catch (error) {
                console.error('Lỗi validate ghế:', error);
                alert('Có lỗi xảy ra khi kiểm tra ghế. Vui lòng thử lại!');
            }
        }

        // Gọi API để lấy chi tiết suất chiếu và thông tin phim
        async function loadMovieAndShowtimeDetails() {
            try {
                console.log('Loading showtime details for showTimeId:', showTimeId);

                const showtimeResponse = await fetch(`https://localhost:7049/api/v1/booking-ticket/showtime/${showTimeId}/details`, {
                    headers: {
                        'Authorization': `Bearer ${getAuthToken()}`
                    }
                });
                if (!showtimeResponse.ok) {
                    throw new Error('Không thể lấy thông tin suất chiếu');
                }
                const showtimeData = await showtimeResponse.json();
                console.log('Showtime data:', showtimeData);

                if (showtimeData.code === 200 && showtimeData.data) {
                    const movieId = showtimeData.data.movieId;
                    console.log('MovieId from showtime:', movieId);

                    const movieIdParam = typeof movieId === 'string' ? movieId : movieId.toString();

                    const movieResponse = await fetch(`https://localhost:7049/api/v1/movie/GetById?movieId=${movieIdParam}`, {
                        headers: {
                            'Authorization': `Bearer ${getAuthToken()}`
                        }
                    });

                    if (!movieResponse.ok) {
                        console.error('Movie API error:', movieResponse.status);
                        return;
                    }

                    const movieData = await movieResponse.json();
                    console.log('Movie data:', movieData);

                    if (movieData.code === 200 && movieData.data) {
                        updateMovieInfo(movieData.data);
                        updateShowtimeInfo(showtimeData.data);
                    }
                }
            } catch (error) {
                console.error('Lỗi khi tải thông tin:', error);
            }
        }

        // Cập nhật thông tin phim
        function updateMovieInfo(movieInfo) {
            // Cập nhật tiêu đề phim
            const movieTitles = document.querySelectorAll('.movie-title');
            movieTitles.forEach(title => {
                if (movieInfo.title) {
                    title.textContent = movieInfo.title;
                }
            });

            // Cập nhật poster phim
            const moviePoster = document.querySelector('.movie-poster');
            if (moviePoster && movieInfo.primaryImageUrl) {
                moviePoster.innerHTML = `
                        <img src="${movieInfo.primaryImageUrl}"
                             alt="${movieInfo.title || 'Movie Poster'}"
                             style="width: 100%; height: 100%; object-fit: cover; border-radius: 10px;"
                             onerror="this.src='/images/placeholder-movie.jpg';" />
                    `;
            }

            // Cập nhật mô tả phim
            const movieDescription = document.getElementById('movieDescription');
            if (movieDescription && movieInfo.content) {
                movieDescription.textContent = movieInfo.content;
            }

            // Cập nhật thông tin meta
            const movieMeta = document.getElementById('movieMeta');
            if (movieMeta && movieInfo) {
                let metaHtml = '';

                // Thể loại phim
                if (movieInfo.genres && movieInfo.genres.length > 0) {
                    const genreNames = movieInfo.genres.map(g => g.name || g).join(', ');
                    metaHtml += `<span class="meta-item">🎬 ${genreNames}</span>`;
                } else {
                    metaHtml += `<span class="meta-item">🎬 Phim điện ảnh</span>`;
                }

                // Thời lượng phim
                if (movieInfo.runningTime) {
                    metaHtml += `<span class="meta-item">⏱️ ${movieInfo.runningTime} phút</span>`;
                } else {
                    metaHtml += `<span class="meta-item">⏱️ Chưa cập nhật</span>`;
                }

                // Đánh giá
                if (movieInfo.rating) {
                    metaHtml += `<span class="meta-item">⭐ ${movieInfo.rating}/10</span>`;
                } else {
                    metaHtml += `<span class="meta-item">⭐ Chưa đánh giá</span>`;
                }

                // Đạo diễn
                if (movieInfo.director) {
                    metaHtml += `<span class="meta-item">🎭 ${movieInfo.director}</span>`;
                }

                movieMeta.innerHTML = metaHtml;
            }
        }

        // Cập nhật thông tin suất chiếu
        function updateShowtimeInfo(showtimeInfo) {
            if (showtimeInfo.showDate) {
                const showDate = new Date(showtimeInfo.showDate);

                // Cập nhật ngày chiếu trong showtime info
                const showDateElement = document.getElementById('showDate');
                if (showDateElement) {
                    showDateElement.textContent = showDate.toLocaleDateString('vi-VN');
                }

                // Cập nhật giờ chiếu trong showtime info
                const showTimeElement = document.getElementById('showTime');
                if (showTimeElement) {
                    const hours = showDate.getUTCHours().toString().padStart(2, '0');
                    const minutes = showDate.getUTCMinutes().toString().padStart(2, '0');
                    showTimeElement.textContent = `${hours}:${minutes}`;
                }

                // CẬP NHẬT NGÀY GIỜ TRONG TICKET DETAILS
                const ticketDateTimeElement = document.getElementById('ticketDateTime');
                if (ticketDateTimeElement) {
                    const formattedDate = showDate.toLocaleDateString('vi-VN');
                    const formattedTime = showDate.getUTCHours().toString().padStart(2, '0') + ':' + showDate.getUTCMinutes().toString().padStart(2, '0');
                    ticketDateTimeElement.textContent = `${formattedDate}, ${formattedTime}`;
                }
            }

            // Cập nhật tên phòng chiếu
            if (showtimeInfo.cinemaRoomName) {
                const cinemaRoomElement = document.getElementById('cinemaRoom');
                if (cinemaRoomElement) {
                    cinemaRoomElement.textContent = showtimeInfo.cinemaRoomName;
                }
            }

            // Cập nhật loại vé
            const ticketTypeElement = document.getElementById('ticketType');
            if (ticketTypeElement) {
                const ticketType = showtimeInfo.version || 'Vé thường';
                ticketTypeElement.textContent = ticketType;
            }
        }


        continueBtn.addEventListener('click', async function() {
            if (selectedSeats.length === 0) {
                alert('Vui lòng chọn ít nhất 1 ghế');
                return;
            }

            if (!currentBooking || !currentBooking.bookingId) {
                alert('Chưa có thông tin đặt vé. Vui lòng thử lại!');
                return;
            }

            try {
                continueBtn.disabled = true;
                continueBtn.textContent = 'ĐANG XỬ LÝ...';

                const vnpayResponse = await fetch('https://localhost:7049/api/v1/payment/vnpay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getAuthToken()}`
                    },
                    body: JSON.stringify({
                        bookingId: currentBooking.bookingId,
                        amount: currentBooking.total,
                        decription: `Thanh toán vé phim - Booking ${currentBooking.bookingId}`
                    })
                });

                // API trả về string URL trực tiếp, không phải JSON
                if (vnpayResponse.ok) {
                    const paymentUrl = await vnpayResponse.text(); // Đọc như text, không phải JSON
                    console.log('VNPay URL:', paymentUrl);
                    // Chuyển hướng đến VNPay
                    window.location.href = paymentUrl;
                } else {
                    alert('Có lỗi xảy ra khi tạo thanh toán VNPay');
                }
            } catch (error) {
                console.error('Error calling VNPay API:', error);
                alert('Có lỗi xảy ra khi kết nối VNPay. Vui lòng thử lại!');
            } finally {
                continueBtn.disabled = false;
                continueBtn.textContent = 'BUY';
            }
        });

        // Thêm event listener cho nút xác nhận ghế
        const confirmSeatsBtn = document.getElementById('confirmSeatsBtn');
        if (confirmSeatsBtn) {
            confirmSeatsBtn.addEventListener('click', confirmAllSelectedSeats);
        }

        // Khởi tạo
        updateDisplay();
        loadSeats(); // Load ghế từ API
        loadMovieAndShowtimeDetails(); // Load thông tin phim
    });
</script>