@model ConfirmBookingViewModel
@{
    ViewData["Title"] = "Xác Nhận Đặt Vé";
    Layout = "_Layout";
}

<style>
    /* Reset và base styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        color: white;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    
    .header-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        margin-bottom: 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .nav-left {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .logo {
        font-size: 1.5rem;
        font-weight: bold;
        color: #4fc3f7;
    }

    .nav-links {
        display: flex;
        gap: 1.5rem;
    }

    .nav-link {
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        font-size: 0.9rem;
        transition: color 0.3s ease;
    }

        .nav-link:hover {
            color: white;
        }

    .nav-right {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .location-selector {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        color: white;
        font-size: 0.9rem;
    }

    
    .movie-info-section {
        width: 100%;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .movie-content {
        display: flex;
        gap: 2rem;
        align-items: flex-start;
    }

    .movie-poster {
        width: 300px;
        height: 450px;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        flex-shrink: 0;
    }

        .movie-poster img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .movie-details {
        flex: 1;
        padding-left: 1rem;
    }

    .movie-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1rem;
        background: linear-gradient(45deg, #fff, #4fc3f7);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .movie-meta {
        display: flex;
        gap: 2rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
        color: rgba(255, 255, 255, 0.9);
        background: rgba(255, 255, 255, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        .meta-item i {
            color: #4fc3f7;
            width: 20px;
        }

    
    .datetime-selection {
        width: 100%;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .datetime-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;
        flex-wrap: wrap;
    }

    .date-section, .time-section, .room-section, .seats-section {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        flex: 1;
        min-width: 200px;
    }

    .section-label {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .section-value {
        font-size: 1.1rem;
        font-weight: 600;
        color: white;
        background: rgba(255, 255, 255, 0.1);
        padding: 0.8rem 1rem;
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        text-align: center;
    }

    
    .main-content {
        display: flex;
        gap: 2rem;
        align-items: flex-start;
    }

    
    .customer-section {
        flex: 2;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #4fc3f7;
    }

    .customer-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
        font-weight: 500;
    }

    .form-control {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        color: white;
        padding: 0.8rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: #4fc3f7;
            box-shadow: 0 0 0 0.2rem rgba(79, 195, 247, 0.25);
            outline: none;
        }

        .form-control[readonly] {
            background: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.8);
        }

    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.875rem;
        color: #ff6b6b;
    }

    .form-control:invalid {
        border-color: #ff6b6b;
        box-shadow: 0 0 0 0.2rem rgba(255, 107, 107, 0.25);
    }

    .was-validated .form-control:invalid {
        border-color: #ff6b6b;
    }

        .was-validated .form-control:invalid ~ .invalid-feedback {
            display: block;
        }

    .was-validated .form-control:valid {
        border-color: #28a745;
    }

    .notes-section {
        margin-top: 1rem;
    }

        .notes-section textarea {
            resize: vertical;
            min-height: 100px;
        }

    
    .booking-summary {
        flex: 1;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 20px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        height: fit-content;
        position: sticky;
        top: 2rem;
    }

    .summary-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #4fc3f7;
    }

    .price-breakdown {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.8rem;
        font-size: 1rem;
    }

    .total-price {
        font-size: 1.3rem;
        font-weight: bold;
        color: #4fc3f7;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 1rem;
        margin-top: 1rem;
    }

    .points-section {
        background: rgba(255, 193, 7, 0.1);
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .points-header {
        color: #ffc107;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        accent-color: #4fc3f7;
    }

    .form-check-label {
        color: rgba(255, 255, 255, 0.9);
        cursor: pointer;
    }

    .points-input-section {
        margin-top: 1rem;
    }

    .points-note {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 0.5rem;
    }

    .btn {
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        font-size: 1rem;
        width: 100%;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: linear-gradient(45deg, #4fc3f7, #29b6f6);
        color: white;
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .btn-primary:hover {
        background: linear-gradient(45deg, #29b6f6, #4fc3f7);
    }

    .terms-note {
        margin-top: 1rem;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        text-align: center;
        line-height: 1.4;
    }

        .terms-note a {
            color: #ffc107;
            text-decoration: none;
        }

            .terms-note a:hover {
                text-decoration: underline;
            }

    
    @@media (max-width: 1024px) {
        .main-content {
            flex-direction: column;
        }

        .booking-summary {
            position: static;
        }
    }

    @@media (max-width: 768px) {
        .container {
            padding: 1rem;
        }

        .movie-content {
            flex-direction: column;
            text-align: center;
        }

        .movie-poster {
            width: 250px;
            height: 375px;
            margin: 0 auto;
        }

        .movie-title {
            font-size: 2rem;
        }

        .customer-grid {
            grid-template-columns: 1fr;
        }

        .datetime-row {
            flex-direction: column;
            gap: 1rem;
        }

        .date-section, .time-section, .room-section, .seats-section {
            min-width: 100%;
        }
    }
</style>

<div class="container">
    
    <div class="header-nav">
        <div class="nav-left">
            <div class="logo">WATCHER</div>
            <div class="nav-links">
                <a href="#" class="nav-link">Phim</a>
                <a href="#" class="nav-link">Rạp</a>
                <a href="#" class="nav-link">Khuyến mãi</a>
            </div>
        </div>
        <div class="nav-right">
            <select class="location-selector">
                <option>Hồ Chí Minh</option>
                <option>Hà Nội</option>
                <option>Đà Nẵng</option>
            </select>
        </div>
    </div>

    
    <div class="movie-info-section">
        <div class="movie-content">
            <div class="movie-poster">
                <img src="@Model.MoviePoster" alt="@Model.MovieTitle">
            </div>
            <div class="movie-details">
                <h1 class="movie-title">@Model.MovieTitle</h1>
                <div class="movie-meta">
                    <div class="meta-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <span><strong>Phòng:</strong> @Model.CinemaRoom</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-calendar"></i>
                        <span><strong>Ngày:</strong> @Model.ShowDate.ToString("dddd, dd/MM/yyyy")</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-clock"></i>
                        <span><strong>Giờ:</strong> @Model.ShowTime.ToString(@"hh\:mm")</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-couch"></i>
                        <span><strong>Ghế:</strong> @string.Join(", ", Model.SelectedSeats)</span>
                    </div>
                    <div class="meta-item">
                        <i class="fas fa-ticket-alt"></i>
                        <span><strong>Số vé:</strong> @Model.TotalSeats</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
    <div class="datetime-selection">
        <div class="datetime-row">
            <div class="date-section">
                <div class="section-label">Ngày chiếu</div>
                <div class="section-value">@Model.ShowDate.ToString("dd/MM/yyyy")</div>
            </div>
            <div class="time-section">
                <div class="section-label">Giờ chiếu</div>
                <div class="section-value">@Model.ShowTime.ToString(@"hh\:mm")</div>
            </div>
            <div class="room-section">
                <div class="section-label">Phòng chiếu</div>
                <div class="section-value">@Model.CinemaRoom</div>
            </div>
            <div class="seats-section">
                <div class="section-label">Ghế đã chọn</div>
                <div class="section-value">@string.Join(", ", Model.SelectedSeats)</div>
            </div>
        </div>
    </div>

    
    <div class="main-content">
        
        <div class="customer-section">
            <h2 class="section-header">
                <i class="fas fa-user"></i>
                Thông Tin Khách Hàng
            </h2>

            <form asp-action="ConfirmBooking" method="post" class="needs-validation" novalidate>
                @Html.AntiForgeryToken()
                <div class="customer-grid">
                    <div class="form-group">
                        <label class="form-label">Họ và tên *</label>
                        <input asp-for="CustomerName" type="text" class="form-control"
                               placeholder="Nhập họ và tên" required>
                        <div class="invalid-feedback">
                            Vui lòng nhập họ và tên.
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Số điện thoại *</label>
                        <input asp-for="CustomerPhone" type="tel" class="form-control"
                               placeholder="Nhập số điện thoại" pattern="[0-9]{10,11}" required>
                        <div class="invalid-feedback">
                            Vui lòng nhập số điện thoại hợp lệ (10-11 số).
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Email *</label>
                        <input asp-for="CustomerEmail" type="email" class="form-control"
                               placeholder="Nhập địa chỉ email" required>
                        <div class="invalid-feedback">
                            Vui lòng nhập email hợp lệ.
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">CMND/CCCD *</label>
                        <input asp-for="CustomerIdCard" type="text" class="form-control"
                               placeholder="Nhập số CMND/CCCD" pattern="[0-9]{9,12}" required>
                        <div class="invalid-feedback">
                            Vui lòng nhập số CMND/CCCD hợp lệ (9-12 số).
                        </div>
                    </div>
                </div>

                
                <input asp-for="ShowTimeId" type="hidden">
                <input asp-for="MovieTitle" type="hidden">
                <input asp-for="MoviePoster" type="hidden">
                <input asp-for="CinemaRoom" type="hidden">
                <input asp-for="ShowDate" type="hidden">
                <input asp-for="ShowTime" type="hidden">
                <input asp-for="TotalPrice" type="hidden">
                <input asp-for="FinalPrice" type="hidden">
                <input asp-for="TotalSeats" type="hidden">
                <input asp-for="PricePerTicket" type="hidden">

                @if (Model.SelectedSeats != null)
                {
                    @for (int i = 0; i < Model.SelectedSeats.Count; i++)
                    {
                        <input asp-for="SelectedSeats[i]" type="hidden">
                    }
                }
                @if (Model.SelectedSeatIds != null)
                {
                    @for (int i = 0; i < Model.SelectedSeatIds.Count; i++)
                    {
                        <input asp-for="SelectedSeatIds[i]" type="hidden">
                    }
                }
            </form>
        </div>

        
        <div class="booking-summary">
            <h3 class="summary-header">
                <i class="fas fa-money-bill-wave"></i>
                Thanh Toán
            </h3>

            <div class="price-breakdown">
                <div class="summary-row">
                    <span>Giá vé (@Model.TotalSeats vé):</span>
                    <span>@String.Format("{0:N0}", Model.TotalPrice) VNĐ</span>
                </div>

                @if (Model.AvailablePoints > 0)
                {
                    <div class="points-section">
                        <div class="points-header">
                            <i class="fas fa-coins"></i>
                            Điểm thưởng: @Model.AvailablePoints điểm
                        </div>
                        <div class="form-check">
                            <input asp-for="UsePoints" class="form-check-input" type="checkbox" id="usePointsCheck">
                            <label class="form-check-label" for="usePointsCheck">
                                Sử dụng điểm thưởng
                            </label>
                        </div>
                        <div id="pointsDetails" class="points-input-section" style="display: none;">
                            <div class="form-group">
                                <label class="form-label">Số điểm sử dụng:</label>
                                <input asp-for="PointsToUse" type="number" class="form-control"
                                       min="0" max="@Model.AvailablePoints" placeholder="Nhập số điểm">
                                <div class="points-note">1 điểm = 1,000 VNĐ</div>
                            </div>
                        </div>
                    </div>

                    <div id="discountRow" style="display: none;" class="summary-row" style="color: #ffc107;">
                        <span>Giảm giá (điểm):</span>
                        <span id="discountAmount">0 VNĐ</span>
                    </div>
                }

                <div class="summary-row total-price">
                    <span>TỔNG THANH TOÁN:</span>
                    <span id="finalAmount">@String.Format("{0:N0}", Model.FinalPrice) VNĐ</span>
                </div>
            </div>

            <button type="button" class="btn btn-secondary" onclick="history.back()">
                <i class="fas fa-arrow-left"></i> Quay lại
            </button>
            <button type="submit" class="btn btn-primary" form="confirmForm">
                <i class="fas fa-check"></i> Xác Nhận Đặt Vé
            </button>

            <div class="terms-note">
                <i class="fas fa-info-circle"></i>
                Bằng việc xác nhận, bạn đồng ý với
                <a href="#">điều khoản sử dụng</a> của chúng tôi.
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const usePointsCheck = document.getElementById('usePointsCheck');
        const pointsDetails = document.getElementById('pointsDetails');
        const pointsToUseInput = document.querySelector('input[name="PointsToUse"]');
        const discountRow = document.getElementById('discountRow');
        const discountAmount = document.getElementById('discountAmount');
        const finalAmount = document.getElementById('finalAmount');
        const form = document.querySelector('form');
        const submitButton = document.querySelector('button[type="submit"]');

        let totalPrice = @Model.TotalPrice;
        const maxPoints = @Model.AvailablePoints;

        // Lấy showtimeId, seatIds và seatNames từ URL
        const urlParams = new URLSearchParams(window.location.search);
        const showTimeId = urlParams.get('showTimeId');
        const seatIds = urlParams.get('seatIds') ? urlParams.get('seatIds').split(',') : [];
        const seatNames = urlParams.get('seatNames') ? decodeURIComponent(urlParams.get('seatNames')) : '';

        console.log('URL search params:', window.location.search);
        console.log('ShowTimeId:', showTimeId);
        console.log('SeatIds:', seatIds);
        console.log('SeatNames:', seatNames);

        // Nếu có seatNames từ URL, có thể hiển thị ngay mà không cần gọi API
        if (seatNames) {
            const seatsElement = document.querySelector('.seats-section .section-value');
            if (seatsElement) {
                seatsElement.textContent = seatNames;
            }
        }


        if (form) {
            form.id = 'confirmForm';
        }

        // Gọi API để lấy thông tin chi tiết
        async function loadBookingDetails() {
            try {
                if (!showTimeId) {
                    console.error('Không có showTimeId');
                    return;
                }

                // 1. Lấy thông tin suất chiếu
                console.log('Loading showtime details for showTimeId:', showTimeId);
                const showtimeResponse = await fetch(`https://cinemacity-backend-hhasbzggfafpgbgw.eastasia-01.azurewebsites.net/api/v1/booking-ticket/showtime/${showTimeId}/details`);

                if (!showtimeResponse.ok) {
                    throw new Error('Không thể lấy thông tin suất chiếu');
                }

                const showtimeData = await showtimeResponse.json();
                console.log('Showtime data:', showtimeData);

                if (showtimeData.code === 200 && showtimeData.data) {
                    const movieId = showtimeData.data.movieId;
                    console.log('MovieId from showtime:', movieId);

                    // 2. Lấy thông tin phim
                    const movieIdParam = typeof movieId === 'string' ? movieId : movieId.toString();
                    const movieResponse = await fetch(`https://cinemacity-backend-hhasbzggfafpgbgw.eastasia-01.azurewebsites.net/api/v1/movie/GetById?movieId=${movieIdParam}`);

                    if (!movieResponse.ok) {
                        console.error('Movie API error:', movieResponse.status);
                        return;
                    }

                    const movieData = await movieResponse.json();
                    console.log('Movie data:', movieData);

                    if (movieData.code === 200 && movieData.data) {
                        // 3. Lấy thông tin ghế đã chọn
                        await loadSeatDetails(seatIds);

                        // 4. Cập nhật UI
                        updateMovieInfo(movieData.data);
                        updateShowtimeInfo(showtimeData.data);
                    }
                }
            } catch (error) {
                console.error('Lỗi khi tải thông tin booking:', error);
            }
        }

        // Lấy thông tin ghế đã chọn và tính tổng tiền
        async function loadSeatDetails(selectedSeatIds) {
            try {
                if (!selectedSeatIds || selectedSeatIds.length === 0) {
                    console.log('Không có ghế được chọn');
                    return;
                }

                console.log('Selected seat IDs from URL:', selectedSeatIds);

                // Lấy danh sách ghế có sẵn
                const seatsResponse = await fetch(`https://cinemacity-backend-hhasbzggfafpgbgw.eastasia-01.azurewebsites.net/api/v1/booking-ticket/available?showTimeId=${showTimeId}`);

                if (!seatsResponse.ok) {
                    throw new Error('Không thể lấy thông tin ghế');
                }

                const seatsData = await seatsResponse.json();
                console.log('Seats data:', seatsData);

                if (seatsData.code === 200 && seatsData.data && seatsData.data.seats) {
                    const allSeats = seatsData.data.seats;
                    const roomName = seatsData.data.roomName; // Lấy roomName từ API response
                    console.log('All available seats:', allSeats);
                    console.log('Room name from API:', roomName);

                    // Chuyển đổi selectedSeatIds thành cùng kiểu dữ liệu với seat.id
                    const normalizedSeatIds = selectedSeatIds.map(id => {
                        // Thử chuyển đổi thành number nếu có thể, nếu không giữ nguyên string
                        const numId = parseInt(id);
                        return isNaN(numId) ? id : numId;
                    });

                    console.log('Normalized seat IDs:', normalizedSeatIds);

                    // Tìm ghế được chọn với cả string và number comparison
                    const selectedSeats = allSeats.filter(seat => {
                        const seatIdStr = seat.id.toString();
                        const seatIdNum = parseInt(seat.id);

                        return selectedSeatIds.includes(seatIdStr) ||
                            selectedSeatIds.includes(seat.id) ||
                            normalizedSeatIds.includes(seat.id) ||
                            normalizedSeatIds.includes(seatIdStr);
                    });

                    console.log('Found selected seats:', selectedSeats);

                    if (selectedSeats.length === 0) {
                        console.warn('Không tìm thấy ghế nào khớp với IDs:', selectedSeatIds);
                        console.warn('Available seat IDs:', allSeats.map(s => s.id));
                        return;
                    }

                    if (selectedSeats.length !== selectedSeatIds.length) {
                        console.warn(`Chỉ tìm thấy ${selectedSeats.length}/${selectedSeatIds.length} ghế`);
                    }

                    // Cập nhật thông tin ghế đã chọn
                    updateSelectedSeatsInfo(selectedSeats);

                    // Cập nhật thông tin phòng chiếu từ API response
                    if (roomName) {
                        updateRoomInfo(roomName);
                    }

                    // Tính tổng tiền
                    const calculatedTotalPrice = selectedSeats.reduce((sum, seat) => sum + seat.price, 0);
                    totalPrice = calculatedTotalPrice;

                    console.log('Calculated total price:', totalPrice);

                    // Cập nhật UI giá
                    updatePriceDisplay();
                }
            } catch (error) {
                console.error('Lỗi khi tải thông tin ghế:', error);
            }
        }

        // Cập nhật thông tin phim
        function updateMovieInfo(movieInfo) {
            // Cập nhật tiêu đề phim
            const movieTitle = document.querySelector('.movie-title');
            if (movieTitle && movieInfo.title) {
                movieTitle.textContent = movieInfo.title;
            }

            // Cập nhật poster phim
            const moviePoster = document.querySelector('.movie-poster img');
            if (moviePoster && movieInfo.primaryImageUrl) {
                moviePoster.src = movieInfo.primaryImageUrl;
                moviePoster.alt = movieInfo.title || 'Movie Poster';
            }

            // Cập nhật thông tin meta trong movie-meta
            const movieMeta = document.querySelector('.movie-meta');
            if (movieMeta && movieInfo) {
                let metaHtml = '';

                // Phòng chiếu sẽ được cập nhật từ showtime info

                // Thể loại phim
                if (movieInfo.genres && movieInfo.genres.length > 0) {
                    const genreNames = movieInfo.genres.map(g => g.name || g).join(', ');
                    metaHtml += `
                        <div class="meta-item">
                            <i class="fas fa-film"></i>
                            <span><strong>Thể loại:</strong> ${genreNames}</span>
                        </div>`;
                }

                // Thời lượng phim
                if (movieInfo.runningTime) {
                    metaHtml += `
                        <div class="meta-item">
                            <i class="fas fa-clock"></i>
                            <span><strong>Thời lượng:</strong> ${movieInfo.runningTime} phút</span>
                        </div>`;
                }

                // Đánh giá
                if (movieInfo.rating) {
                    metaHtml += `
                        <div class="meta-item">
                            <i class="fas fa-star"></i>
                            <span><strong>Đánh giá:</strong> ${movieInfo.rating}/10</span>
                        </div>`;
                }

                // Đạo diễn
                if (movieInfo.director) {
                    metaHtml += `
                        <div class="meta-item">
                            <i class="fas fa-user-tie"></i>
                            <span><strong>Đạo diễn:</strong> ${movieInfo.director}</span>
                        </div>`;
                }

                movieMeta.innerHTML = metaHtml;
            }
        }

        // Cập nhật thông tin suất chiếu
        function updateShowtimeInfo(showtimeInfo) {
            console.log('Updating showtime info:', showtimeInfo);

            if (showtimeInfo.showDate) {
                const showDate = new Date(showtimeInfo.showDate);

                // Thử nhiều selector cho ngày chiếu
                const dateSelectors = ['.date-section .section-value', '#showDate', '.show-date'];
                let showDateElement = null;
                for (const selector of dateSelectors) {
                    showDateElement = document.querySelector(selector);
                    if (showDateElement) break;
                }

                if (showDateElement) {
                    showDateElement.textContent = showDate.toLocaleDateString('vi-VN');
                }

                // Thử nhiều selector cho giờ chiếu
                const timeSelectors = ['.time-section .section-value', '#showTime', '.show-time'];
                let showTimeElement = null;
                for (const selector of timeSelectors) {
                    showTimeElement = document.querySelector(selector);
                    if (showTimeElement) break;
                }

                if (showTimeElement) {
                    const hours = showDate.getUTCHours().toString().padStart(2, '0');
                    const minutes = showDate.getUTCMinutes().toString().padStart(2, '0');
                    showTimeElement.textContent = `${hours}:${minutes}`;
                }
            }

            // Cập nhật tên phòng chiếu từ roomName
            if (showtimeInfo.roomName) {
                updateRoomInfo(showtimeInfo.roomName);
            }
        }

        // Thêm hàm mới để cập nhật thông tin phòng chiếu
        function updateRoomInfo(roomName) {
            console.log('Updating room info:', roomName);

            // Thử nhiều selector cho phòng chiếu
            const roomSelectors = [
                '.room-section .section-value',
                '#cinemaRoom',
                '.cinema-room',
                '[data-room-info]'
            ];

            let cinemaRoomElement = null;
            for (const selector of roomSelectors) {
                cinemaRoomElement = document.querySelector(selector);
                if (cinemaRoomElement) {
                    console.log('Found room element with selector:', selector);
                    break;
                }
            }

            if (cinemaRoomElement) {
                cinemaRoomElement.textContent = roomName;
            } else {
                console.warn('Không tìm thấy element để hiển thị phòng chiếu');
                // Tạo element mới nếu không tìm thấy
                const container = document.querySelector('.datetime-selection') || document.querySelector('.booking-info');
                if (container) {
                    const roomDiv = document.createElement('div');
                    roomDiv.className = 'room-info';
                    roomDiv.innerHTML = `<strong>Phòng chiếu:</strong> ${roomName}`;
                    container.appendChild(roomDiv);
                }
            }

            // Cập nhật trong movie-meta
            const movieMeta = document.querySelector('.movie-meta');
            if (movieMeta) {
                // Xóa thông tin phòng cũ trước khi thêm mới
                const existingRoomMeta = movieMeta.querySelector('.room-meta');
                if (existingRoomMeta) existingRoomMeta.remove();

                const roomMetaHtml = `
                    <div class="meta-item room-meta">
                        <i class="fas fa-map-marker-alt"></i>
                        <span><strong>Phòng:</strong> ${roomName}</span>
                    </div>`;
                movieMeta.insertAdjacentHTML('afterbegin', roomMetaHtml);
            }
        }

        // Cập nhật thông tin ghế đã chọn
        function updateSelectedSeatsInfo(selectedSeats) {
            console.log('Updating selected seats info:', selectedSeats);

            if (selectedSeats && selectedSeats.length > 0) {
                // Sử dụng seatCode để hiển thị tên ghế (A1, A2, A3...)
                const seatNumbers = selectedSeats.map(seat => {
                    return seat.seatCode || seat.seatNumber || seat.name || `Ghế ${seat.id}`;
                }).join(', ');

                console.log('Seat codes for display:', seatNumbers);

                // Thử nhiều selector khác nhau để tìm element ghế
                const possibleSeatSelectors = [
                    '.seats-section .section-value',
                    '#selectedSeats',
                    '.selected-seats',
                    '[data-seat-info]',
                    '.seat-info'
                ];

                let seatsElement = null;
                for (const selector of possibleSeatSelectors) {
                    seatsElement = document.querySelector(selector);
                    if (seatsElement) {
                        console.log('Found seats element with selector:', selector);
                        break;
                    }
                }

                if (seatsElement) {
                    seatsElement.textContent = seatNumbers;
                } else {
                    console.warn('Không tìm thấy element để hiển thị ghế đã chọn');
                    // Tạo element mới nếu không tìm thấy
                    const container = document.querySelector('.datetime-selection') || document.querySelector('.booking-info');
                    if (container) {
                        const seatDiv = document.createElement('div');
                        seatDiv.className = 'seat-info';
                        seatDiv.innerHTML = `<strong>Ghế đã chọn:</strong> ${seatNumbers}`;
                        container.appendChild(seatDiv);
                    }
                }

                // Cập nhật số vé trong movie-meta
                const movieMeta = document.querySelector('.movie-meta');
                if (movieMeta) {
                    // Xóa thông tin ghế cũ trước khi thêm mới
                    const existingSeatMeta = movieMeta.querySelector('.seat-meta');
                    const existingTicketMeta = movieMeta.querySelector('.ticket-meta');
                    if (existingSeatMeta) existingSeatMeta.remove();
                    if (existingTicketMeta) existingTicketMeta.remove();

                    const seatsMetaHtml = `
                        <div class="meta-item seat-meta">
                            <i class="fas fa-couch"></i>
                            <span><strong>Ghế:</strong> ${seatNumbers}</span>
                        </div>
                        <div class="meta-item ticket-meta">
                            <i class="fas fa-ticket-alt"></i>
                            <span><strong>Số vé:</strong> ${selectedSeats.length}</span>
                        </div>`;
                    movieMeta.insertAdjacentHTML('beforeend', seatsMetaHtml);
                }
            }
        }

        // Cập nhật hiển thị giá
        function updatePriceDisplay() {
            // Cập nhật giá vé trong price-breakdown
            const priceBreakdown = document.querySelector('.price-breakdown .summary-row span:last-child');
            if (priceBreakdown) {
                priceBreakdown.textContent = new Intl.NumberFormat('vi-VN').format(totalPrice) + ' VNĐ';
            }

            updateFinalPrice();
        }

        if (usePointsCheck) {
            usePointsCheck.addEventListener('change', function () {
                if (this.checked) {
                    pointsDetails.style.display = 'block';
                } else {
                    pointsDetails.style.display = 'none';
                    if (pointsToUseInput) pointsToUseInput.value = '';
                    updateFinalPrice();
                }
            });

            if (pointsToUseInput) {
                pointsToUseInput.addEventListener('input', function () {
                    let points = parseInt(this.value) || 0;

                    if (points > maxPoints) {
                        points = maxPoints;
                        this.value = maxPoints;
                    }
                    if (points < 0) {
                        points = 0;
                        this.value = 0;
                    }

                    updateFinalPrice();
                });
            }
        }

        function updateFinalPrice() {
            const points = parseInt(pointsToUseInput?.value) || 0;
            const discount = Math.min(points * 1000, totalPrice);
            const finalPrice = totalPrice - discount;

            // Cập nhật hidden field FinalPrice
            const finalPriceInput = document.querySelector('input[name="FinalPrice"]');
            if (finalPriceInput) {
                finalPriceInput.value = finalPrice;
            }

            if (points > 0 && discountRow) {
                discountRow.style.display = 'flex';
                discountAmount.textContent = new Intl.NumberFormat('vi-VN').format(discount) + ' VNĐ';
            } else if (discountRow) {
                discountRow.style.display = 'none';
            }

            if (finalAmount) {
                finalAmount.textContent = new Intl.NumberFormat('vi-VN').format(finalPrice) + ' VNĐ';
            }
        }

        if (form) {
            form.addEventListener('submit', async function (event) {
                event.preventDefault(); // Ngăn submit form mặc định
                
                if (!form.checkValidity()) {
                    event.stopPropagation();
                    form.classList.add('was-validated');
                    return;
                }

                // Hiển thị loading state
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                }

                try {
                    // Lấy dữ liệu từ URL
                    const urlParams = new URLSearchParams(window.location.search);
                    const showTimeId = urlParams.get('showTimeId');
                    const seatIds = urlParams.get('seatIds') ? urlParams.get('seatIds').split(',') : [];
                    
                    // Lấy dữ liệu từ form
                    const formData = new FormData(form);
                    const totalPrice = parseFloat(document.getElementById('finalAmount').textContent.replace(/[^0-9]/g, ''));
                    
                    // Lấy userId từ sessionStorage
                    const userId = sessionStorage.getItem('userId') || '';
                    
                    // Tạo request data
                    const requestData = {
                        showtimeId: showTimeId,
                        seatIds: seatIds,
                        totalPrice: totalPrice,
                        userId: userId,
                        fullName: formData.get('CustomerName'),
                        email: formData.get('CustomerEmail'),
                        identityCard: formData.get('CustomerIdCard'),
                        phoneNumber: formData.get('CustomerPhone')
                    };

                    // Gọi API ProcessBooking
                    const response = await fetch('/BookingManagement/Booking/ProcessBooking', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Chuyển hướng đến trang kết quả
                        window.location.href = result.redirectUrl;
                    } else {
                        alert('Lỗi: ' + result.message);

                        if (submitButton) {
                            submitButton.disabled = false;
                            submitButton.innerHTML = '<i class="fas fa-check"></i> Xác Nhận Đặt Vé';
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi xử lý đặt vé');

                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.innerHTML = '<i class="fas fa-check"></i> Xác Nhận Đặt Vé';
                    }
                }
            });
        }

        // Debug: Kiểm tra các element có tồn tại không
        console.log('=== DEBUG ELEMENTS ===');
        console.log('datetime-selection:', document.querySelector('.datetime-selection'));
        console.log('movie-meta:', document.querySelector('.movie-meta'));
        console.log('seats-section:', document.querySelector('.seats-section'));
        console.log('room-section:', document.querySelector('.room-section'));
        console.log('date-section:', document.querySelector('.date-section'));
        console.log('time-section:', document.querySelector('.time-section'));
        console.log('=====================');

        // Khởi tạo - Load thông tin booking
        loadBookingDetails();
    });
</script>