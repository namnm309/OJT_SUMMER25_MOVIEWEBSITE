@model UI.Models.RegisterViewModel
@{
    ViewData["Title"] = "Đăng ký";
    Layout = "~/Views/Shared/_AuthLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/RegisterPage/register.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap" rel="stylesheet">
    <style>
        /* CSS của bạn không thay đổi, giữ nguyên như cũ */
        .password-strength-meter {
            height: 8px;
            background-color: #e9ecef;
            border-radius: 4px;
            margin-top: 5px;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            width: 0;
            border-radius: 4px;
            transition: width 0.3s, background-color 0.3s;
        }

        .password-strength-text {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .password-requirements {
            list-style: none;
            padding-left: 0;
            font-size: 0.85rem;
        }

            .password-requirements li {
                margin-bottom: 5px;
                display: flex;
                align-items: center;
            }

                .password-requirements li i {
                    margin-right: 8px;
                    font-size: 0.9rem;
                }

        .text-success {
            color: #28a745;
        }

        .text-danger {
            color: #dc3545;
        }

        .strength-weak {
            background-color: #dc3545;
            width: 20%;
        }

        .strength-fair {
            background-color: #ffc107;
            width: 40%;
        }

        .strength-good {
            background-color: #17a2b8;
            width: 60%;
        }

        .strength-strong {
            background-color: #28a745;
            width: 80%;
        }

        .strength-very-strong {
            background-color: #28a745;
            width: 100%;
        }
    </style>
}

<div class="main-container">
    <div class="loki-background d-none d-lg-block">
        <div class="overlay-text">CINEMA CITY</div>
    </div>

    <div class="login-side">

        <div class="top-bar d-none d-lg-block">
            <span class="signup-prompt">Đã có tài khoản?</span>
            <a asp-action="Login" class="signup-btn">Đăng nhập</a>
        </div>

        <div class="login-container">
            <div class="d-lg-none text-center mb-4">
                <div class="top-bar">
                    <span class="signup-prompt">Đã có tài khoản?</span>
                    <a asp-action="Login" class="signup-btn">Đăng nhập</a>
                </div>
            </div>

            <div class="auth-card">
                <div class="auth-header">
                    <h2 class="auth-title">
                        <i class="fas fa-user-plus me-2"></i>Tạo tài khoản mới
                    </h2>
                    <p class="auth-subtitle">Vui lòng điền thông tin để đăng ký tài khoản</p>
                </div>

                <div class="text-danger mb-3" id="registerError"></div>

                <form id="registerForm" method="post" class="auth-form">
                    @Html.AntiForgeryToken()
                    <div class="form-grid">
                        <div class="form-column">

                            <div class="form-group">
                                <label asp-for="Username" class="form-label">
                                    <i class="fas fa-user me-1"></i>@Html.DisplayNameFor(m => m.Username)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-user input-icon"></i>
                                    <input asp-for="Username" class="form-control with-icon" placeholder="Tên đăng nhập" id="Username" />
                                </div>
                                <div id="usernameError" class="text-danger" style="display: none;"></div>
                            </div>

                            <div class="form-group">
                                <label asp-for="Email" class="form-label">
                                    <i class="fas fa-envelope me-1"></i>@Html.DisplayNameFor(m => m.Email)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-envelope input-icon"></i>
                                    <input asp-for="Email" class="form-control with-icon" placeholder="Email" id="Email" />
                                </div>
                                <div id="emailError" class="text-danger" style="display: none;"></div>
                            </div>

                            <div class="form-group">
                                <label asp-for="Password" class="form-label">
                                    <i class="fas fa-lock me-1"></i>@Html.DisplayNameFor(m => m.Password)
                                </label>
                                <div class="input-group">
                                    <div class="position-relative flex-grow-1">
                                        <i class="fas fa-lock input-icon"></i>
                                        <input asp-for="Password" class="form-control with-icon" placeholder="Mật khẩu" id="Password" type="password" />
                                    </div>
                                    <button type="button" class="btn toggle-password" id="togglePassword">
                                        <i class="fas fa-eye-slash"></i>
                                    </button>
                                </div>
                                <div id="passwordStrengthContainer" class="mt-2" style="display: none;">
                                    <div class="password-strength-meter">
                                        <div id="passwordStrengthBar" class="password-strength-bar"></div>
                                    </div>
                                    <div id="passwordStrengthText" class="password-strength-text mt-1">Độ mạnh mật khẩu</div>
                                    <ul class="password-requirements mt-2">
                                        <li id="length-check"><i class="fas fa-times-circle text-danger"></i> Ít nhất 8 ký tự</li>
                                        <li id="uppercase-check"><i class="fas fa-times-circle text-danger"></i> Ít nhất 1 chữ hoa</li>
                                        <li id="lowercase-check"><i class="fas fa-times-circle text-danger"></i> Ít nhất 1 chữ thường</li>
                                        <li id="number-check"><i class="fas fa-times-circle text-danger"></i> Ít nhất 1 số</li>
                                        <li id="special-check"><i class="fas fa-times-circle text-danger"></i> Ít nhất 1 ký tự đặc biệt</li>
                                    </ul>
                                </div>
                                <span asp-validation-for="Password" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="ConfirmPassword" class="form-label">
                                    <i class="fas fa-lock me-1"></i>@Html.DisplayNameFor(m => m.ConfirmPassword)
                                </label>
                                <div class="input-group">
                                    <div class="position-relative flex-grow-1">
                                        <i class="fas fa-lock input-icon"></i>
                                        <input asp-for="ConfirmPassword" class="form-control with-icon" placeholder="Nhập lại mật khẩu" id="ConfirmPassword" type="password" />
                                    </div>
                                    <button type="button" class="btn toggle-password" id="toggleConfirmPassword">
                                        <i class="fas fa-eye-slash"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="FullName" class="form-label">
                                    <i class="fas fa-id-card me-1"></i>@Html.DisplayNameFor(m => m.FullName)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-id-card input-icon"></i>
                                    <input asp-for="FullName" class="form-control with-icon" placeholder="Họ và tên" />
                                </div>
                                <span asp-validation-for="FullName" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-column">

                            <div class="form-group">
                                <label asp-for="Phone" class="form-label">
                                    <i class="fas fa-phone me-1"></i>@Html.DisplayNameFor(m => m.Phone)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-phone input-icon"></i>
                                    <input asp-for="Phone" class="form-control with-icon" placeholder="Số điện thoại" id="Phone" />
                                </div>
                                <div id="phoneError" class="text-danger" style="display: none;"></div>
                            </div>

                            <div class="form-group">
                                <label asp-for="IdentityCard" class="form-label">
                                    <i class="fas fa-id-badge me-1"></i>@Html.DisplayNameFor(m => m.IdentityCard)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-id-badge input-icon"></i>
                                    <input asp-for="IdentityCard" class="form-control with-icon" placeholder="Số CCCD/CMND" id="IdentityCard" />
                                </div>
                                <div id="identityCardError" class="text-danger" style="display: none;"></div>
                            </div>

                            <div class="form-group">
                                <label asp-for="Address" class="form-label">
                                    <i class="fas fa-map-marker-alt me-1"></i>@Html.DisplayNameFor(m => m.Address)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-map-marker-alt input-icon"></i>
                                    <textarea asp-for="Address" class="form-control with-icon" rows="2" placeholder="Địa chỉ thường trú"></textarea>
                                </div>
                                <span asp-validation-for="Address" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="BirthDate" class="form-label">
                                    <i class="fas fa-calendar me-1"></i>@Html.DisplayNameFor(m => m.BirthDate)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-calendar input-icon"></i>
                                    <input asp-for="BirthDate" class="form-control with-icon" type="date" id="BirthDate" />
                                </div>
                                <div id="birthDateError" class="text-danger" style="display: none;"></div>
                            </div>

                            <div class="form-group">
                                <label asp-for="Gender" class="form-label">
                                    <i class="fas fa-venus-mars me-1"></i>@Html.DisplayNameFor(m => m.Gender)
                                </label>
                                <div class="position-relative">
                                    <i class="fas fa-venus-mars input-icon"></i>
                                    <select asp-for="Gender" class="form-control with-icon">
                                        <option value="">Chọn giới tính</option>
                                        <option value="Nam">Nam</option>
                                        <option value="Nữ">Nữ</option>
                                        <option value="Khác">Khác</option>
                                    </select>
                                </div>
                                <span asp-validation-for="Gender" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <button type="submit" class="btn btn-primary btn-lg w-100 auth-btn">
                        <i class="fas fa-user-plus me-2"></i>Đăng ký
                    </button>

                    <div class="auth-footer">
                        <p>Đã có tài khoản? <a asp-action="Login" class="auth-link">Đăng nhập ngay</a></p>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>

        document.getElementById('togglePassword').addEventListener('click', function () {
            const passwordField = document.getElementById('Password');
            const icon = this.querySelector('i');

            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            } else {
                passwordField.type = 'password';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            }
        });

        document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
            const passwordField = document.getElementById('ConfirmPassword');
            const icon = this.querySelector('i');

            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            } else {
                passwordField.type = 'password';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            }
        });

        // Xác thực mật khẩu mạnh
        const passwordField = document.getElementById('Password');
        const passwordStrengthContainer = document.getElementById('passwordStrengthContainer');
        const passwordStrengthBar = document.getElementById('passwordStrengthBar');
        const passwordStrengthText = document.getElementById('passwordStrengthText');

        // Các yêu cầu mật khẩu
        const lengthCheck = document.getElementById('length-check');
        const uppercaseCheck = document.getElementById('uppercase-check');
        const lowercaseCheck = document.getElementById('lowercase-check');
        const numberCheck = document.getElementById('number-check');
        const specialCheck = document.getElementById('special-check');

        passwordField.addEventListener('input', function () {
            const password = this.value;

            // Hiển thị container khi bắt đầu nhập
            if (password.length > 0) {
                passwordStrengthContainer.style.display = 'block';
            } else {
                passwordStrengthContainer.style.display = 'none';
                return;
            }

            // Kiểm tra các yêu cầu
            const hasLength = password.length >= 8;
            const hasUppercase = /[A-Z]/.test(password);
            const hasLowercase = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecial = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password);

            // Cập nhật trạng thái các yêu cầu
            updateRequirement(lengthCheck, hasLength);
            updateRequirement(uppercaseCheck, hasUppercase);
            updateRequirement(lowercaseCheck, hasLowercase);
            updateRequirement(numberCheck, hasNumber);
            updateRequirement(specialCheck, hasSpecial);

            // Tính điểm mật khẩu
            let score = 0;
            if (hasLength) score++;
            if (hasUppercase) score++;
            if (hasLowercase) score++;
            if (hasNumber) score++;
            if (hasSpecial) score++;

            // Cập nhật thanh độ mạnh
            updatePasswordStrength(score);
        });

        function updateRequirement(element, isValid) {
            const icon = element.querySelector('i');
            if (isValid) {
                icon.classList.remove('fa-times-circle', 'text-danger');
                icon.classList.add('fa-check-circle', 'text-success');
            } else {
                icon.classList.remove('fa-check-circle', 'text-success');
                icon.classList.add('fa-times-circle', 'text-danger');
            }
        }

        function updatePasswordStrength(score) {
            // Xóa tất cả các class hiện tại
            passwordStrengthBar.className = 'password-strength-bar';

            // Thêm class mới dựa trên điểm
            let strengthClass = '';
            let strengthText = '';

            switch (score) {
                case 1:
                    strengthClass = 'strength-weak';
                    strengthText = 'Yếu';
                    break;
                case 2:
                    strengthClass = 'strength-fair';
                    strengthText = 'Trung bình';
                    break;
                case 3:
                    strengthClass = 'strength-good';
                    strengthText = 'Khá';
                    break;
                case 4:
                    strengthClass = 'strength-strong';
                    strengthText = 'Mạnh';
                    break;
                case 5:
                    strengthClass = 'strength-very-strong';
                    strengthText = 'Rất mạnh';
                    break;
                default:
                    strengthText = 'Độ mạnh mật khẩu';
            }

            passwordStrengthBar.classList.add(strengthClass);
            passwordStrengthText.textContent = strengthText;
        }

        // Focus vào username khi trang load
        document.addEventListener('DOMContentLoaded', function () {
            const usernameField = document.getElementById('Username');
            if (usernameField) {
                usernameField.focus();
            }
        });

        // Real-time validation cho Username
        let usernameTimeout;
        document.getElementById('Username')?.addEventListener('input', function() {
            const username = this.value.trim();
            const errorDiv = document.getElementById('usernameError');
            
            clearTimeout(usernameTimeout);
            
            // Clear previous error message immediately
            errorDiv.style.display = 'none';
            errorDiv.textContent = '';
            
            if (username.length === 0) {
                return;
            }
            
            usernameTimeout = setTimeout(async () => {
                try {
                    const response = await fetch('@Url.Action("CheckUsernameUnique", "Account")?username=' + encodeURIComponent(username));
                    
                    if (!response.ok) {
                        console.error('API response not ok:', response.status);
                        return;
                    }
                    
                    const result = await response.json();
                    console.log('Username check result for "' + username + '":', result);
                    
                    if (!result) {
                        errorDiv.textContent = 'Tên đăng nhập này đã được sử dụng';
                        errorDiv.style.display = 'block';
                    } else {
                        errorDiv.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error checking username:', error);
                }
            }, 500);
        });

        // Real-time validation cho CCCD
        let cccdTimeout;
        document.getElementById('IdentityCard')?.addEventListener('input', function() {
            const cccd = this.value.trim();
            const errorDiv = document.getElementById('identityCardError');
            
            clearTimeout(cccdTimeout);
            
            // Clear previous error message immediately
            errorDiv.style.display = 'none';
            errorDiv.textContent = '';
            
            if (cccd.length === 0) {
                return;
            }
            
            // Kiểm tra format CCCD (12 số)
            if (!/^\d{12}$/.test(cccd)) {
                errorDiv.textContent = 'Số CCCD phải có đúng 12 chữ số';
                errorDiv.style.display = 'block';
                return;
            }
            
            cccdTimeout = setTimeout(async () => {
                try {
                    const response = await fetch('@Url.Action("CheckIdentityCardUnique", "Account")?identityCard=' + encodeURIComponent(cccd));
                    
                    if (!response.ok) {
                        console.error('API response not ok:', response.status);
                        return;
                    }
                    
                    const result = await response.json();
                    
                    if (!result) {
                        errorDiv.textContent = 'Số CCCD này đã được sử dụng';
                        errorDiv.style.display = 'block';
                    } else {
                        errorDiv.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error checking CCCD:', error);
                }
            }, 500);
        });

        // Real-time validation cho Email
          let emailTimeout;
          document.getElementById('Email')?.addEventListener('input', function() {
              const email = this.value.trim();
              const errorDiv = document.getElementById('emailError');
              
              clearTimeout(emailTimeout);
              
              // Clear previous error message immediately
              errorDiv.style.display = 'none';
              errorDiv.textContent = '';
              
              if (email.length === 0) {
                  return;
              }
              
              // Kiểm tra format email
             
              const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
              if (!emailRegex.test(email)) {
                  errorDiv.textContent = 'Định dạng email không hợp lệ';
                  errorDiv.style.display = 'block';
                  return;
              }
              
              emailTimeout = setTimeout(async () => {
                  try {
                      const response = await fetch('@Url.Action("CheckEmailUnique", "Account")?email=' + encodeURIComponent(email));
                      
                      if (!response.ok) {
                          console.error('API response not ok:', response.status);
                          return;
                      }
                      
                      const result = await response.json();
                      
                      if (!result) {
                          errorDiv.textContent = 'Email này đã được sử dụng';
                          errorDiv.style.display = 'block';
                      } else {
                          errorDiv.style.display = 'none';
                      }
                  } catch (error) {
                      console.error('Error checking email:', error);
                  }
              }, 500);
          });

         // Real-time validation cho Phone
         let phoneTimeout;
         document.getElementById('Phone')?.addEventListener('input', function() {
             const phone = this.value.trim();
             const errorDiv = document.getElementById('phoneError');
             
             clearTimeout(phoneTimeout);
             
             // Clear previous error message immediately
             errorDiv.style.display = 'none';
             errorDiv.textContent = '';
             
             if (phone.length === 0) {
                 return;
             }
             
             // Kiểm tra format số điện thoại (10 số, bắt đầu bằng 0)
             if (!/^0\d{9}$/.test(phone)) {
                 errorDiv.textContent = 'Số điện thoại phải có 10 chữ số và bắt đầu bằng số 0';
                 errorDiv.style.display = 'block';
                 return;
             }
             
             phoneTimeout = setTimeout(async () => {
                 try {
                     const response = await fetch('@Url.Action("CheckPhoneUnique", "Account")?phone=' + encodeURIComponent(phone));
                     
                     if (!response.ok) {
                         console.error('API response not ok:', response.status);
                         return;
                     }
                     
                     const result = await response.json();
                     
                     if (!result) {
                         errorDiv.textContent = 'Số điện thoại này đã được sử dụng';
                         errorDiv.style.display = 'block';
                     } else {
                         errorDiv.style.display = 'none';
                     }
                 } catch (error) {
                     console.error('Error checking phone:', error);
                 }
             }, 500);
         });

         // Real-time validation cho ngày sinh (kiểm tra tuổi >= 18)
         document.getElementById('BirthDate')?.addEventListener('change', function() {
             const birthDate = new Date(this.value);
             const errorDiv = document.getElementById('birthDateError');
             
             // Clear previous error message immediately
             errorDiv.style.display = 'none';
             errorDiv.textContent = '';
             
             if (!this.value) {
                 return;
             }
             
             const today = new Date();
             let age = today.getFullYear() - birthDate.getFullYear();
             const monthDiff = today.getMonth() - birthDate.getMonth();
             
             if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                 age--;
             }
             
             if (age < 18) {
                 errorDiv.textContent = 'Bạn phải đủ 18 tuổi để đăng ký';
                 errorDiv.style.display = 'block';
             } else {
                 errorDiv.style.display = 'none';
             }
         });


        document.getElementById('registerForm')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            document.getElementById('registerError').textContent = '';

            // Kiểm tra thông tin bắt buộc
            if (!formData.get('Username') || !formData.get('Email') || !formData.get('Password') ||
                !formData.get('ConfirmPassword') || !formData.get('FullName') || !formData.get('Phone') ||
                !formData.get('IdentityCard') || !formData.get('Address') || !formData.get('BirthDate') ||
                !formData.get('Gender')) {
                document.getElementById('registerError').textContent = 'Vui lòng nhập đầy đủ thông tin bắt buộc';
                return;
            }

            // Kiểm tra mật khẩu xác nhận
            if (formData.get('Password') !== formData.get('ConfirmPassword')) {
                document.getElementById('registerError').textContent = 'Mật khẩu xác nhận không khớp';
                return;
            }

            // Kiểm tra định dạng số điện thoại
            const phone = formData.get('Phone');
            if (phone && (phone.length !== 10 || !phone.startsWith('0') || !/^\d{10}$/.test(phone))) {
                document.getElementById('registerError').textContent = 'Số điện thoại phải có đúng 10 số và bắt đầu bằng số 0';
                return;
            }

            // Kiểm tra định dạng CCCD
            const identityCard = formData.get('IdentityCard');
            if (identityCard && (identityCard.length !== 12 || !/^\d{12}$/.test(identityCard))) {
                document.getElementById('registerError').textContent = 'Số CCCD phải có đúng 12 số';
                return;
            }

            // Kiểm tra định dạng email
            const email = formData.get('Email');
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (email && !emailRegex.test(email)) {
                document.getElementById('registerError').textContent = 'Email không đúng định dạng';
                return;
            }

            // Kiểm tra xem có lỗi validation nào đang hiển thị không
            const errorDivs = ['usernameError', 'emailError', 'phoneError', 'identityCardError', 'birthdateError'];
            for (const errorId of errorDivs) {
                const errorDiv = document.getElementById(errorId);
                if (errorDiv && errorDiv.style.display !== 'none' && errorDiv.textContent.trim() !== '') {
                    document.getElementById('registerError').textContent = 'Vui lòng sửa các lỗi trước khi đăng ký';
                    return;
                }
            }

            // Kiểm tra tuổi (phải từ 18 tuổi trở lên)
            const birthDate = formData.get('BirthDate');
            if (birthDate) {
                const today = new Date();
                const birth = new Date(birthDate);
                let age = today.getFullYear() - birth.getFullYear();
                const monthDiff = today.getMonth() - birth.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                    age--;
                }
                if (age < 18) {
                    document.getElementById('registerError').textContent = 'Bạn phải từ 18 tuổi trở lên để đăng ký';
                    return;
                }
            }

            // Kiểm tra độ mạnh mật khẩu
            const password = formData.get('Password');
            const hasLength = password.length >= 8;
            const hasUppercase = /[A-Z]/.test(password);
            const hasLowercase = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecial = /[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password);

            if (!hasLength) {
                document.getElementById('registerError').textContent = 'Mật khẩu phải có ít nhất 8 ký tự';
                return;
            }
            if (!hasUppercase) {
                document.getElementById('registerError').textContent = 'Mật khẩu phải có ít nhất 1 chữ hoa';
                return;
            }
            if (!hasLowercase) {
                document.getElementById('registerError').textContent = 'Mật khẩu phải có ít nhất 1 chữ thường';
                return;
            }
            if (!hasNumber) {
                document.getElementById('registerError').textContent = 'Mật khẩu phải có ít nhất 1 chữ số';
                return;
            }
            if (!hasSpecial) {
                document.getElementById('registerError').textContent = 'Mật khẩu phải có ít nhất 1 ký tự đặc biệt';
                return;
            }

            // Kiểm tra tính duy nhất của username, số điện thoại và CCCD
            try {
                // Kiểm tra username đã tồn tại chưa
                const username = formData.get('Username');
                if (username) {
                    const usernameCheckResponse = await fetch('@Url.Action("CheckUsernameUnique", "Account")?username=' + encodeURIComponent(username));
                    const usernameCheckResult = await usernameCheckResponse.json();
                    if (!usernameCheckResult) {
                        document.getElementById('registerError').textContent = 'Tên đăng nhập này đã được sử dụng';
                        return;
                    }
                }

                // Kiểm tra email đã tồn tại chưa
                if (email) {
                    const emailCheckResponse = await fetch('@Url.Action("CheckEmailUnique", "Account")?email=' + encodeURIComponent(email));
                    const emailCheckResult = await emailCheckResponse.json();
                    if (!emailCheckResult) {
                        document.getElementById('registerError').textContent = 'Email này đã được sử dụng';
                        return;
                    }
                }

                // Kiểm tra số điện thoại đã tồn tại chưa
                if (phone) {
                    const phoneCheckResponse = await fetch('@Url.Action("CheckPhoneUnique", "Account")?phone=' + encodeURIComponent(phone));
                    const phoneCheckResult = await phoneCheckResponse.json();
                    if (!phoneCheckResult) {
                        document.getElementById('registerError').textContent = 'Số điện thoại này đã được sử dụng';
                        return;
                    }
                }

                // Kiểm tra CCCD đã tồn tại chưa
                if (identityCard) {
                    const cccdCheckResponse = await fetch('@Url.Action("CheckIdentityCardUnique", "Account")?identityCard=' + encodeURIComponent(identityCard));
                    const cccdCheckResult = await cccdCheckResponse.json();
                    if (!cccdCheckResult) {
                        document.getElementById('registerError').textContent = 'Số CCCD này đã được sử dụng';
                        return;
                    }
                }

                const formBody = new URLSearchParams();
                formBody.append('Username', formData.get('Username'));
                formBody.append('Email', formData.get('Email'));
                formBody.append('Password', formData.get('Password'));
                formBody.append('ConfirmPassword', formData.get('ConfirmPassword'));
                formBody.append('FullName', formData.get('FullName'));
                formBody.append('Phone', formData.get('Phone') || '');
                formBody.append('IdentityCard', formData.get('IdentityCard') || '');
                formBody.append('Address', formData.get('Address') || '');
                formBody.append('BirthDate', formData.get('BirthDate') || '');
                formBody.append('Gender', formData.get('Gender') || '');

                const response = await fetch('@Url.Action("Register", "Account")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('#registerForm input[name="__RequestVerificationToken"]').value
                    },
                    body: formBody.toString()
                });

                const contentType = response.headers.get("content-type");
                if (contentType && contentType.indexOf("application/json") !== -1) {
                    const result = await response.json();

             
                if (result.success) {
                    window.location.href = '@Url.Action("Login", "Account")' + '?message=Đăng ký thành công! Vui lòng đăng nhập.';
                } else {
                    document.getElementById('registerError').textContent = result.message || 'Đăng ký thất bại';
                }
            } else {
      
               
                const text = await response.text();
                if (response.ok) {
                    window.location.href = '@Url.Action("Login", "Account")' + '?message=Đăng ký thành công! Vui lòng đăng nhập.';
                } else {
                    document.getElementById('registerError').textContent = 'Có lỗi xảy ra, vui lòng thử lại';
                }
            }
        } catch (error) {
            console.error('Register error:', error);
            document.getElementById('registerError').textContent = 'Có lỗi xảy ra, vui lòng thử lại';
        }
    });
</script>
}