@model List<MovieViewModel>
@{
    ViewData["Title"] = "Danh Sách Phim - Cinema City";
}

@section Styles {
    <!-- CSS từ SelectMovie -->
    <link rel="stylesheet" href="~/css/HomePage/base.css" />
    <link rel="stylesheet" href="~/css/Shared/_header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/HomePage/layout.css" />
    <link rel="stylesheet" href="~/css/HomePage/movie-poster-overlay.css" />
    <link rel="stylesheet" href="~/css/HomePage/responsive.css" />
    <link rel="stylesheet" href="~/css/MovieDetails/movie-details-mostly.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Movies/modern-list.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/HomePage/moviecard.css" />
    <link rel="stylesheet" href="~/css/HomePage/button.css" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">

    <style>
        /* Background từ SelectMovie */
        html, body {
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            background-attachment: fixed;
            background-size: 100% 100%;
            margin: 0 !important;
            padding: 0 !important;
            min-height: 100vh; /* Thay đổi từ height: 100% */
            color: white;
            font-family: 'Inter', sans-serif;
        }

        .cinema-movies-page {
            min-height: 100vh;
            color: white;
            font-family: 'Inter', sans-serif;
            background: transparent;
        }

        /* Hero Section từ SelectMovie */
        .hero-section-select {
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            height: 250px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            color: white;
            margin-bottom: 40px;
            position: relative;
            overflow: hidden;
        }

            .hero-section-select::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?ixlib=rb-4.0.3') center/cover;
                opacity: 0.1;
                z-index: 1;
            }

        .hero-content {
            max-width: 600px;
            padding: 0 20px;
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            background: linear-gradient(45deg, #fff, #4fc3f7);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            font-weight: 300;
            opacity: 0.9;
        }

        /* Container */
        .containers {
            max-width: 100%;
            margin: 0 auto;
            padding: 0 40px;
        }

        /* Main Content Layout - Kết hợp từ SelectMovie */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 40px;
            align-items: start;
            margin: 0 auto;
            width: 100%;
        }

        /* Movies Column */
        .movies-column {
            min-height: 600px;
            width: 100%;
        }

        /* Filter Section từ Movies */
        .filter-section {
            background: rgba(42, 42, 42, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(223, 33, 68, 0.2);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        }

        .filter-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .filter-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .filter-subtitle {
            color: rgba(255,255,255,0.7);
            font-size: 1rem;
        }

        .filter-tabs {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 2rem;
        }

        .filter-tab {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 1rem 2rem;
            border: 2px solid rgba(255,255,255,0.2);
            background: rgba(255,255,255,0.05);
            color: rgba(255,255,255,0.8);
            border-radius: 50px;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            backdrop-filter: blur(10px);
        }

            .filter-tab:hover {
                border-color: rgba(255,255,255,0.4);
                background: rgba(255,255,255,0.1);
                transform: translateY(-2px);
            }

            .filter-tab.active {
                background: linear-gradient(135deg, #rgb(129, 85, 238) 0%, #ff4466 100%);
                border-color: #rgb(129, 85, 238);
                color: white;
                box-shadow: 0 8px 25px rgba(223, 33, 68, 0.4);
            }

        .search-container {
            max-width: 500px;
            margin: 0 auto;
        }

        .search-box-movies {
            position: relative;
            background: rgba(255,255,255,0.1);
            border-radius: 50px;
            border: 1px solid rgba(255,255,255,0.2);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

            .search-box-movies input {
                width: 100%;
                padding: 1rem 1.5rem 1rem 3rem;
                border: none;
                background: transparent;
                color: white;
                font-size: 1rem;
            }

                .search-box-movies input::placeholder {
                    color: rgba(255,255,255,0.6);
                }

            .search-box-movies .search-icon {
                position: absolute;
                left: 1.5rem;
                top: 50%;
                transform: translateY(-50%);
                color: rgba(255,255,255,0.6);
                cursor: pointer;
            }

        /* Movies Grid từ SelectMovie style */
        .movies-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
            width: 100%;
        }

        /* Movie Card từ SelectMovie */
        .movie-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            overflow: hidden;
            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            cursor: pointer;
            border: 2px solid transparent;
            backdrop-filter: blur(10px);
            position: relative;
        }

            .movie-card:hover {
                transform: translateY(-5px) scale(1.05);
                border-color: #667eea;
                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.3);
            }

            .movie-card.selected {
                transform: translateY(-5px) scale(1.05);
                border-color: #rgb(129, 85, 238);
                box-shadow: 0 0 0 3px #rgb(129, 85, 238), 0 20px 40px rgba(223, 33, 68, 0.4);
            }

        /* Movie Poster */
        .movie-poster {
            position: relative;
            aspect-ratio: 2/3;
            border-radius: 8px;
            overflow: hidden;
        }

        .poster-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .movie-card:hover .poster-image {
            transform: scale(1.1);
        }

        /* Movie Info */
        .movie-info-home {
            padding: 1rem;
        }

        .badge-genre-home {
            background: linear-gradient(90deg, #43cea2 0%, #185a9d 100%);
            color: #fff;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            display: inline-block;
        }

        .movie-title-home {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #fff;
            line-height: 1.3;
        }

        .movie-meta-home {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: rgba(255,255,255,0.7);
        }

        .movie-duration-home {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Details Column từ SelectMovie */
        .details-column {
            background: #1f1f1f;
            border-radius: 8px;
            padding: 1.5rem;
            min-height: 520px;
        }

        .subsection-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #fff;
            margin-bottom: 24px;
            padding-bottom: 8px;
            border-bottom: 2px solid rgba(255,255,255,0.2);
        }

        /* Selected Movie Details */
        .selected-movie-details {
            animation: fadeInUp 0.5s ease;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .movie-header {
            margin-bottom: 30px;
        }

        .selected-movie-info {
            background: rgba(255,255,255,0.15);
            border-radius: 15px;
            padding: 20px;
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
        }

        /* Dates and Times Sections */
        .dates-section, .times-section {
            margin-bottom: 30px;
        }

        .dates-grid, .times-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 12px;
        }

        .date-btn, .time-btn {
            background: rgba(255,255,255,0.15);
            color: white;
            border: 2px solid rgba(255,255,255,0.2);
            padding: 12px 8px;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            backdrop-filter: blur(5px);
            font-size: 0.85rem;
        }

            .date-btn:hover, .time-btn:hover {
                background: rgba(255,255,255,0.25);
                border-color: rgba(255,255,255,0.4);
                transform: translateY(-2px);
            }

            .date-btn.selected, .time-btn.selected {
                background: #rgb(129, 85, 238);
                border-color: #rgb(129, 85, 238);
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(223, 33, 68, 0.4);
            }

        /* Loading State */
        .loading-state {
            text-align: center;
            color: white;
            padding: 20px;
            opacity: 0.8;
        }

            .loading-state i {
                font-size: 1.5rem;
                margin-right: 10px;
            }

        /* Empty State */
        .empty-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 4rem 2rem;
        }

        .empty-content {
            max-width: 400px;
            margin: 0 auto;
        }

            .empty-content i {
                color: rgba(255,255,255,0.3);
                margin-bottom: 1rem;
            }

            .empty-content h3 {
                color: rgba(255,255,255,0.8);
                margin-bottom: 1rem;
            }

            .empty-content p {
                color: rgba(255,255,255,0.6);
                margin-bottom: 2rem;
            }

        .default-state {
            text-align: center;
            color: white;
            padding: 2rem;
        }

            .default-state i {
                font-size: 3rem;
                margin-bottom: 1rem;
                color: rgba(255,255,255,0.3);
            }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr 350px;
                gap: 30px;
            }
        }

        @@media (max-width: 992px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 30px;
            }

            .details-column {
                position: static;
                order: -1;
            }
        }

        @@media (max-width: 768px) {
            .hero-title {
                font-size: 2.2rem;
            }

            .hero-subtitle {
                font-size: 1rem;
            }

            .movies-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 20px;
            }

            .details-column {
                padding: 20px;
            }
        }

        @@media (max-width: 480px) {
            .movies-grid {
                grid-template-columns: 1fr;
            }

            .hero-title {
                font-size: 1.8rem;
            }

            .dates-grid, .times-grid {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }
        }
    </style>
}


<div class="cinema-movies-page">
    <!-- Hero Section từ SelectMovie -->
    <div class="hero-section-select">
    </div>

    <div class="containers">
        <div class="main-content">
            <!-- Left Column: Movies với Filter từ Movies -->
            <div class="movies-column">
                <!-- Filter Section từ Movies -->
                <div class="filter-section">
                    <div class="filter-header">
                        <h2 class="filter-title">Lọc Phim</h2>
                        <p class="filter-subtitle">Tìm kiếm phim theo thể loại và trạng thái</p>
                    </div>

                    <div class="filter-tabs">
                        <button class="filter-tab active" data-filter="all">
                            <i class="fas fa-th-large"></i>
                            Tất cả phim
                        </button>
                        <button class="filter-tab" data-filter="recommended">
                            <i class="fas fa-thumbs-up"></i>
                            Phim đề xuất
                        </button>
                        <button class="filter-tab" data-filter="coming-soon">
                            <i class="fas fa-calendar-alt"></i>
                            Phim sắp chiếu
                        </button>
                        <button class="filter-tab" data-filter="now-showing">
                            <i class="fas fa-play-circle"></i>
                            Đang chiếu
                        </button>
                    </div>

                    <div class="search-container">
                        <div class="search-box-movies">
                            <i class="fas fa-search search-icon" id="searchBtn"></i>
                            <input type="text" placeholder="Tìm kiếm phim theo tên, thể loại, đạo diễn..." id="movieSearch">
                        </div>
                    </div>
                </div>

                <!-- Movies Grid -->
                <div class="movies-grid" id="moviesGrid">
                    <!-- Movies will be loaded here via JavaScript -->
                    <div class="loading-state" style="grid-column: 1 / -1; text-align: center; padding: 4rem 2rem;">
                        <i class="fas fa-spinner fa-spin fa-3x" style="color: rgba(255,255,255,0.6);"></i>
                        <h3 style="color: rgba(255,255,255,0.8); margin-top: 1rem;">Đang tải phim...</h3>
                    </div>
                </div>
            </div>

            <!-- Right Column: Movie Details & Showtimes từ SelectMovie -->
            <div class="details-column">
                <!-- Default state -->
                <div id="defaultState" class="default-state">
                    <div class="empty-state">
                        <i class="fas fa-hand-pointer"></i>
                        <h3>Chọn một bộ phim</h3>
                        <p>Vui lòng chọn phim từ danh sách bên trái để xem lịch chiếu</p>
                    </div>
                </div>

                <!-- Selected Movie Info -->
                <div id="selectedMovieDetails" class="selected-movie-details" style="display: none;">
                    <div class="movie-header">
                        <div id="selectedMovieInfo" class="selected-movie-info">
                            <!-- Selected movie info will be displayed here -->
                        </div>
                    </div>

                    <!-- Movie Dates Section -->
                    <div id="movieDatesSection" class="dates-section">
                        <h3 class="subsection-title">Chọn Ngày Chiếu</h3>
                        <div id="movieDates" class="dates-grid">
                            <!-- Dates will be loaded here -->
                        </div>
                    </div>

                    <!-- Movie Times Section -->
                    <div id="movieTimesSection" class="times-section" style="display: none;">
                        <h3 class="subsection-title">Chọn Suất Chiếu</h3>
                        <div id="movieTimes" class="times-grid">
                            <!-- Times will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let selectedMovieId = null;
    let selectedDate = null;
    let currentFilter = 'all';
    let isLoading = false;

    document.addEventListener('DOMContentLoaded', function () {
        const filterTabs = document.querySelectorAll('.filter-tab');
        const searchInput = document.getElementById('movieSearch');
        const searchBtn = document.getElementById('searchBtn');
        const moviesGrid = document.getElementById('moviesGrid');

        // Load initial data
        loadMovies('all');

        // Filter functionality từ Movies
        filterTabs.forEach(tab => {
            tab.addEventListener('click', function () {
                if (isLoading) return;

                // Remove active class from all tabs
                filterTabs.forEach(t => t.classList.remove('active'));
                // Add active class to clicked tab
                this.classList.add('active');

                const filter = this.getAttribute('data-filter');
                currentFilter = filter;

                console.log('🎬 [FILTER] Switching to:', filter);
                loadMovies(filter);
            });
        });

        // Search functionality
        searchInput.addEventListener('input', function () {
            const searchTerm = this.value.trim();
            if (searchTerm.length >= 2 || searchTerm.length === 0) {
                loadMovies(currentFilter, searchTerm);
            }
        });

        async function loadMovies(filter, searchTerm = '') {
            if (isLoading) return;

            try {
                isLoading = true;
                showLoading();

                console.log(`🔄 [API CALL] Loading movies: filter=${filter}, search=${searchTerm}`);

                let url = `@Url.Action("GetMoviesByFilter", "Movies")?filter=${filter}&page=1&pageSize=20`;
                if (searchTerm) {
                    url += `&search=${encodeURIComponent(searchTerm)}`;
                }

                const response = await fetch(url);
                const result = await response.json();

                console.log('📥 [API RESPONSE]', result);

                if (result.success) {
                    displayMovies(result.data, filter);
                    console.log(`✅ [SUCCESS] Loaded ${result.data?.length || 0} movies for filter: ${filter}`);
                } else {
                    console.error('❌ [ERROR] API call failed:', result.message);
                    showError(result.message || 'Không thể tải danh sách phim');
                }
            } catch (error) {
                console.error('❌ [FETCH ERROR]', error);
                showError('Đã xảy ra lỗi khi tải danh sách phim');
            } finally {
                isLoading = false;
                hideLoading();
            }
        }

        function displayMovies(movies, filter) {
            if (!movies || movies.length === 0) {
                moviesGrid.innerHTML = `
                            <div class="empty-state">
                                <div class="empty-content">
                                    <i class="fas fa-film fa-5x"></i>
                                    <h3>Không có phim nào</h3>
                                    <p>Hiện tại không tìm thấy phim nào cho danh mục "${getFilterDisplayName(filter)}".</p>
                                    <button class="btn btn-primary" onclick="loadMovies('all')">
                                        <i class="fas fa-refresh"></i>
                                        Xem tất cả phim
                                    </button>
                                </div>
                            </div>
                        `;
                return;
            }

            const moviesHtml = movies.map(movie => createMovieCard(movie)).join('');
            moviesGrid.innerHTML = moviesHtml;

            // Add click handlers cho movie cards
            addMovieCardClickHandlers();

            // Animate cards
            setTimeout(() => {
                const cards = moviesGrid.querySelectorAll('.movie-card');
                cards.forEach((card, index) => {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(20px)';
                    setTimeout(() => {
                        card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, index * 100);
                });
            }, 50);
        }

        function createMovieCard(movie) {
            const imageUrl = movie.primaryImageUrl || movie.imageUrl ||
                (movie.images && movie.images.length > 0 ?
                    (movie.images.find(img => img.isPrimary) || movie.images[0]).imageUrl :
                    'https://via.placeholder.com/300x450/1a1a1a/ffffff?text=No+Image');

            const genresText = movie.genres && movie.genres.length > 0 ?
                movie.genres.map(g => g.name).join(', ') : 'Chưa phân loại';

            return `
                        <div class="movie-card" data-movie-id="${movie.id}">
                            <div class="movie-poster">
                                <img src="${imageUrl}" alt="${movie.title}" class="poster-image"
                                     onerror="this.src='https://via.placeholder.com/300x450/1a1a1a/ffffff?text=No+Image'">
                            </div>
                            <div class="movie-info-home">
                                <span class="badge-genre-home">
                                    ${genresText}
                                </span>
                                <h3 class="movie-title-home">${movie.title}</h3>
                                <div class="movie-meta-home">
                                    <div class="movie-duration-home">
                                        <i class="fas fa-clock"></i>
                                        <span>${movie.runningTime} phút</span>
                                    </div>
                                    <span class="movie-director-home">${movie.director || 'N/A'}</span>
                                </div>
                            </div>
                        </div>
                    `;
        }

        function addMovieCardClickHandlers() {
            document.querySelectorAll('.movie-card').forEach(function (card) {
                card.addEventListener('click', function (e) {
                    e.preventDefault();
                    console.log('Movie card clicked!');

                    const movieId = this.getAttribute('data-movie-id');

                    // Validation cho movieId
                    const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

                    if (!movieId || !guidRegex.test(movieId)) {
                        console.error('Invalid movieId format:', movieId);
                        alert('ID phim không hợp lệ. Vui lòng thử lại.');
                        return;
                    }

                    const movieTitle = this.querySelector('.movie-title-home').textContent;
                    const moviePoster = this.querySelector('.poster-image').getAttribute('src');
                    const movieDirectorElement = this.querySelector('.movie-director-home');
                    const movieDurationElement = this.querySelector('.movie-duration-home span');

                    const movieDirector = movieDirectorElement ? movieDirectorElement.textContent : 'N/A';
                    const movieDuration = movieDurationElement ? movieDurationElement.textContent : 'N/A';

                    console.log('Movie details:', { movieId, movieTitle, moviePoster, movieDirector, movieDuration });

                    // Remove previous selection
                    document.querySelectorAll('.movie-card').forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');

                    selectedMovieId = movieId;

                    // Hide default state and show movie details
                    document.getElementById('defaultState').style.display = 'none';
                    document.getElementById('selectedMovieDetails').style.display = 'block';

                    // Update selected movie info
                    document.getElementById('selectedMovieInfo').innerHTML = `
                                <div style="display: flex; align-items: center; gap: 15px;">
                                    <img src="${moviePoster}" alt="${movieTitle}" style="width: 60px; height: 90px; object-fit: cover; border-radius: 8px; flex-shrink: 0;">
                                    <div style="text-align: left; flex: 1;">
                                        <h4 style="margin-bottom: 6px; font-size: 1.1rem; font-weight: 600;">${movieTitle}</h4>
                                        <p style="margin-bottom: 4px; opacity: 0.9; font-size: 0.9rem;">${movieDirector}</p>
                                        <p style="opacity: 0.9; font-size: 0.9rem; color: #28a745;">${movieDuration}</p>
                                    </div>
                                </div>
                            `;

                    console.log('Loading movie dates for ID:', movieId);
                    loadMovieDates(movieId);
                });
            });
        }

        // Functions từ SelectMovie
        function loadMovieDates(movieId) {
            console.log('loadMovieDates called with:', movieId);

            // Show loading state
            document.getElementById('movieDates').innerHTML = '<div class="loading-state"><i class="fas fa-spinner fa-spin"></i>Đang tải ngày chiếu...</div>';
            document.getElementById('movieDatesSection').style.display = 'block';
            document.getElementById('movieTimesSection').style.display = 'none';

            const apiUrl = `https://cinemacity-backend-hhasbzggfafpgbgw.eastasia-01.azurewebsites.net/api/v1/booking-ticket/dropdown/movies/${movieId}/dates`;
            console.log('API URL:', apiUrl);

            fetch(apiUrl)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API Success:', data);
                    if (data.data && Array.isArray(data.data) && data.data.length > 0) {
                        displayMovieDates(data.data);
                    } else {
                        console.log('No dates found');
                        document.getElementById('movieDates').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-exclamation-triangle"></i><br>Không có ngày chiếu nào cho phim này.</div>';
                    }
                })
                .catch(error => {
                    console.error('API Error:', error);
                    document.getElementById('movieDates').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-times-circle"></i><br>Có lỗi xảy ra khi tải ngày chiếu.</div>';
                });
        }

        function displayMovieDates(dates) {
            console.log('displayMovieDates called with:', dates);

            const datesHtml = dates.map(date =>
                `<button class="date-btn" data-date="${date.code}">
                            <div style="font-size: 0.9rem; margin-bottom: 4px; font-weight: 600;">${date.text}</div>
                            <div style="font-size: 0.75rem; opacity: 0.8;">${getDayOfWeek(date.code)}</div>
                        </button>`
            ).join('');

            document.getElementById('movieDates').innerHTML = datesHtml;

            // Date click handler
            document.querySelectorAll('.date-btn').forEach(function (btn) {
                btn.addEventListener('click', function () {
                    console.log('Date clicked:', this.getAttribute('data-date'));
                    document.querySelectorAll('.date-btn').forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');

                    selectedDate = this.getAttribute('data-date');
                    loadMovieTimes(selectedMovieId, selectedDate);
                });
            });
        }

        function loadMovieTimes(movieId, date) {
            console.log('loadMovieTimes called with:', { movieId, date });

            // Show loading state
            document.getElementById('movieTimes').innerHTML = '<div class="loading-state"><i class="fas fa-spinner fa-spin"></i>Đang tải suất chiếu...</div>';
            document.getElementById('movieTimesSection').style.display = 'block';

            const apiUrl = `https://cinemacity-backend-hhasbzggfafpgbgw.eastasia-01.azurewebsites.net/api/v1/booking-ticket/dropdown/movies/${movieId}/times?date=${encodeURIComponent(date + ' 10:00:00+07')}`;
            console.log('API URL:', apiUrl);

            fetch(apiUrl)
                .then(response => {
                    console.log('ShowTimes Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('ShowTimes Success:', data);
                    if (data.data && Array.isArray(data.data) && data.data.length > 0) {
                        displayMovieTimes(data.data);
                    } else {
                        document.getElementById('movieTimes').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-exclamation-triangle"></i><br>Không có suất chiếu nào cho ngày này.</div>';
                    }
                })
                .catch(error => {
                    console.error('ShowTimes Error:', error);
                    document.getElementById('movieTimes').innerHTML = '<div style="text-align: center; color: white; padding: 20px; opacity: 0.8;"><i class="fas fa-times-circle"></i><br>Có lỗi xảy ra khi tải suất chiếu.</div>';
                });
        }

        function displayMovieTimes(times) {
            console.log('displayMovieTimes called with:', times);

            const timesHtml = times.map(time =>
                `<button class="time-btn" data-showtime-id="${time.id}">
                            <div style="font-size: 0.9rem; font-weight: 600; margin-bottom: 4px;">${time.time}</div>
                            <div style="font-size: 0.7rem; opacity: 0.8; margin-bottom: 2px;">Phòng chiếu</div>
                            <div style="font-size: 0.65rem; opacity: 0.7;">Còn ghế trống</div>
                        </button>`
            ).join('');

            document.getElementById('movieTimes').innerHTML = timesHtml;

            // Time click handler
            document.querySelectorAll('.time-btn').forEach(function (btn) {
                btn.addEventListener('click', function () {
                    document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('selected'));
                    this.classList.add('selected');

                    const showtimeId = this.getAttribute('data-showtime-id');

                    // Show confirmation and redirect
                    setTimeout(() => {
                        window.location.href = `/BookingManagement/Booking/SelectSeat?showtimeId=${showtimeId}`;
                    }, 500);
                });
            });
        }

        // Helper functions
        function showLoading() {
            // Implementation for loading state
        }

        function hideLoading() {
            // Implementation for hiding loading state
        }

        function showError(message) {
            moviesGrid.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-content">
                                <i class="fas fa-exclamation-triangle fa-5x"></i>
                                <h3>Có lỗi xảy ra</h3>
                                <p>${message}</p>
                                <button class="btn btn-primary" onclick="loadMovies('all')">
                                    <i class="fas fa-refresh"></i>
                                    Thử lại
                                </button>
                            </div>
                        </div>
                    `;
        }

        function getFilterDisplayName(filter) {
            const filterNames = {
                'all': 'Tất cả phim',
                'recommended': 'Phim đề xuất',
                'coming-soon': 'Phim sắp chiếu',
                'now-showing': 'Đang chiếu'
            };
            return filterNames[filter] || filter;
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            return `${day}/${month}`;
        }

        function getDayOfWeek(dateString) {
            const date = new Date(dateString);
            const days = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
            return days[date.getDay()];
        }
    });
</script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
}